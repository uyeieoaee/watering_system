
TKHTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4e8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800b5f8  0800b5f8  0000c5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb90  0800bb90  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb90  0800bb90  0000cb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb98  0800bb98  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb98  0800bb98  0000cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb9c  0800bb9c  0000cb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800bba0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000306c  200001dc  0800bd7c  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003248  0800bd7c  0000d248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c809  00000000  00000000  0000d205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e29  00000000  00000000  00029a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fb  00000000  00000000  0002f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a679  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2b9  00000000  00000000  0004a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009911e  00000000  00000000  00066cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffdcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b4  00000000  00000000  000ffe10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001076c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b5e0 	.word	0x0800b5e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800b5e0 	.word	0x0800b5e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f9f9 	bl	8002234 <HAL_Delay>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af02      	add	r7, sp, #8
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	70fb      	strb	r3, [r7, #3]
 8000e56:	4613      	mov	r3, r2
 8000e58:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f023 030f 	bic.w	r3, r3, #15
 8000e60:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7adb      	ldrb	r3, [r3, #11]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d108      	bne.n	8000e98 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	73bb      	strb	r3, [r7, #14]
 8000e96:	e00a      	b.n	8000eae <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000e98:	78bb      	ldrb	r3, [r7, #2]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d107      	bne.n	8000eae <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff ffb9 	bl	8000e30 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff ffaf 	bl	8000e30 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	791b      	ldrb	r3, [r3, #4]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f107 0208 	add.w	r2, r7, #8
 8000ee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2304      	movs	r3, #4
 8000eec:	f001 fde4 	bl	8002ab8 <HAL_I2C_Master_Transmit>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4611      	mov	r1, r2
 8000f04:	461a      	mov	r2, r3
 8000f06:	460b      	mov	r3, r1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	7e3a      	ldrb	r2, [r7, #24]
 8000f24:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2228      	movs	r2, #40	@ 0x28
 8000f2a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2206      	movs	r2, #6
 8000f30:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	220c      	movs	r2, #12
 8000f36:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2214      	movs	r2, #20
 8000f3c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2208      	movs	r2, #8
 8000f42:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000f44:	2032      	movs	r0, #50	@ 0x32
 8000f46:	f7ff ff73 	bl	8000e30 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2133      	movs	r1, #51	@ 0x33
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ff7b 	bl	8000e4a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2133      	movs	r1, #51	@ 0x33
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff ff76 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000f5e:	2005      	movs	r0, #5
 8000f60:	f7ff ff66 	bl	8000e30 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2132      	movs	r1, #50	@ 0x32
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff ff6e 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f7ff ff5e 	bl	8000e30 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2120      	movs	r1, #32
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff66 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f7ff ff56 	bl	8000e30 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	79db      	ldrb	r3, [r3, #7]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f7ff ff5c 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	7a1b      	ldrb	r3, [r3, #8]
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f7ff ff55 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	7a5b      	ldrb	r3, [r3, #9]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff ff4e 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	7a9b      	ldrb	r3, [r3, #10]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff ff47 	bl	8000e4a <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff ff42 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2102      	movs	r1, #2
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff ff3d 	bl	8000e4a <CLCD_WriteI2C>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d303      	bcc.n	8000ffe <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	795b      	ldrb	r3, [r3, #5]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	799b      	ldrb	r3, [r3, #6]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	429a      	cmp	r2, r3
 8001006:	d303      	bcc.n	8001010 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	3b01      	subs	r3, #1
 800100e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e013      	b.n	8001044 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800101c:	78bb      	ldrb	r3, [r7, #2]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d103      	bne.n	800102a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	3340      	adds	r3, #64	@ 0x40
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e00c      	b.n	8001044 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800102a:	78bb      	ldrb	r3, [r7, #2]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d103      	bne.n	8001038 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	3314      	adds	r3, #20
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e005      	b.n	8001044 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d102      	bne.n	8001044 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	3354      	adds	r3, #84	@ 0x54
 8001042:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fefa 	bl	8000e4a <CLCD_WriteI2C>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff feea 	bl	8000e4a <CLCD_WriteI2C>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8001088:	e007      	b.n	800109a <CLCD_I2C_WriteString+0x1c>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	603a      	str	r2, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe2 	bl	800105e <CLCD_I2C_WriteChar>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f3      	bne.n	800108a <CLCD_I2C_WriteString+0xc>
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fec6 	bl	8000e4a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80010be:	2005      	movs	r0, #5
 80010c0:	f7ff feb6 	bl	8000e30 <CLCD_Delay>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f002 fcd7 	bl	8003a88 <HAL_TIM_Base_Start>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 80010f6:	bf00      	nop
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3f9      	bcc.n	80010f8 <DELAY_TIM_Us+0x16>
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f9aa 	bl	8002498 <HAL_GPIO_Init>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2302      	movs	r3, #2
 800116e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f001 f98c 	bl	8002498 <HAL_GPIO_Init>
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	4619      	mov	r1, r3
 80011a0:	f001 fb15 	bl	80027ce <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f001 faee 	bl	80027a0 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
    return value;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff74 	bl	80010cc <DELAY_TIM_Init>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff6e 	bl	80010e2 <DELAY_TIM_Us>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff96 	bl	800114c <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 8001228:	f244 6150 	movw	r1, #18000	@ 0x4650
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffdd 	bl	80011ec <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff6c 	bl	8001110 <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 8001238:	2132      	movs	r1, #50	@ 0x32
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffd6 	bl	80011ec <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffb3 	bl	80011ac <DHT11_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d112      	bne.n	8001272 <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 800124c:	2150      	movs	r1, #80	@ 0x50
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffcc 	bl	80011ec <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffa9 	bl	80011ac <DHT11_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b01      	cmp	r3, #1
 800125e:	d108      	bne.n	8001272 <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 8001264:	bf00      	nop
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa0 	bl	80011ac <DHT11_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d0f9      	beq.n	8001266 <DHT11_Start+0x58>
        }
    }

    return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff41 	bl	8001110 <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 800128e:	2300      	movs	r3, #0
 8001290:	73bb      	strb	r3, [r7, #14]
 8001292:	e035      	b.n	8001300 <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 8001294:	bf00      	nop
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff88 	bl	80011ac <DHT11_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f9      	beq.n	8001296 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 80012a2:	2128      	movs	r1, #40	@ 0x28
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ffa1 	bl	80011ec <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff7e 	bl	80011ac <DHT11_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10c      	bne.n	80012d0 <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	f1c3 0307 	rsb	r3, r3, #7
 80012bc:	2201      	movs	r2, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	b25a      	sxtb	r2, r3
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e00d      	b.n	80012ec <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 80012d0:	7bbb      	ldrb	r3, [r7, #14]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	b25a      	sxtb	r2, r3
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4013      	ands	r3, r2
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 80012ec:	bf00      	nop
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff5c 	bl	80011ac <DHT11_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d0f9      	beq.n	80012ee <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73bb      	strb	r3, [r7, #14]
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	2b07      	cmp	r3, #7
 8001304:	d9c6      	bls.n	8001294 <DHT11_ReadByte+0x18>
    }

    return value;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	88fa      	ldrh	r2, [r7, #6]
 800132a:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff ff45 	bl	80011d2 <DHT11_DelayInit>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff56 	bl	800120e <DHT11_Start>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d15f      	bne.n	800142c <DHT11_GetData+0xdc>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff85 	bl	800127c <DHT11_ReadByte>
 8001372:	4603      	mov	r3, r0
 8001374:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff80 	bl	800127c <DHT11_ReadByte>
 800137c:	4603      	mov	r3, r0
 800137e:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff7b 	bl	800127c <DHT11_ReadByte>
 8001386:	4603      	mov	r3, r0
 8001388:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff76 	bl	800127c <DHT11_ReadByte>
 8001390:	4603      	mov	r3, r0
 8001392:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff71 	bl	800127c <DHT11_ReadByte>
 800139a:	4603      	mov	r3, r0
 800139c:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 800139e:	7aba      	ldrb	r2, [r7, #10]
 80013a0:	7bb9      	ldrb	r1, [r7, #14]
 80013a2:	7b7b      	ldrb	r3, [r7, #13]
 80013a4:	4419      	add	r1, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	4419      	add	r1, r3
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	440b      	add	r3, r1
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d13a      	bne.n	8001428 <DHT11_GetData+0xd8>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fc71 	bl	8000c9c <__aeabi_i2f>
 80013ba:	4604      	mov	r4, r0
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f820 	bl	8000404 <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <DHT11_GetData+0xe8>)
 80013ca:	f7ff f9af 	bl	800072c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fb57 	bl	8000a88 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4619      	mov	r1, r3
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff fba8 	bl	8000b34 <__addsf3>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fc54 	bl	8000c9c <__aeabi_i2f>
 80013f4:	4604      	mov	r4, r0
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f803 	bl	8000404 <__aeabi_i2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <DHT11_GetData+0xe8>)
 8001404:	f7ff f992 	bl	800072c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fb3a 	bl	8000a88 <__aeabi_d2f>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff fb8b 	bl	8000b34 <__addsf3>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e001      	b.n	800142c <DHT11_GetData+0xdc>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 8001428:	2302      	movs	r3, #2
 800142a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	40240000 	.word	0x40240000

0800143c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == C1_Pin){
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800144c:	d114      	bne.n	8001478 <HAL_GPIO_EXTI_Callback+0x3c>
	  for(int i=0;i<1000000;i++);
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e002      	b.n	800145a <HAL_GPIO_EXTI_Callback+0x1e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_GPIO_EXTI_Callback+0x44>)
 800145e:	4293      	cmp	r3, r2
 8001460:	ddf8      	ble.n	8001454 <HAL_GPIO_EXTI_Callback+0x18>
	  __HAL_GPIO_EXTI_GET_IT(C1_Pin);
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x48>)
 8001464:	695b      	ldr	r3, [r3, #20]
	  HAL_NVIC_GetPendingIRQ(EXTI15_10_IRQn);
 8001466:	2028      	movs	r0, #40	@ 0x28
 8001468:	f001 f807 	bl	800247a <HAL_NVIC_GetPendingIRQ>
	  osEventFlagsSet(InterruptHandle, 1);
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x4c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	4618      	mov	r0, r3
 8001474:	f003 faf0 	bl	8004a58 <osEventFlagsSet>
  }
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	000f423f 	.word	0x000f423f
 8001484:	40010400 	.word	0x40010400
 8001488:	200002fc 	.word	0x200002fc

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f000 fe9d 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001496:	f000 f8ab 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149a:	f000 f995 	bl	80017c8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800149e:	f000 f8ed 	bl	800167c <MX_I2C2_Init>
  MX_TIM4_Init();
 80014a2:	f000 f919 	bl	80016d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80014a6:	f000 f965 	bl	8001774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  DHT11_Init(&dht,DHT11_GPIO_Port, DHT11_Pin, &htim4);
  DHT11_Init(&dht, DHT11_GPIO_Port,DHT11_Pin,&htim4);
 80014aa:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <main+0xec>)
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4932      	ldr	r1, [pc, #200]	@ (800157c <main+0xf0>)
 80014b2:	4833      	ldr	r0, [pc, #204]	@ (8001580 <main+0xf4>)
 80014b4:	f7ff ff2c 	bl	8001310 <DHT11_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4e,20,4);
 80014b8:	2304      	movs	r3, #4
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2314      	movs	r3, #20
 80014be:	224e      	movs	r2, #78	@ 0x4e
 80014c0:	4930      	ldr	r1, [pc, #192]	@ (8001584 <main+0xf8>)
 80014c2:	4831      	ldr	r0, [pc, #196]	@ (8001588 <main+0xfc>)
 80014c4:	f7ff fd18 	bl	8000ef8 <CLCD_I2C_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014c8:	f003 f8a6 	bl	8004618 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TempHumid */
  TempHumidHandle = osSemaphoreNew(1, 0, &TempHumid_attributes);
 80014cc:	4a2f      	ldr	r2, [pc, #188]	@ (800158c <main+0x100>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	2001      	movs	r0, #1
 80014d2:	f003 fbd1 	bl	8004c78 <osSemaphoreNew>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001590 <main+0x104>)
 80014da:	6013      	str	r3, [r2, #0]

  /* creation of DataSem */
  DataSemHandle = osSemaphoreNew(2, 2, &DataSem_attributes);
 80014dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001594 <main+0x108>)
 80014de:	2102      	movs	r1, #2
 80014e0:	2002      	movs	r0, #2
 80014e2:	f003 fbc9 	bl	8004c78 <osSemaphoreNew>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001598 <main+0x10c>)
 80014ea:	6013      	str	r3, [r2, #0]

  /* creation of ComSem */
  ComSemHandle = osSemaphoreNew(2, 2, &ComSem_attributes);
 80014ec:	4a2b      	ldr	r2, [pc, #172]	@ (800159c <main+0x110>)
 80014ee:	2102      	movs	r1, #2
 80014f0:	2002      	movs	r0, #2
 80014f2:	f003 fbc1 	bl	8004c78 <osSemaphoreNew>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <main+0x114>)
 80014fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendCloud */
  sendCloudHandle = osThreadNew(sendCloudHandler, NULL, &sendCloud_attributes);
 80014fc:	4a29      	ldr	r2, [pc, #164]	@ (80015a4 <main+0x118>)
 80014fe:	2100      	movs	r1, #0
 8001500:	4829      	ldr	r0, [pc, #164]	@ (80015a8 <main+0x11c>)
 8001502:	f003 f917 	bl	8004734 <osThreadNew>
 8001506:	4603      	mov	r3, r0
 8001508:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <main+0x120>)
 800150a:	6013      	str	r3, [r2, #0]

  /* creation of ReadDataTaskHan */
  ReadDataTaskHanHandle = osThreadNew(ReadDataTask, NULL, &ReadDataTaskHan_attributes);
 800150c:	4a28      	ldr	r2, [pc, #160]	@ (80015b0 <main+0x124>)
 800150e:	2100      	movs	r1, #0
 8001510:	4828      	ldr	r0, [pc, #160]	@ (80015b4 <main+0x128>)
 8001512:	f003 f90f 	bl	8004734 <osThreadNew>
 8001516:	4603      	mov	r3, r0
 8001518:	4a27      	ldr	r2, [pc, #156]	@ (80015b8 <main+0x12c>)
 800151a:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTaskHand */
  DisplayTaskHandHandle = osThreadNew(DisplayTask, NULL, &DisplayTaskHand_attributes);
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <main+0x130>)
 800151e:	2100      	movs	r1, #0
 8001520:	4827      	ldr	r0, [pc, #156]	@ (80015c0 <main+0x134>)
 8001522:	f003 f907 	bl	8004734 <osThreadNew>
 8001526:	4603      	mov	r3, r0
 8001528:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <main+0x138>)
 800152a:	6013      	str	r3, [r2, #0]

  /* creation of HandleInterupt */
  HandleInteruptHandle = osThreadNew(HandleISP, NULL, &HandleInterupt_attributes);
 800152c:	4a26      	ldr	r2, [pc, #152]	@ (80015c8 <main+0x13c>)
 800152e:	2100      	movs	r1, #0
 8001530:	4826      	ldr	r0, [pc, #152]	@ (80015cc <main+0x140>)
 8001532:	f003 f8ff 	bl	8004734 <osThreadNew>
 8001536:	4603      	mov	r3, r0
 8001538:	4a25      	ldr	r2, [pc, #148]	@ (80015d0 <main+0x144>)
 800153a:	6013      	str	r3, [r2, #0]

  /* creation of pumpControlHand */
  pumpControlHandHandle = osThreadNew(pumpControl, NULL, &pumpControlHand_attributes);
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <main+0x148>)
 800153e:	2100      	movs	r1, #0
 8001540:	4825      	ldr	r0, [pc, #148]	@ (80015d8 <main+0x14c>)
 8001542:	f003 f8f7 	bl	8004734 <osThreadNew>
 8001546:	4603      	mov	r3, r0
 8001548:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <main+0x150>)
 800154a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Interrupt */
  InterruptHandle = osEventFlagsNew(&Interrupt_attributes);
 800154c:	4824      	ldr	r0, [pc, #144]	@ (80015e0 <main+0x154>)
 800154e:	f003 fa31 	bl	80049b4 <osEventFlagsNew>
 8001552:	4603      	mov	r3, r0
 8001554:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <main+0x158>)
 8001556:	6013      	str	r3, [r2, #0]

  /* creation of pumpEvent */
  pumpEventHandle = osEventFlagsNew(&pumpEvent_attributes);
 8001558:	4823      	ldr	r0, [pc, #140]	@ (80015e8 <main+0x15c>)
 800155a:	f003 fa2b 	bl	80049b4 <osEventFlagsNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a22      	ldr	r2, [pc, #136]	@ (80015ec <main+0x160>)
 8001562:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  osSemaphoreRelease(TempHumidHandle);
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <main+0x104>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fc87 	bl	8004e7c <osSemaphoreRelease>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800156e:	f003 f885 	bl	800467c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001572:	bf00      	nop
 8001574:	e7fd      	b.n	8001572 <main+0xe6>
 8001576:	bf00      	nop
 8001578:	2000024c 	.word	0x2000024c
 800157c:	40010800 	.word	0x40010800
 8001580:	20000310 	.word	0x20000310
 8001584:	200001f8 	.word	0x200001f8
 8001588:	20000304 	.word	0x20000304
 800158c:	0800b7a8 	.word	0x0800b7a8
 8001590:	200002f0 	.word	0x200002f0
 8001594:	0800b7b8 	.word	0x0800b7b8
 8001598:	200002f4 	.word	0x200002f4
 800159c:	0800b7c8 	.word	0x0800b7c8
 80015a0:	200002f8 	.word	0x200002f8
 80015a4:	0800b6f4 	.word	0x0800b6f4
 80015a8:	0800196d 	.word	0x0800196d
 80015ac:	200002dc 	.word	0x200002dc
 80015b0:	0800b718 	.word	0x0800b718
 80015b4:	080019fd 	.word	0x080019fd
 80015b8:	200002e0 	.word	0x200002e0
 80015bc:	0800b73c 	.word	0x0800b73c
 80015c0:	08001a7d 	.word	0x08001a7d
 80015c4:	200002e4 	.word	0x200002e4
 80015c8:	0800b760 	.word	0x0800b760
 80015cc:	08001b29 	.word	0x08001b29
 80015d0:	200002e8 	.word	0x200002e8
 80015d4:	0800b784 	.word	0x0800b784
 80015d8:	08001c5d 	.word	0x08001c5d
 80015dc:	200002ec 	.word	0x200002ec
 80015e0:	0800b7d8 	.word	0x0800b7d8
 80015e4:	200002fc 	.word	0x200002fc
 80015e8:	0800b7e8 	.word	0x0800b7e8
 80015ec:	20000300 	.word	0x20000300

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b090      	sub	sp, #64	@ 0x40
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	2228      	movs	r2, #40	@ 0x28
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f007 fec5 	bl	800938e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800161a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800162e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fd95 	bl	8003168 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001644:	f000 fb46 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001648:	230f      	movs	r3, #15
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2102      	movs	r1, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f802 	bl	800366c <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800166e:	f000 fb31 	bl	8001cd4 <Error_Handler>
  }
}
 8001672:	bf00      	nop
 8001674:	3740      	adds	r7, #64	@ 0x40
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_I2C2_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <MX_I2C2_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_I2C2_Init+0x50>)
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_I2C2_Init+0x58>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_I2C2_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_I2C2_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_I2C2_Init+0x50>)
 800169a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_I2C2_Init+0x50>)
 80016ba:	f001 f8b9 	bl	8002830 <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016c4:	f000 fb06 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200001f8 	.word	0x200001f8
 80016d0:	40005800 	.word	0x40005800
 80016d4:	000186a0 	.word	0x000186a0

080016d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <MX_TIM4_Init+0x94>)
 80016f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <MX_TIM4_Init+0x98>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <MX_TIM4_Init+0x94>)
 80016fc:	2247      	movs	r2, #71	@ 0x47
 80016fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_TIM4_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_TIM4_Init+0x94>)
 8001708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800170c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <MX_TIM4_Init+0x94>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_TIM4_Init+0x94>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800171a:	4814      	ldr	r0, [pc, #80]	@ (800176c <MX_TIM4_Init+0x94>)
 800171c:	f002 f964 	bl	80039e8 <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001726:	f000 fad5 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	@ (800176c <MX_TIM4_Init+0x94>)
 8001738:	f002 fb4a 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001742:	f000 fac7 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	@ (800176c <MX_TIM4_Init+0x94>)
 8001754:	f002 fd20 	bl	8004198 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800175e:	f000 fab9 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000024c 	.word	0x2000024c
 8001770:	40000800 	.word	0x40000800

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <MX_USART2_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017ac:	f002 fd64 	bl	8004278 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 fa8d 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000294 	.word	0x20000294
 80017c4:	40004400 	.word	0x40004400

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <MX_GPIO_Init+0x148>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001910 <MX_GPIO_Init+0x148>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <MX_GPIO_Init+0x148>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f4:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <MX_GPIO_Init+0x148>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a45      	ldr	r2, [pc, #276]	@ (8001910 <MX_GPIO_Init+0x148>)
 80017fa:	f043 0320 	orr.w	r3, r3, #32
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <MX_GPIO_Init+0x148>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <MX_GPIO_Init+0x148>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a3f      	ldr	r2, [pc, #252]	@ (8001910 <MX_GPIO_Init+0x148>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <MX_GPIO_Init+0x148>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <MX_GPIO_Init+0x148>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a39      	ldr	r2, [pc, #228]	@ (8001910 <MX_GPIO_Init+0x148>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <MX_GPIO_Init+0x148>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001842:	4834      	ldr	r0, [pc, #208]	@ (8001914 <MX_GPIO_Init+0x14c>)
 8001844:	f000 ffc3 	bl	80027ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Pump_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800184e:	4832      	ldr	r0, [pc, #200]	@ (8001918 <MX_GPIO_Init+0x150>)
 8001850:	f000 ffbd 	bl	80027ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2108      	movs	r1, #8
 8001858:	4830      	ldr	r0, [pc, #192]	@ (800191c <MX_GPIO_Init+0x154>)
 800185a:	f000 ffb8 	bl	80027ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 710c 	mov.w	r1, #560	@ 0x230
 8001864:	482d      	ldr	r0, [pc, #180]	@ (800191c <MX_GPIO_Init+0x154>)
 8001866:	f000 ffb2 	bl	80027ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2302      	movs	r3, #2
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	4824      	ldr	r0, [pc, #144]	@ (8001914 <MX_GPIO_Init+0x14c>)
 8001884:	f000 fe08 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pump_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = Pump_Pin|DHT11_Pin;
 8001888:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	481d      	ldr	r0, [pc, #116]	@ (8001918 <MX_GPIO_Init+0x150>)
 80018a2:	f000 fdf9 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
 80018a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <MX_GPIO_Init+0x158>)
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4817      	ldr	r0, [pc, #92]	@ (8001918 <MX_GPIO_Init+0x150>)
 80018bc:	f000 fdec 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80018c0:	f44f 730e 	mov.w	r3, #568	@ 0x238
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	4810      	ldr	r0, [pc, #64]	@ (800191c <MX_GPIO_Init+0x154>)
 80018da:	f000 fddd 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C3_Pin|C4_Pin;
 80018de:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80018e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	480a      	ldr	r0, [pc, #40]	@ (800191c <MX_GPIO_Init+0x154>)
 80018f4:	f000 fdd0 	bl	8002498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2105      	movs	r1, #5
 80018fc:	2028      	movs	r0, #40	@ 0x28
 80018fe:	f000 fd92 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001902:	2028      	movs	r0, #40	@ 0x28
 8001904:	f000 fdab 	bl	800245e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	40011000 	.word	0x40011000
 8001918:	40010800 	.word	0x40010800
 800191c:	40010c00 	.word	0x40010c00
 8001920:	10110000 	.word	0x10110000

08001924 <readbutton1>:

/* USER CODE BEGIN 4 */
uint8_t readbutton1()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6);
 8001928:	2140      	movs	r1, #64	@ 0x40
 800192a:	4803      	ldr	r0, [pc, #12]	@ (8001938 <readbutton1+0x14>)
 800192c:	f000 ff38 	bl	80027a0 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40010c00 	.word	0x40010c00

0800193c <readbutton2>:
uint8_t readbutton2()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7);
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	4803      	ldr	r0, [pc, #12]	@ (8001950 <readbutton2+0x14>)
 8001944:	f000 ff2c 	bl	80027a0 <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40010c00 	.word	0x40010c00

08001954 <readbutton3>:
uint8_t readbutton3()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8);
 8001958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <readbutton3+0x14>)
 800195e:	f000 ff1f 	bl	80027a0 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010c00 	.word	0x40010c00

0800196c <sendCloudHandler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendCloudHandler */
void sendCloudHandler(void *argument)
{
 800196c:	b5b0      	push	{r4, r5, r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af02      	add	r7, sp, #8
 8001972:	6078      	str	r0, [r7, #4]
	char Temp[10];
  /* Infinite loop */
  for(;;)
  {
//	  sendTerminal("Task sendCloud acquire semaphore\n",strlen("Task sendCloud acquire semaphore\n"));
	  osSemaphoreAcquire(TempHumidHandle, osWaitForever);
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <sendCloudHandler+0x78>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fa17 	bl	8004db0 <osSemaphoreAcquire>
//	  sendTerminal("Task sendCloud take semaphore\n",strlen("Task sendCloud take semaphore\n"));
	  sprintf(Temp, "%.2f,%.2f\n",temp,humid);
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <sendCloudHandler+0x7c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd4e 	bl	8000428 <__aeabi_f2d>
 800198c:	4604      	mov	r4, r0
 800198e:	460d      	mov	r5, r1
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <sendCloudHandler+0x80>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd47 	bl	8000428 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	f107 000c 	add.w	r0, r7, #12
 80019a2:	e9cd 2300 	strd	r2, r3, [sp]
 80019a6:	4622      	mov	r2, r4
 80019a8:	462b      	mov	r3, r5
 80019aa:	4911      	ldr	r1, [pc, #68]	@ (80019f0 <sendCloudHandler+0x84>)
 80019ac:	f007 fc8c 	bl	80092c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Temp, strlen(Temp), 1000);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fbcb 	bl	8000150 <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f107 010c 	add.w	r1, r7, #12
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <sendCloudHandler+0x88>)
 80019c8:	f002 fca6 	bl	8004318 <HAL_UART_Transmit>
//	  sendTerminal("Task sendCloud complete\n",strlen("Task sendCloud complete\n"));
	  osSemaphoreRelease(TempHumidHandle);
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <sendCloudHandler+0x78>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fa53 	bl	8004e7c <osSemaphoreRelease>
//	  sendTerminal("Task sendCloud release semaphore\n",strlen("Task sendCloud release semaphore\n"));
	  osDelay(T1);
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <sendCloudHandler+0x8c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 ffbc 	bl	8004958 <osDelay>
  {
 80019e0:	bf00      	nop
 80019e2:	e7c7      	b.n	8001974 <sendCloudHandler+0x8>
 80019e4:	200002f0 	.word	0x200002f0
 80019e8:	20000324 	.word	0x20000324
 80019ec:	20000328 	.word	0x20000328
 80019f0:	0800b678 	.word	0x0800b678
 80019f4:	20000294 	.word	0x20000294
 80019f8:	20000000 	.word	0x20000000

080019fc <ReadDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadDataTask */
void ReadDataTask(void *argument)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	DHT11_Status dhtStatus;
  /* Infinite loop */
  for(;;)
  {
//	  sendTerminal("Task readData acquire semaphore\n",strlen("Task readData acquire semaphore\n"));
	  osSemaphoreAcquire(TempHumidHandle, osWaitForever);
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <ReadDataTask+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 f9cf 	bl	8004db0 <osSemaphoreAcquire>
//	  sendTerminal("Task readData take semaphore\n",strlen("Task readData take semaphore\n"));
	  dhtStatus = DHT11_GetData(&dht);
 8001a12:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <ReadDataTask+0x68>)
 8001a14:	f7ff fc9c 	bl	8001350 <DHT11_GetData>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	  temp = dht.Temp;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <ReadDataTask+0x68>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <ReadDataTask+0x6c>)
 8001a22:	6013      	str	r3, [r2, #0]
	  humid = dht.Humi;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <ReadDataTask+0x68>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <ReadDataTask+0x70>)
 8001a2a:	6013      	str	r3, [r2, #0]
	  if(humid < HUMIDITY_MIN){
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <ReadDataTask+0x70>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	490f      	ldr	r1, [pc, #60]	@ (8001a70 <ReadDataTask+0x74>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9d4 	bl	8000de0 <__aeabi_fcmplt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <ReadDataTask+0x4e>
		  osEventFlagsSet(pumpEventHandle, 1);
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <ReadDataTask+0x78>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 f807 	bl	8004a58 <osEventFlagsSet>
	  }
//	  sendTerminal("Task readData complete\n",strlen("Task readData complete\n"));
	  osSemaphoreRelease(TempHumidHandle);
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <ReadDataTask+0x64>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fa14 	bl	8004e7c <osSemaphoreRelease>
//	  sendTerminal("Task readData release semaphore\n",strlen("Task readData release semaphore\n"));
	  osDelay(T1);
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <ReadDataTask+0x7c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 ff7d 	bl	8004958 <osDelay>
	  osSemaphoreAcquire(TempHumidHandle, osWaitForever);
 8001a5e:	e7d1      	b.n	8001a04 <ReadDataTask+0x8>
 8001a60:	200002f0 	.word	0x200002f0
 8001a64:	20000310 	.word	0x20000310
 8001a68:	20000324 	.word	0x20000324
 8001a6c:	20000328 	.word	0x20000328
 8001a70:	41700000 	.word	0x41700000
 8001a74:	20000300 	.word	0x20000300
 8001a78:	20000000 	.word	0x20000000

08001a7c <DisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayTask */
void DisplayTask(void *argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	char temperature[16], humidity[16];
  /* Infinite loop */
  for(;;)
  {
//	  sendTerminal("Task display acquire semaphore\n",strlen("Task display acquire semaphore\n"));
	  osSemaphoreAcquire(TempHumidHandle, osWaitForever);
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <DisplayTask+0x90>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 f98f 	bl	8004db0 <osSemaphoreAcquire>
//	  sendTerminal("Task display take semaphore\n",strlen("Task display take semaphore\n"));
	  sprintf(temperature, "Temp: %.2f",temp);
 8001a92:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <DisplayTask+0x94>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcc6 	bl	8000428 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	f107 0018 	add.w	r0, r7, #24
 8001aa4:	491b      	ldr	r1, [pc, #108]	@ (8001b14 <DisplayTask+0x98>)
 8001aa6:	f007 fc0f 	bl	80092c8 <siprintf>
	  sprintf(humidity, "Humid: %.2f", humid);
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <DisplayTask+0x9c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fcba 	bl	8000428 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	f107 0008 	add.w	r0, r7, #8
 8001abc:	4917      	ldr	r1, [pc, #92]	@ (8001b1c <DisplayTask+0xa0>)
 8001abe:	f007 fc03 	bl	80092c8 <siprintf>
	  CLCD_I2C_Clear(&LCD1);
 8001ac2:	4817      	ldr	r0, [pc, #92]	@ (8001b20 <DisplayTask+0xa4>)
 8001ac4:	f7ff faf2 	bl	80010ac <CLCD_I2C_Clear>
	  CLCD_I2C_SetCursor(&LCD1,0,0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <DisplayTask+0xa4>)
 8001ace:	f7ff fa83 	bl	8000fd8 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&LCD1,temperature);
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <DisplayTask+0xa4>)
 8001ada:	f7ff fad0 	bl	800107e <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(&LCD1,0,1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	480f      	ldr	r0, [pc, #60]	@ (8001b20 <DisplayTask+0xa4>)
 8001ae4:	f7ff fa78 	bl	8000fd8 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(&LCD1,humidity);
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4619      	mov	r1, r3
 8001aee:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <DisplayTask+0xa4>)
 8001af0:	f7ff fac5 	bl	800107e <CLCD_I2C_WriteString>
//	  sendTerminal("Task display complete\n",strlen("Task display complete\n"));
	  osSemaphoreRelease(TempHumidHandle);
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <DisplayTask+0x90>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 f9bf 	bl	8004e7c <osSemaphoreRelease>
//	  sendTerminal("Task display release semaphore\n",strlen("Task display release semaphore\n"));
	  osDelay(T1);
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <DisplayTask+0xa8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 ff28 	bl	8004958 <osDelay>
	  osSemaphoreAcquire(TempHumidHandle, osWaitForever);
 8001b08:	bf00      	nop
 8001b0a:	e7bb      	b.n	8001a84 <DisplayTask+0x8>
 8001b0c:	200002f0 	.word	0x200002f0
 8001b10:	20000324 	.word	0x20000324
 8001b14:	0800b684 	.word	0x0800b684
 8001b18:	20000328 	.word	0x20000328
 8001b1c:	0800b690 	.word	0x0800b690
 8001b20:	20000304 	.word	0x20000304
 8001b24:	20000000 	.word	0x20000000

08001b28 <HandleISP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandleISP */
void HandleISP(void *argument)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandleISP */

  /* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(InterruptHandle,1,osFlagsWaitAll,osWaitForever);
 8001b30:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <HandleISP+0x110>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	f003 f826 	bl	8004b8c <osEventFlagsWait>
//		sendTerminal("Start Interrupt\n",strlen("Start Interrupt\n"));
		osThreadSuspend(ReadDataTaskHanHandle);
 8001b40:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <HandleISP+0x114>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 fe9f 	bl	8004888 <osThreadSuspend>
		CLCD_I2C_Clear(&LCD1);
 8001b4a:	483d      	ldr	r0, [pc, #244]	@ (8001c40 <HandleISP+0x118>)
 8001b4c:	f7ff faae 	bl	80010ac <CLCD_I2C_Clear>
		CLCD_I2C_SetCursor(&LCD1,0,0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	483a      	ldr	r0, [pc, #232]	@ (8001c40 <HandleISP+0x118>)
 8001b56:	f7ff fa3f 	bl	8000fd8 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Select Mode");
 8001b5a:	493a      	ldr	r1, [pc, #232]	@ (8001c44 <HandleISP+0x11c>)
 8001b5c:	4838      	ldr	r0, [pc, #224]	@ (8001c40 <HandleISP+0x118>)
 8001b5e:	f7ff fa8e 	bl	800107e <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(&LCD1,0,1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2100      	movs	r1, #0
 8001b66:	4836      	ldr	r0, [pc, #216]	@ (8001c40 <HandleISP+0x118>)
 8001b68:	f7ff fa36 	bl	8000fd8 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Sampling cycle");
 8001b6c:	4936      	ldr	r1, [pc, #216]	@ (8001c48 <HandleISP+0x120>)
 8001b6e:	4834      	ldr	r0, [pc, #208]	@ (8001c40 <HandleISP+0x118>)
 8001b70:	f7ff fa85 	bl	800107e <CLCD_I2C_WriteString>
		uint32_t tickstart = osKernelGetTickCount();
 8001b74:	f002 fdb6 	bl	80046e4 <osKernelGetTickCount>
 8001b78:	60b8      	str	r0, [r7, #8]
		uint8_t haveValue = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]

		while(((osKernelGetTickCount() - tickstart) < timeInterrupt)&&haveValue==0)
 8001b7e:	e046      	b.n	8001c0e <HandleISP+0xe6>
		{
	        if(readbutton1())
 8001b80:	f7ff fed0 	bl	8001924 <readbutton1>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d012      	beq.n	8001bb0 <HandleISP+0x88>
	        {
	          T1 = PERIOD_1;
 8001b8a:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <HandleISP+0x124>)
 8001b8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b90:	601a      	str	r2, [r3, #0]
//	          sendTerminal("Change the period of read data to 5s\n",strlen("Change the period of read data to 5s\n"));
	          CLCD_I2C_Clear(&LCD1);
 8001b92:	482b      	ldr	r0, [pc, #172]	@ (8001c40 <HandleISP+0x118>)
 8001b94:	f7ff fa8a 	bl	80010ac <CLCD_I2C_Clear>
	          CLCD_I2C_SetCursor(&LCD1,0,0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4828      	ldr	r0, [pc, #160]	@ (8001c40 <HandleISP+0x118>)
 8001b9e:	f7ff fa1b 	bl	8000fd8 <CLCD_I2C_SetCursor>
	          CLCD_I2C_WriteString(&LCD1,"Cycle  1s");
 8001ba2:	492b      	ldr	r1, [pc, #172]	@ (8001c50 <HandleISP+0x128>)
 8001ba4:	4826      	ldr	r0, [pc, #152]	@ (8001c40 <HandleISP+0x118>)
 8001ba6:	f7ff fa6a 	bl	800107e <CLCD_I2C_WriteString>
	          haveValue = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e02e      	b.n	8001c0e <HandleISP+0xe6>
	        }
	        else if(readbutton2())
 8001bb0:	f7ff fec4 	bl	800193c <readbutton2>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <HandleISP+0xb8>
	        {
	          T1 = PERIOD_2;
 8001bba:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HandleISP+0x124>)
 8001bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc0:	601a      	str	r2, [r3, #0]
//	          sendTerminal("Change the period of read data to 5s\n",strlen("Change the period of read data to 5s\n"));
	          CLCD_I2C_Clear(&LCD1);
 8001bc2:	481f      	ldr	r0, [pc, #124]	@ (8001c40 <HandleISP+0x118>)
 8001bc4:	f7ff fa72 	bl	80010ac <CLCD_I2C_Clear>
	          CLCD_I2C_SetCursor(&LCD1,0,0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	481c      	ldr	r0, [pc, #112]	@ (8001c40 <HandleISP+0x118>)
 8001bce:	f7ff fa03 	bl	8000fd8 <CLCD_I2C_SetCursor>
	          CLCD_I2C_WriteString(&LCD1,"Cycle  5s");
 8001bd2:	4920      	ldr	r1, [pc, #128]	@ (8001c54 <HandleISP+0x12c>)
 8001bd4:	481a      	ldr	r0, [pc, #104]	@ (8001c40 <HandleISP+0x118>)
 8001bd6:	f7ff fa52 	bl	800107e <CLCD_I2C_WriteString>
	          haveValue = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e016      	b.n	8001c0e <HandleISP+0xe6>
	        }
	        else if(readbutton3())
 8001be0:	f7ff feb8 	bl	8001954 <readbutton3>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d011      	beq.n	8001c0e <HandleISP+0xe6>
	        {
	          T1 = PERIOD_3;
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HandleISP+0x124>)
 8001bec:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001bf0:	601a      	str	r2, [r3, #0]
//	          sendTerminal("Change the period of read data to 10s\n",strlen("Change the period of read data to 10s\n"));
	          CLCD_I2C_Clear(&LCD1);
 8001bf2:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <HandleISP+0x118>)
 8001bf4:	f7ff fa5a 	bl	80010ac <CLCD_I2C_Clear>
	          CLCD_I2C_SetCursor(&LCD1,0,0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <HandleISP+0x118>)
 8001bfe:	f7ff f9eb 	bl	8000fd8 <CLCD_I2C_SetCursor>
	          CLCD_I2C_WriteString(&LCD1,"Cycle 10s");
 8001c02:	4915      	ldr	r1, [pc, #84]	@ (8001c58 <HandleISP+0x130>)
 8001c04:	480e      	ldr	r0, [pc, #56]	@ (8001c40 <HandleISP+0x118>)
 8001c06:	f7ff fa3a 	bl	800107e <CLCD_I2C_WriteString>
	          haveValue = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
		while(((osKernelGetTickCount() - tickstart) < timeInterrupt)&&haveValue==0)
 8001c0e:	f002 fd69 	bl	80046e4 <osKernelGetTickCount>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d802      	bhi.n	8001c26 <HandleISP+0xfe>
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ac      	beq.n	8001b80 <HandleISP+0x58>
	        }
		}
		osThreadResume(ReadDataTaskHanHandle);
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <HandleISP+0x114>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fe60 	bl	80048f0 <osThreadResume>
	    osDelay(100);
 8001c30:	2064      	movs	r0, #100	@ 0x64
 8001c32:	f002 fe91 	bl	8004958 <osDelay>
	{
 8001c36:	e77b      	b.n	8001b30 <HandleISP+0x8>
 8001c38:	200002fc 	.word	0x200002fc
 8001c3c:	200002e0 	.word	0x200002e0
 8001c40:	20000304 	.word	0x20000304
 8001c44:	0800b69c 	.word	0x0800b69c
 8001c48:	0800b6a8 	.word	0x0800b6a8
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	0800b6b8 	.word	0x0800b6b8
 8001c54:	0800b6c4 	.word	0x0800b6c4
 8001c58:	0800b6d0 	.word	0x0800b6d0

08001c5c <pumpControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pumpControl */
void pumpControl(void *argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pumpControl */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(pumpEventHandle,1,osFlagsWaitAll,waterWaitingPeriod);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <pumpControl+0x48>)
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	f002 ff8c 	bl	8004b8c <osEventFlagsWait>
//	  sendTerminal("Start water\n",strlen("Start water\n"));
	  HAL_GPIO_WritePin(Pump_GPIO_Port, Pump_Pin, 1);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c7a:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <pumpControl+0x4c>)
 8001c7c:	f000 fda7 	bl	80027ce <HAL_GPIO_WritePin>
	  osDelay(5000);
 8001c80:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c84:	f002 fe68 	bl	8004958 <osDelay>
//	  sendTerminal("Stop water\n",strlen("Stop water\n"));
	  HAL_GPIO_WritePin(Pump_GPIO_Port, Pump_Pin, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c8e:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <pumpControl+0x4c>)
 8001c90:	f000 fd9d 	bl	80027ce <HAL_GPIO_WritePin>
	  osEventFlagsClear(pumpControlHandHandle, 1);
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <pumpControl+0x50>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 ff32 	bl	8004b04 <osEventFlagsClear>
	  osEventFlagsWait(pumpEventHandle,1,osFlagsWaitAll,waterWaitingPeriod);
 8001ca0:	bf00      	nop
 8001ca2:	e7df      	b.n	8001c64 <pumpControl+0x8>
 8001ca4:	20000300 	.word	0x20000300
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	200002ec 	.word	0x200002ec

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc2:	f000 fa9b 	bl	80021fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <Error_Handler+0x8>

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_MspInit+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_MspInit+0x68>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_MspInit+0x68>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_MspInit+0x68>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a11      	ldr	r2, [pc, #68]	@ (8001d48 <HAL_MspInit+0x68>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_MspInit+0x68>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	210f      	movs	r1, #15
 8001d1a:	f06f 0001 	mvn.w	r0, #1
 8001d1e:	f000 fb82 	bl	8002426 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_MspInit+0x6c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_MspInit+0x6c>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <HAL_I2C_MspInit+0x74>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d124      	bne.n	8001dba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <HAL_I2C_MspInit+0x7c>)
 8001d9e:	f000 fb7b 	bl	8002498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001da8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_I2C_MspInit+0x78>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40005800 	.word	0x40005800
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <HAL_TIM_Base_MspInit+0x34>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10b      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_TIM_Base_MspInit+0x38>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_TIM_Base_MspInit+0x38>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_TIM_Base_MspInit+0x38>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1b      	ldr	r2, [pc, #108]	@ (8001e94 <HAL_UART_MspInit+0x88>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d12f      	bne.n	8001e8c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e36:	61d3      	str	r3, [r2, #28]
 8001e38:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <HAL_UART_MspInit+0x90>)
 8001e70:	f000 fb12 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e74:	2308      	movs	r3, #8
 8001e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4619      	mov	r1, r3
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <HAL_UART_MspInit+0x90>)
 8001e88:	f000 fb06 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	@ 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb6:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_InitTick+0xe8>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a33      	ldr	r2, [pc, #204]	@ (8001f88 <HAL_InitTick+0xe8>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <HAL_InitTick+0xe8>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ece:	f107 0210 	add.w	r2, r7, #16
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fd37 	bl	800394c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ee8:	f001 fd08 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8001eec:	6378      	str	r0, [r7, #52]	@ 0x34
 8001eee:	e004      	b.n	8001efa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ef0:	f001 fd04 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efc:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <HAL_InitTick+0xec>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	3b01      	subs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f08:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f0a:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <HAL_InitTick+0xf4>)
 8001f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f14:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f16:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001f2e:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f30:	f001 fd5a 	bl	80039e8 <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11b      	bne.n	8001f7a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001f42:	4813      	ldr	r0, [pc, #76]	@ (8001f90 <HAL_InitTick+0xf0>)
 8001f44:	f001 fdea 	bl	8003b1c <HAL_TIM_Base_Start_IT>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d111      	bne.n	8001f7a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f56:	201d      	movs	r0, #29
 8001f58:	f000 fa81 	bl	800245e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	d808      	bhi.n	8001f74 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001f62:	2200      	movs	r2, #0
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	201d      	movs	r0, #29
 8001f68:	f000 fa5d 	bl	8002426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <HAL_InitTick+0xf8>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e002      	b.n	8001f7a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3738      	adds	r7, #56	@ 0x38
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	431bde83 	.word	0x431bde83
 8001f90:	2000032c 	.word	0x2000032c
 8001f94:	40000400 	.word	0x40000400
 8001f98:	20000008 	.word	0x20000008

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <TIM3_IRQHandler+0x10>)
 8001fd6:	f001 fdf3 	bl	8003bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000032c 	.word	0x2000032c

08001fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 8001fe8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001fec:	f000 fc08 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <_kill>:

int _kill(int pid, int sig)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800200c:	f007 fa68 	bl	80094e0 <__errno>
 8002010:	4603      	mov	r3, r0
 8002012:	2216      	movs	r2, #22
 8002014:	601a      	str	r2, [r3, #0]
  return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_exit>:

void _exit (int status)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800202a:	f04f 31ff 	mov.w	r1, #4294967295
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffe7 	bl	8002002 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <_exit+0x12>

08002038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e00a      	b.n	8002060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800204a:	f3af 8000 	nop.w
 800204e:	4601      	mov	r1, r0
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf0      	blt.n	800204a <_read+0x12>
  }

  return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e009      	b.n	8002098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf1      	blt.n	8002084 <_write+0x12>
  }
  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_close>:

int _close(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d0:	605a      	str	r2, [r3, #4]
  return 0;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <_isatty>:

int _isatty(int file)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
	...

0800210c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002114:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <_sbrk+0x5c>)
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <_sbrk+0x60>)
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <_sbrk+0x64>)
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <_sbrk+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800213c:	f007 f9d0 	bl	80094e0 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	220c      	movs	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e009      	b.n	8002160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <_sbrk+0x64>)
 800215c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20005000 	.word	0x20005000
 800216c:	00000400 	.word	0x00000400
 8002170:	20000374 	.word	0x20000374
 8002174:	20003248 	.word	0x20003248

08002178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002184:	f7ff fff8 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480b      	ldr	r0, [pc, #44]	@ (80021b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800218a:	490c      	ldr	r1, [pc, #48]	@ (80021bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800218c:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a09      	ldr	r2, [pc, #36]	@ (80021c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021a0:	4c09      	ldr	r4, [pc, #36]	@ (80021c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f007 f99d 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7ff f96b 	bl	800148c <main>
  bx lr
 80021b6:	4770      	bx	lr
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021c0:	0800bba0 	.word	0x0800bba0
  ldr r2, =_sbss
 80021c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021c8:	20003248 	.word	0x20003248

080021cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC1_2_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_Init+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <HAL_Init+0x28>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f915 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f7ff fe5a 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fd78 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_IncTick+0x1c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_IncTick+0x20>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a03      	ldr	r2, [pc, #12]	@ (800221c <HAL_IncTick+0x20>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	2000000c 	.word	0x2000000c
 800221c:	20000378 	.word	0x20000378

08002220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b02      	ldr	r3, [pc, #8]	@ (8002230 <HAL_GetTick+0x10>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000378 	.word	0x20000378

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fff0 	bl	8002220 <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffe0 	bl	8002220 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4906      	ldr	r1, [pc, #24]	@ (8002314 <__NVIC_EnableIRQ+0x34>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0e      	blt.n	8002348 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <__NVIC_GetPendingIRQ+0x3c>)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	3340      	adds	r3, #64	@ 0x40
 8002334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	e000      	b.n	800234a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8002348:	2300      	movs	r3, #0
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff2f 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff44 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ffb2 	bl	80023ac <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff81 	bl	8002358 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff37 	bl	80022e0 <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff45 	bl	8002318 <__NVIC_GetPendingIRQ>
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	@ 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e169      	b.n	8002780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8158 	bne.w	800277a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002738 <HAL_GPIO_Init+0x2a0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d05e      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024d4:	4a98      	ldr	r2, [pc, #608]	@ (8002738 <HAL_GPIO_Init+0x2a0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d875      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024da:	4a98      	ldr	r2, [pc, #608]	@ (800273c <HAL_GPIO_Init+0x2a4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d058      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024e0:	4a96      	ldr	r2, [pc, #600]	@ (800273c <HAL_GPIO_Init+0x2a4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d86f      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024e6:	4a96      	ldr	r2, [pc, #600]	@ (8002740 <HAL_GPIO_Init+0x2a8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d052      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024ec:	4a94      	ldr	r2, [pc, #592]	@ (8002740 <HAL_GPIO_Init+0x2a8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d869      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024f2:	4a94      	ldr	r2, [pc, #592]	@ (8002744 <HAL_GPIO_Init+0x2ac>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d04c      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024f8:	4a92      	ldr	r2, [pc, #584]	@ (8002744 <HAL_GPIO_Init+0x2ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d863      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024fe:	4a92      	ldr	r2, [pc, #584]	@ (8002748 <HAL_GPIO_Init+0x2b0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d046      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 8002504:	4a90      	ldr	r2, [pc, #576]	@ (8002748 <HAL_GPIO_Init+0x2b0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d85d      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 800250a:	2b12      	cmp	r3, #18
 800250c:	d82a      	bhi.n	8002564 <HAL_GPIO_Init+0xcc>
 800250e:	2b12      	cmp	r3, #18
 8002510:	d859      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 8002512:	a201      	add	r2, pc, #4	@ (adr r2, 8002518 <HAL_GPIO_Init+0x80>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002593 	.word	0x08002593
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800257f 	.word	0x0800257f
 8002524:	080025c1 	.word	0x080025c1
 8002528:	080025c7 	.word	0x080025c7
 800252c:	080025c7 	.word	0x080025c7
 8002530:	080025c7 	.word	0x080025c7
 8002534:	080025c7 	.word	0x080025c7
 8002538:	080025c7 	.word	0x080025c7
 800253c:	080025c7 	.word	0x080025c7
 8002540:	080025c7 	.word	0x080025c7
 8002544:	080025c7 	.word	0x080025c7
 8002548:	080025c7 	.word	0x080025c7
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025c7 	.word	0x080025c7
 8002554:	080025c7 	.word	0x080025c7
 8002558:	080025c7 	.word	0x080025c7
 800255c:	08002575 	.word	0x08002575
 8002560:	08002589 	.word	0x08002589
 8002564:	4a79      	ldr	r2, [pc, #484]	@ (800274c <HAL_GPIO_Init+0x2b4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800256a:	e02c      	b.n	80025c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e029      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e024      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	3308      	adds	r3, #8
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e01f      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	330c      	adds	r3, #12
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e01a      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259a:	2304      	movs	r3, #4
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e013      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	611a      	str	r2, [r3, #16]
          break;
 80025b2:	e009      	b.n	80025c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	615a      	str	r2, [r3, #20]
          break;
 80025be:	e003      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          break;
 80025c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2bff      	cmp	r3, #255	@ 0xff
 80025cc:	d801      	bhi.n	80025d2 <HAL_GPIO_Init+0x13a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_Init+0x13e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2bff      	cmp	r3, #255	@ 0xff
 80025dc:	d802      	bhi.n	80025e4 <HAL_GPIO_Init+0x14c>
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x152>
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	3b08      	subs	r3, #8
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	210f      	movs	r1, #15
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80b1 	beq.w	800277a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002618:	4b4d      	ldr	r3, [pc, #308]	@ (8002750 <HAL_GPIO_Init+0x2b8>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a4c      	ldr	r2, [pc, #304]	@ (8002750 <HAL_GPIO_Init+0x2b8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <HAL_GPIO_Init+0x2b8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002630:	4a48      	ldr	r2, [pc, #288]	@ (8002754 <HAL_GPIO_Init+0x2bc>)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a40      	ldr	r2, [pc, #256]	@ (8002758 <HAL_GPIO_Init+0x2c0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d013      	beq.n	8002684 <HAL_GPIO_Init+0x1ec>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3f      	ldr	r2, [pc, #252]	@ (800275c <HAL_GPIO_Init+0x2c4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00d      	beq.n	8002680 <HAL_GPIO_Init+0x1e8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3e      	ldr	r2, [pc, #248]	@ (8002760 <HAL_GPIO_Init+0x2c8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <HAL_GPIO_Init+0x1e4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3d      	ldr	r2, [pc, #244]	@ (8002764 <HAL_GPIO_Init+0x2cc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_GPIO_Init+0x1e0>
 8002674:	2303      	movs	r3, #3
 8002676:	e006      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002678:	2304      	movs	r3, #4
 800267a:	e004      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 800267c:	2302      	movs	r3, #2
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002684:	2300      	movs	r3, #0
 8002686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002688:	f002 0203 	and.w	r2, r2, #3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4093      	lsls	r3, r2
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002696:	492f      	ldr	r1, [pc, #188]	@ (8002754 <HAL_GPIO_Init+0x2bc>)
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	492c      	ldr	r1, [pc, #176]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026be:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4928      	ldr	r1, [pc, #160]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	4922      	ldr	r1, [pc, #136]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60cb      	str	r3, [r1, #12]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	491e      	ldr	r1, [pc, #120]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4918      	ldr	r1, [pc, #96]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	4914      	ldr	r1, [pc, #80]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002718:	4013      	ands	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	490e      	ldr	r1, [pc, #56]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e021      	b.n	800277a <HAL_GPIO_Init+0x2e2>
 8002736:	bf00      	nop
 8002738:	10320000 	.word	0x10320000
 800273c:	10310000 	.word	0x10310000
 8002740:	10220000 	.word	0x10220000
 8002744:	10210000 	.word	0x10210000
 8002748:	10120000 	.word	0x10120000
 800274c:	10110000 	.word	0x10110000
 8002750:	40021000 	.word	0x40021000
 8002754:	40010000 	.word	0x40010000
 8002758:	40010800 	.word	0x40010800
 800275c:	40010c00 	.word	0x40010c00
 8002760:	40011000 	.word	0x40011000
 8002764:	40011400 	.word	0x40011400
 8002768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_GPIO_Init+0x304>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	43db      	mvns	r3, r3
 8002774:	4909      	ldr	r1, [pc, #36]	@ (800279c <HAL_GPIO_Init+0x304>)
 8002776:	4013      	ands	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	3301      	adds	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f ae8e 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	372c      	adds	r7, #44	@ 0x2c
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e001      	b.n	80027c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]
 80027da:	4613      	mov	r3, r2
 80027dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027de:	787b      	ldrb	r3, [r7, #1]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ea:	e003      	b.n	80027f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	041a      	lsls	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	611a      	str	r2, [r3, #16]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002816:	4a05      	ldr	r2, [pc, #20]	@ (800282c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fe0c 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e12b      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fa7a 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	@ 0x24
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002894:	f001 f832 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8002898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a81      	ldr	r2, [pc, #516]	@ (8002aa4 <HAL_I2C_Init+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d807      	bhi.n	80028b4 <HAL_I2C_Init+0x84>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a80      	ldr	r2, [pc, #512]	@ (8002aa8 <HAL_I2C_Init+0x278>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e006      	b.n	80028c2 <HAL_I2C_Init+0x92>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a7d      	ldr	r2, [pc, #500]	@ (8002aac <HAL_I2C_Init+0x27c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0e7      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a78      	ldr	r2, [pc, #480]	@ (8002ab0 <HAL_I2C_Init+0x280>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa4 <HAL_I2C_Init+0x274>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d802      	bhi.n	8002904 <HAL_I2C_Init+0xd4>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	e009      	b.n	8002918 <HAL_I2C_Init+0xe8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	4a69      	ldr	r2, [pc, #420]	@ (8002ab4 <HAL_I2C_Init+0x284>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	3301      	adds	r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800292a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	495c      	ldr	r1, [pc, #368]	@ (8002aa4 <HAL_I2C_Init+0x274>)
 8002934:	428b      	cmp	r3, r1
 8002936:	d819      	bhi.n	800296c <HAL_I2C_Init+0x13c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e59      	subs	r1, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_I2C_Init+0x138>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e59      	subs	r1, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	e051      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 8002968:	2304      	movs	r3, #4
 800296a:	e04f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <HAL_I2C_Init+0x168>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e012      	b.n	80029be <HAL_I2C_Init+0x18e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x196>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_I2C_Init+0x1bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e58      	subs	r0, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	440b      	add	r3, r1
 80029dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ea:	e00f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e58      	subs	r0, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	0099      	lsls	r1, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6809      	ldr	r1, [r1, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6911      	ldr	r1, [r2, #16]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	000186a0 	.word	0x000186a0
 8002aa8:	001e847f 	.word	0x001e847f
 8002aac:	003d08ff 	.word	0x003d08ff
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	817b      	strh	r3, [r7, #10]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff fba8 	bl	8002220 <HAL_GetTick>
 8002ad0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 80e0 	bne.w	8002ca0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4970      	ldr	r1, [pc, #448]	@ (8002cac <HAL_I2C_Master_Transmit+0x1f4>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f964 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0d3      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_I2C_Master_Transmit+0x50>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0cc      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2221      	movs	r2, #33	@ 0x21
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	893a      	ldrh	r2, [r7, #8]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	@ (8002cb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f89c 	bl	8002cb4 <I2C_MasterRequestWrite>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e08d      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b9c:	e066      	b.n	8002c6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa22 	bl	8002fec <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x188>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	6a39      	ldr	r1, [r7, #32]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fa19 	bl	800307c <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e01a      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d194      	bne.n	8002b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d006      	beq.n	8002cde <I2C_MasterRequestWrite+0x2a>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d003      	beq.n	8002cde <I2C_MasterRequestWrite+0x2a>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e00b      	b.n	8002d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	2b12      	cmp	r3, #18
 8002cf6:	d107      	bne.n	8002d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f84f 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2e:	d103      	bne.n	8002d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e035      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d44:	d108      	bne.n	8002d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	e01b      	b.n	8002d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	11db      	asrs	r3, r3, #7
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0306 	and.w	r3, r3, #6
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f063 030f 	orn	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	490e      	ldr	r1, [pc, #56]	@ (8002db0 <I2C_MasterRequestWrite+0xfc>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f898 	bl	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e010      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4907      	ldr	r1, [pc, #28]	@ (8002db4 <I2C_MasterRequestWrite+0x100>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f888 	bl	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	00010008 	.word	0x00010008
 8002db4:	00010002 	.word	0x00010002

08002db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc8:	e048      	b.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d044      	beq.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7ff fa25 	bl	8002220 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d139      	bne.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	e00c      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d116      	bne.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e023      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10d      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	e00c      	b.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d093      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eba:	e071      	b.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eca:	d123      	bne.n	8002f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e067      	b.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d041      	beq.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7ff f980 	bl	8002220 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d136      	bne.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10c      	bne.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e00b      	b.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e021      	b.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d10c      	bne.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e00b      	b.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bf14      	ite	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	2300      	moveq	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f47f af6d 	bne.w	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff8:	e034      	b.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f886 	bl	800310c <I2C_IsAcknowledgeFailed>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e034      	b.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d028      	beq.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7ff f905 	bl	8002220 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d11d      	bne.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003032:	2b80      	cmp	r3, #128	@ 0x80
 8003034:	d016      	beq.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b80      	cmp	r3, #128	@ 0x80
 8003070:	d1c3      	bne.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003088:	e034      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f83e 	bl	800310c <I2C_IsAcknowledgeFailed>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e034      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d028      	beq.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7ff f8bd 	bl	8002220 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d016      	beq.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d1c3      	bne.n	800308a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003122:	d11b      	bne.n	800315c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800312c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0204 	orr.w	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e272      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8087 	beq.w	8003296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003188:	4b92      	ldr	r3, [pc, #584]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b04      	cmp	r3, #4
 8003192:	d00c      	beq.n	80031ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003194:	4b8f      	ldr	r3, [pc, #572]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d112      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5e>
 80031a0:	4b8c      	ldr	r3, [pc, #560]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ac:	d10b      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ae:	4b89      	ldr	r3, [pc, #548]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d06c      	beq.n	8003294 <HAL_RCC_OscConfig+0x12c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d168      	bne.n	8003294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e24c      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x76>
 80031d0:	4b80      	ldr	r3, [pc, #512]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7f      	ldr	r2, [pc, #508]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	e02e      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x98>
 80031e6:	4b7b      	ldr	r3, [pc, #492]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7a      	ldr	r2, [pc, #488]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b78      	ldr	r3, [pc, #480]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a77      	ldr	r2, [pc, #476]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0xbc>
 800320a:	4b72      	ldr	r3, [pc, #456]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a71      	ldr	r2, [pc, #452]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6f      	ldr	r3, [pc, #444]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6e      	ldr	r2, [pc, #440]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 8003224:	4b6b      	ldr	r3, [pc, #428]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6a      	ldr	r2, [pc, #424]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b68      	ldr	r3, [pc, #416]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a67      	ldr	r2, [pc, #412]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800323a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe ffec 	bl	8002220 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe ffe8 	bl	8002220 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e200      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5d      	ldr	r3, [pc, #372]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xe4>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe ffd8 	bl	8002220 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe ffd4 	bl	8002220 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ec      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b53      	ldr	r3, [pc, #332]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x10c>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a2:	4b4c      	ldr	r3, [pc, #304]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ae:	4b49      	ldr	r3, [pc, #292]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x18c>
 80032ba:	4b46      	ldr	r3, [pc, #280]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b43      	ldr	r3, [pc, #268]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1c0      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3d      	ldr	r3, [pc, #244]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4939      	ldr	r1, [pc, #228]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b36      	ldr	r3, [pc, #216]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe ff8d 	bl	8002220 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe ff89 	bl	8002220 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1a1      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b2a      	ldr	r3, [pc, #168]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4927      	ldr	r1, [pc, #156]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b26      	ldr	r3, [pc, #152]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe ff6c 	bl	8002220 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe ff68 	bl	8002220 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e180      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03a      	beq.n	80033ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d019      	beq.n	80033b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <HAL_RCC_OscConfig+0x274>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fe ff4c 	bl	8002220 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe ff48 	bl	8002220 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e160      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f000 fafe 	bl	80039ac <RCC_Delay>
 80033b0:	e01c      	b.n	80033ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <HAL_RCC_OscConfig+0x274>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe ff32 	bl	8002220 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe ff2e 	bl	8002220 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d908      	bls.n	80033e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e146      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	42420000 	.word	0x42420000
 80033dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	4b92      	ldr	r3, [pc, #584]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e9      	bne.n	80033c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a6 	beq.w	8003546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b8b      	ldr	r3, [pc, #556]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b88      	ldr	r3, [pc, #544]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a87      	ldr	r2, [pc, #540]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]
 8003416:	4b85      	ldr	r3, [pc, #532]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b82      	ldr	r3, [pc, #520]	@ (8003630 <HAL_RCC_OscConfig+0x4c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003432:	4b7f      	ldr	r3, [pc, #508]	@ (8003630 <HAL_RCC_OscConfig+0x4c8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7e      	ldr	r2, [pc, #504]	@ (8003630 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7fe feef 	bl	8002220 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7fe feeb 	bl	8002220 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	@ 0x64
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e103      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	4b75      	ldr	r3, [pc, #468]	@ (8003630 <HAL_RCC_OscConfig+0x4c8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x312>
 800346c:	4b6f      	ldr	r3, [pc, #444]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4a6e      	ldr	r2, [pc, #440]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6213      	str	r3, [r2, #32]
 8003478:	e02d      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x334>
 8003482:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a69      	ldr	r2, [pc, #420]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b67      	ldr	r3, [pc, #412]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a66      	ldr	r2, [pc, #408]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
 800349a:	e01c      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x356>
 80034a4:	4b61      	ldr	r3, [pc, #388]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a60      	ldr	r2, [pc, #384]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	4b5e      	ldr	r3, [pc, #376]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a5d      	ldr	r2, [pc, #372]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 80034be:	4b5b      	ldr	r3, [pc, #364]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a5a      	ldr	r2, [pc, #360]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	4b58      	ldr	r3, [pc, #352]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a57      	ldr	r2, [pc, #348]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7fe fe9f 	bl	8002220 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fe9b 	bl	8002220 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0b1      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b4b      	ldr	r3, [pc, #300]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCC_OscConfig+0x37e>
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe fe89 	bl	8002220 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe fe85 	bl	8002220 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e09b      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	4b40      	ldr	r3, [pc, #256]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b3c      	ldr	r3, [pc, #240]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003550:	4b36      	ldr	r3, [pc, #216]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d061      	beq.n	8003620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d146      	bne.n	80035f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b33      	ldr	r3, [pc, #204]	@ (8003634 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fe59 	bl	8002220 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fe55 	bl	8002220 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e06d      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003598:	d108      	bne.n	80035ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4921      	ldr	r1, [pc, #132]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ac:	4b1f      	ldr	r3, [pc, #124]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a19      	ldr	r1, [r3, #32]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	430b      	orrs	r3, r1
 80035be:	491b      	ldr	r1, [pc, #108]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x4cc>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fe29 	bl	8002220 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe fe25 	bl	8002220 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e03d      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x46a>
 80035f0:	e035      	b.n	800365e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <HAL_RCC_OscConfig+0x4cc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe fe12 	bl	8002220 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe fe0e 	bl	8002220 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e026      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	@ (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x498>
 800361e:	e01e      	b.n	800365e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e019      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <HAL_RCC_OscConfig+0x500>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	429a      	cmp	r2, r3
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0d0      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b6a      	ldr	r3, [pc, #424]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d910      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b67      	ldr	r3, [pc, #412]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4965      	ldr	r1, [pc, #404]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b63      	ldr	r3, [pc, #396]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0b8      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c8:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a58      	ldr	r2, [pc, #352]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a52      	ldr	r2, [pc, #328]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b50      	ldr	r3, [pc, #320]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	494d      	ldr	r1, [pc, #308]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d040      	beq.n	800378c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d115      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e073      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373a:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06b      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374a:	4b39      	ldr	r3, [pc, #228]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4936      	ldr	r1, [pc, #216]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fe fd60 	bl	8002220 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	e00a      	b.n	800377a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003764:	f7fe fd5c 	bl	8002220 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e053      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 020c 	and.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	429a      	cmp	r2, r3
 800378a:	d1eb      	bne.n	8003764 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800378c:	4b27      	ldr	r3, [pc, #156]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d210      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b24      	ldr	r3, [pc, #144]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0207 	bic.w	r2, r3, #7
 80037a2:	4922      	ldr	r1, [pc, #136]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e032      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4916      	ldr	r1, [pc, #88]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037e6:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	490e      	ldr	r1, [pc, #56]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fa:	f000 f821 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037fe:	4602      	mov	r2, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	490a      	ldr	r1, [pc, #40]	@ (8003834 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	5ccb      	ldrb	r3, [r1, r3]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1cc>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003816:	4b09      	ldr	r3, [pc, #36]	@ (800383c <HAL_RCC_ClockConfig+0x1d0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fb40 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	0800b7f8 	.word	0x0800b7f8
 8003838:	20000004 	.word	0x20000004
 800383c:	20000008 	.word	0x20000008

08003840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800385a:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d002      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x30>
 800386a:	2b08      	cmp	r3, #8
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x36>
 800386e:	e027      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003870:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003872:	613b      	str	r3, [r7, #16]
      break;
 8003874:	e027      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0c9b      	lsrs	r3, r3, #18
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	4a17      	ldr	r2, [pc, #92]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	0c5b      	lsrs	r3, r3, #17
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038a2:	fb03 f202 	mul.w	r2, r3, r2
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e004      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	613b      	str	r3, [r7, #16]
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038c2:	613b      	str	r3, [r7, #16]
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	693b      	ldr	r3, [r7, #16]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	007a1200 	.word	0x007a1200
 80038dc:	0800b810 	.word	0x0800b810
 80038e0:	0800b820 	.word	0x0800b820
 80038e4:	003d0900 	.word	0x003d0900

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b02      	ldr	r3, [pc, #8]	@ (80038f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff2 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	@ (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	0800b808 	.word	0x0800b808

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003928:	f7ff ffde 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0adb      	lsrs	r3, r3, #11
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	@ (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	0800b808 	.word	0x0800b808

0800394c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	220f      	movs	r2, #15
 800395a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800395c:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <HAL_RCC_GetClockConfig+0x58>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003968:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <HAL_RCC_GetClockConfig+0x58>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_GetClockConfig+0x58>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003980:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_RCC_GetClockConfig+0x58>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40022000 	.word	0x40022000

080039ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <RCC_Delay+0x34>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <RCC_Delay+0x38>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0a5b      	lsrs	r3, r3, #9
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c8:	bf00      	nop
  }
  while (Delay --);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	60fa      	str	r2, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f9      	bne.n	80039c8 <RCC_Delay+0x1c>
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	20000004 	.word	0x20000004
 80039e4:	10624dd3 	.word	0x10624dd3

080039e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e041      	b.n	8003a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe f9de 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fabe 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d001      	beq.n	8003aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <HAL_TIM_Base_Start+0x88>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_TIM_Base_Start+0x48>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aba:	d009      	beq.n	8003ad0 <HAL_TIM_Base_Start+0x48>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <HAL_TIM_Base_Start+0x8c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIM_Base_Start+0x48>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a13      	ldr	r2, [pc, #76]	@ (8003b18 <HAL_TIM_Base_Start+0x90>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d111      	bne.n	8003af4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d010      	beq.n	8003b04 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	e007      	b.n	8003b04 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800

08003b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d001      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e03a      	b.n	8003baa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x58>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d009      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x58>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x58>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <HAL_TIM_Base_Start_IT+0xa0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d111      	bne.n	8003b98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d010      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b96:	e007      	b.n	8003ba8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800

08003bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0202 	mvn.w	r2, #2
 8003bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9b4 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9a7 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9b6 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0204 	mvn.w	r2, #4
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f98a 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f97d 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f98c 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0208 	mvn.w	r2, #8
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f960 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f953 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f962 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0210 	mvn.w	r2, #16
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2208      	movs	r2, #8
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f936 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f929 	bl	8003f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f938 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10e      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0201 	mvn.w	r2, #1
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd ffb6 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4e:	2b80      	cmp	r3, #128	@ 0x80
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b80      	cmp	r3, #128	@ 0x80
 8003d5e:	d107      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa7b 	bl	8004266 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7a:	2b40      	cmp	r3, #64	@ 0x40
 8003d7c:	d10e      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d107      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f8fc 	bl	8003f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d10e      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0220 	mvn.w	r2, #32
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa46 	bl	8004254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIM_ConfigClockSource+0x1c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0b4      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x186>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e24:	d03e      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2a:	f200 8087 	bhi.w	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e32:	f000 8086 	beq.w	8003f42 <HAL_TIM_ConfigClockSource+0x172>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3a:	d87f      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b70      	cmp	r3, #112	@ 0x70
 8003e3e:	d01a      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0xa6>
 8003e40:	2b70      	cmp	r3, #112	@ 0x70
 8003e42:	d87b      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b60      	cmp	r3, #96	@ 0x60
 8003e46:	d050      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x11a>
 8003e48:	2b60      	cmp	r3, #96	@ 0x60
 8003e4a:	d877      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b50      	cmp	r3, #80	@ 0x50
 8003e4e:	d03c      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xfa>
 8003e50:	2b50      	cmp	r3, #80	@ 0x50
 8003e52:	d873      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d058      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x13a>
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	d86f      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b30      	cmp	r3, #48	@ 0x30
 8003e5e:	d064      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	2b30      	cmp	r3, #48	@ 0x30
 8003e62:	d86b      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d060      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d867      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d05c      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d05a      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	e062      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e86:	f000 f968 	bl	800415a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	609a      	str	r2, [r3, #8]
      break;
 8003ea2:	e04f      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb4:	f000 f951 	bl	800415a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ec6:	609a      	str	r2, [r3, #8]
      break;
 8003ec8:	e03c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 f8c8 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2150      	movs	r1, #80	@ 0x50
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f91f 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e02c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 f8e6 	bl	80040c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2160      	movs	r1, #96	@ 0x60
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f90f 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003f08:	e01c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 f8a8 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2140      	movs	r1, #64	@ 0x40
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f8ff 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003f28:	e00c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f000 f8f6 	bl	8004126 <TIM_ITRx_SetConfig>
      break;
 8003f3a:	e003      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	e000      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr
	...

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a29      	ldr	r2, [pc, #164]	@ (8004060 <TIM_Base_SetConfig+0xb8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_Base_SetConfig+0x30>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d007      	beq.n	8003fd8 <TIM_Base_SetConfig+0x30>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a26      	ldr	r2, [pc, #152]	@ (8004064 <TIM_Base_SetConfig+0xbc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0x30>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a25      	ldr	r2, [pc, #148]	@ (8004068 <TIM_Base_SetConfig+0xc0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d108      	bne.n	8003fea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <TIM_Base_SetConfig+0xb8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_Base_SetConfig+0x62>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff8:	d007      	beq.n	800400a <TIM_Base_SetConfig+0x62>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <TIM_Base_SetConfig+0xbc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_Base_SetConfig+0x62>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <TIM_Base_SetConfig+0xc0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a07      	ldr	r2, [pc, #28]	@ (8004060 <TIM_Base_SetConfig+0xb8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800

0800406c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 030a 	bic.w	r3, r3, #10
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0210 	bic.w	r2, r3, #16
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	031b      	lsls	r3, r3, #12
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	f043 0307 	orr.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004174:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	431a      	orrs	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4313      	orrs	r3, r2
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e046      	b.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fc:	d009      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a10      	ldr	r2, [pc, #64]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10c      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4313      	orrs	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800

08004254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e042      	b.n	8004310 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fd fdb4 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	@ 0x24
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f91d 	bl	80044fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	@ 0x28
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b20      	cmp	r3, #32
 8004336:	d16d      	bne.n	8004414 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Transmit+0x2c>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e066      	b.n	8004416 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	@ 0x21
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fd ff63 	bl	8002220 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x6c>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800438c:	e02a      	b.n	80043e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f840 	bl	800441e <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e036      	b.n	8004416 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3302      	adds	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e007      	b.n	80043d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1cf      	bne.n	800438e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2140      	movs	r1, #64	@ 0x40
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f810 	bl	800441e <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e006      	b.n	8004416 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b090      	sub	sp, #64	@ 0x40
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442e:	e050      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d04c      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0x30>
 800443e:	f7fd feef 	bl	8002220 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800444a:	429a      	cmp	r2, r3
 800444c:	d241      	bcs.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800446e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004470:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004474:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	613b      	str	r3, [r7, #16]
   return(result);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044a2:	623a      	str	r2, [r7, #32]
 80044a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e00f      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d09f      	beq.n	8004430 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3740      	adds	r7, #64	@ 0x40
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004536:	f023 030c 	bic.w	r3, r3, #12
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	430b      	orrs	r3, r1
 8004542:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2c      	ldr	r2, [pc, #176]	@ (8004610 <UART_SetConfig+0x114>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d103      	bne.n	800456c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff f9de 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	e002      	b.n	8004572 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7ff f9c6 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004570:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009a      	lsls	r2, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <UART_SetConfig+0x118>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	0119      	lsls	r1, r3, #4
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009a      	lsls	r2, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <UART_SetConfig+0x118>)
 80045aa:	fba3 0302 	umull	r0, r3, r3, r2
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2064      	movs	r0, #100	@ 0x64
 80045b2:	fb00 f303 	mul.w	r3, r0, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	3332      	adds	r3, #50	@ 0x32
 80045bc:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <UART_SetConfig+0x118>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045c8:	4419      	add	r1, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009a      	lsls	r2, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <UART_SetConfig+0x118>)
 80045e2:	fba3 0302 	umull	r0, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2064      	movs	r0, #100	@ 0x64
 80045ea:	fb00 f303 	mul.w	r3, r0, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	3332      	adds	r3, #50	@ 0x32
 80045f4:	4a07      	ldr	r2, [pc, #28]	@ (8004614 <UART_SetConfig+0x118>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	440a      	add	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40013800 	.word	0x40013800
 8004614:	51eb851f 	.word	0x51eb851f

08004618 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	60bb      	str	r3, [r7, #8]
  return(result);
 8004624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462a:	f3ef 8310 	mrs	r3, PRIMASK
 800462e:	607b      	str	r3, [r7, #4]
  return(result);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <osKernelInitialize+0x32>
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <osKernelInitialize+0x60>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d109      	bne.n	8004652 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800463e:	f3ef 8311 	mrs	r3, BASEPRI
 8004642:	603b      	str	r3, [r7, #0]
  return(result);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800464a:	f06f 0305 	mvn.w	r3, #5
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e00c      	b.n	800466c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <osKernelInitialize+0x60>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800465a:	4b07      	ldr	r3, [pc, #28]	@ (8004678 <osKernelInitialize+0x60>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e002      	b.n	800466c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	2000037c 	.word	0x2000037c

0800467c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004682:	f3ef 8305 	mrs	r3, IPSR
 8004686:	60bb      	str	r3, [r7, #8]
  return(result);
 8004688:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468e:	f3ef 8310 	mrs	r3, PRIMASK
 8004692:	607b      	str	r3, [r7, #4]
  return(result);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <osKernelStart+0x32>
 800469a:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <osKernelStart+0x64>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d109      	bne.n	80046b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046a2:	f3ef 8311 	mrs	r3, BASEPRI
 80046a6:	603b      	str	r3, [r7, #0]
  return(result);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046ae:	f06f 0305 	mvn.w	r3, #5
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e00e      	b.n	80046d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <osKernelStart+0x64>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d107      	bne.n	80046ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80046be:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <osKernelStart+0x64>)
 80046c0:	2202      	movs	r2, #2
 80046c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80046c4:	f002 faac 	bl	8006c20 <vTaskStartScheduler>
      stat = osOK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e002      	b.n	80046d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046d4:	68fb      	ldr	r3, [r7, #12]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000037c 	.word	0x2000037c

080046e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ea:	f3ef 8305 	mrs	r3, IPSR
 80046ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80046f0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	607b      	str	r3, [r7, #4]
  return(result);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <osKernelGetTickCount+0x32>
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <osKernelGetTickCount+0x4c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470a:	f3ef 8311 	mrs	r3, BASEPRI
 800470e:	603b      	str	r3, [r7, #0]
  return(result);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004716:	f002 fbad 	bl	8006e74 <xTaskGetTickCountFromISR>
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	e002      	b.n	8004724 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800471e:	f002 fb9b 	bl	8006e58 <xTaskGetTickCount>
 8004722:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004724:	68fb      	ldr	r3, [r7, #12]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2000037c 	.word	0x2000037c

08004734 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b092      	sub	sp, #72	@ 0x48
 8004738:	af04      	add	r7, sp, #16
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004744:	f3ef 8305 	mrs	r3, IPSR
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8094 	bne.w	800487a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004752:	f3ef 8310 	mrs	r3, PRIMASK
 8004756:	623b      	str	r3, [r7, #32]
  return(result);
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 808d 	bne.w	800487a <osThreadNew+0x146>
 8004760:	4b48      	ldr	r3, [pc, #288]	@ (8004884 <osThreadNew+0x150>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d106      	bne.n	8004776 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004768:	f3ef 8311 	mrs	r3, BASEPRI
 800476c:	61fb      	str	r3, [r7, #28]
  return(result);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 8082 	bne.w	800487a <osThreadNew+0x146>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d07e      	beq.n	800487a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004780:	2318      	movs	r3, #24
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004784:	2300      	movs	r3, #0
 8004786:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004788:	f107 031b 	add.w	r3, r7, #27
 800478c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d045      	beq.n	8004826 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <osThreadNew+0x74>
        name = attr->name;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <osThreadNew+0x9a>
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	2b38      	cmp	r3, #56	@ 0x38
 80047c0:	d805      	bhi.n	80047ce <osThreadNew+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <osThreadNew+0x9e>
        return (NULL);
 80047ce:	2300      	movs	r3, #0
 80047d0:	e054      	b.n	800487c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00e      	beq.n	8004808 <osThreadNew+0xd4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80047f0:	d90a      	bls.n	8004808 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <osThreadNew+0xd4>
        mem = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004806:	e010      	b.n	800482a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10c      	bne.n	800482a <osThreadNew+0xf6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <osThreadNew+0xf6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <osThreadNew+0xf6>
          mem = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004824:	e001      	b.n	800482a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	2b01      	cmp	r3, #1
 800482e:	d110      	bne.n	8004852 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004838:	9202      	str	r2, [sp, #8]
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004844:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 feee 	bl	8006628 <xTaskCreateStatic>
 800484c:	4603      	mov	r3, r0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e013      	b.n	800487a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d110      	bne.n	800487a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	b29a      	uxth	r2, r3
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f001 ff3b 	bl	80066e6 <xTaskCreate>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <osThreadNew+0x146>
          hTask = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800487a:	697b      	ldr	r3, [r7, #20]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3738      	adds	r7, #56	@ 0x38
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	2000037c 	.word	0x2000037c

08004888 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004894:	f3ef 8305 	mrs	r3, IPSR
 8004898:	617b      	str	r3, [r7, #20]
  return(result);
 800489a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10f      	bne.n	80048c0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a0:	f3ef 8310 	mrs	r3, PRIMASK
 80048a4:	613b      	str	r3, [r7, #16]
  return(result);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <osThreadSuspend+0x38>
 80048ac:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <osThreadSuspend+0x64>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d109      	bne.n	80048c8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048b4:	f3ef 8311 	mrs	r3, BASEPRI
 80048b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80048c0:	f06f 0305 	mvn.w	r3, #5
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e00b      	b.n	80048e0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80048ce:	f06f 0303 	mvn.w	r3, #3
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e004      	b.n	80048e0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80048da:	69b8      	ldr	r0, [r7, #24]
 80048dc:	f002 f88e 	bl	80069fc <vTaskSuspend>
  }

  return (stat);
 80048e0:	69fb      	ldr	r3, [r7, #28]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	2000037c 	.word	0x2000037c

080048f0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fc:	f3ef 8305 	mrs	r3, IPSR
 8004900:	617b      	str	r3, [r7, #20]
  return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004908:	f3ef 8310 	mrs	r3, PRIMASK
 800490c:	613b      	str	r3, [r7, #16]
  return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <osThreadResume+0x38>
 8004914:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <osThreadResume+0x64>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d109      	bne.n	8004930 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800491c:	f3ef 8311 	mrs	r3, BASEPRI
 8004920:	60fb      	str	r3, [r7, #12]
  return(result);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <osThreadResume+0x40>
    stat = osErrorISR;
 8004928:	f06f 0305 	mvn.w	r3, #5
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e00b      	b.n	8004948 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8004936:	f06f 0303 	mvn.w	r3, #3
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	e004      	b.n	8004948 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8004942:	69b8      	ldr	r0, [r7, #24]
 8004944:	f002 f90c 	bl	8006b60 <vTaskResume>
  }

  return (stat);
 8004948:	69fb      	ldr	r3, [r7, #28]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	2000037c 	.word	0x2000037c

08004958 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004960:	f3ef 8305 	mrs	r3, IPSR
 8004964:	613b      	str	r3, [r7, #16]
  return(result);
 8004966:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10f      	bne.n	800498c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496c:	f3ef 8310 	mrs	r3, PRIMASK
 8004970:	60fb      	str	r3, [r7, #12]
  return(result);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <osDelay+0x34>
 8004978:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <osDelay+0x58>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d109      	bne.n	8004994 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004980:	f3ef 8311 	mrs	r3, BASEPRI
 8004984:	60bb      	str	r3, [r7, #8]
  return(result);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <osDelay+0x3c>
    stat = osErrorISR;
 800498c:	f06f 0305 	mvn.w	r3, #5
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e007      	b.n	80049a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 fff6 	bl	8006990 <vTaskDelay>
    }
  }

  return (stat);
 80049a4:	697b      	ldr	r3, [r7, #20]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	2000037c 	.word	0x2000037c

080049b4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c0:	f3ef 8305 	mrs	r3, IPSR
 80049c4:	617b      	str	r3, [r7, #20]
  return(result);
 80049c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d13d      	bne.n	8004a48 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049cc:	f3ef 8310 	mrs	r3, PRIMASK
 80049d0:	613b      	str	r3, [r7, #16]
  return(result);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d137      	bne.n	8004a48 <osEventFlagsNew+0x94>
 80049d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a54 <osEventFlagsNew+0xa0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d105      	bne.n	80049ec <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e0:	f3ef 8311 	mrs	r3, BASEPRI
 80049e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d12d      	bne.n	8004a48 <osEventFlagsNew+0x94>
    mem = -1;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <osEventFlagsNew+0x5a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b1f      	cmp	r3, #31
 8004a06:	d902      	bls.n	8004a0e <osEventFlagsNew+0x5a>
        mem = 1;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	e00c      	b.n	8004a28 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <osEventFlagsNew+0x74>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <osEventFlagsNew+0x74>
          mem = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e001      	b.n	8004a28 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d106      	bne.n	8004a3c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 faac 	bl	8004f90 <xEventGroupCreateStatic>
 8004a38:	61f8      	str	r0, [r7, #28]
 8004a3a:	e005      	b.n	8004a48 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004a42:	f000 fade 	bl	8005002 <xEventGroupCreate>
 8004a46:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004a48:	69fb      	ldr	r3, [r7, #28]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000037c 	.word	0x2000037c

08004a58 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <osEventFlagsSet+0x1c>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a72:	d303      	bcc.n	8004a7c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004a74:	f06f 0303 	mvn.w	r3, #3
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e03a      	b.n	8004af2 <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a7c:	f3ef 8305 	mrs	r3, IPSR
 8004a80:	617b      	str	r3, [r7, #20]
  return(result);
 8004a82:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10f      	bne.n	8004aa8 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a88:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <osEventFlagsSet+0x50>
 8004a94:	4b19      	ldr	r3, [pc, #100]	@ (8004afc <osEventFlagsSet+0xa4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d123      	bne.n	8004ae4 <osEventFlagsSet+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01d      	beq.n	8004ae4 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6839      	ldr	r1, [r7, #0]
 8004ab4:	69b8      	ldr	r0, [r7, #24]
 8004ab6:	f000 fcc9 	bl	800544c <xEventGroupSetBitsFromISR>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 8004ac0:	f06f 0302 	mvn.w	r3, #2
 8004ac4:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004ac6:	e013      	b.n	8004af0 <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00e      	beq.n	8004af0 <osEventFlagsSet+0x98>
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <osEventFlagsSet+0xa8>)
 8004ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004ae2:	e005      	b.n	8004af0 <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	69b8      	ldr	r0, [r7, #24]
 8004ae8:	f000 fbe9 	bl	80052be <xEventGroupSetBits>
 8004aec:	61f8      	str	r0, [r7, #28]
 8004aee:	e000      	b.n	8004af2 <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004af0:	bf00      	nop
  }

  return (rflags);
 8004af2:	69fb      	ldr	r3, [r7, #28]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	2000037c 	.word	0x2000037c
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <osEventFlagsClear+0x1c>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b1e:	d303      	bcc.n	8004b28 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004b20:	f06f 0303 	mvn.w	r3, #3
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e029      	b.n	8004b7c <osEventFlagsClear+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b28:	f3ef 8305 	mrs	r3, IPSR
 8004b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10f      	bne.n	8004b54 <osEventFlagsClear+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b34:	f3ef 8310 	mrs	r3, PRIMASK
 8004b38:	613b      	str	r3, [r7, #16]
  return(result);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <osEventFlagsClear+0x50>
 8004b40:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <osEventFlagsClear+0x84>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d114      	bne.n	8004b72 <osEventFlagsClear+0x6e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b48:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <osEventFlagsClear+0x6e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004b54:	69b8      	ldr	r0, [r7, #24]
 8004b56:	f000 fb8f 	bl	8005278 <xEventGroupGetBitsFromISR>
 8004b5a:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f000 fb76 	bl	8005250 <xEventGroupClearBitsFromISR>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <osEventFlagsClear+0x78>
      rflags = (uint32_t)osErrorResource;
 8004b6a:	f06f 0302 	mvn.w	r3, #2
 8004b6e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004b70:	e004      	b.n	8004b7c <osEventFlagsClear+0x78>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	69b8      	ldr	r0, [r7, #24]
 8004b76:	f000 fb31 	bl	80051dc <xEventGroupClearBits>
 8004b7a:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000037c 	.word	0x2000037c

08004b8c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08e      	sub	sp, #56	@ 0x38
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <osEventFlagsWait+0x20>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004baa:	d303      	bcc.n	8004bb4 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004bac:	f06f 0303 	mvn.w	r3, #3
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb2:	e059      	b.n	8004c68 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb4:	f3ef 8305 	mrs	r3, IPSR
 8004bb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bba:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <osEventFlagsWait+0x54>
 8004bcc:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <osEventFlagsWait+0xe8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d109      	bne.n	8004be8 <osEventFlagsWait+0x5c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 8004be0:	f06f 0305 	mvn.w	r3, #5
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be6:	e03f      	b.n	8004c68 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf6:	e001      	b.n	8004bfc <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c0a:	e001      	b.n	8004c10 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	6a38      	ldr	r0, [r7, #32]
 8004c1c:	f000 fa0c 	bl	8005038 <xEventGroupWaitBits>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d019      	beq.n	8004c68 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 8004c3a:	f06f 0301 	mvn.w	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c40:	e012      	b.n	8004c68 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004c42:	f06f 0302 	mvn.w	r3, #2
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c48:	e00e      	b.n	8004c68 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 8004c5a:	f06f 0301 	mvn.w	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c60:	e002      	b.n	8004c68 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004c62:	f06f 0302 	mvn.w	r3, #2
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3730      	adds	r7, #48	@ 0x30
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2000037c 	.word	0x2000037c

08004c78 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	@ 0x30
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c88:	f3ef 8305 	mrs	r3, IPSR
 8004c8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c8e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 8086 	bne.w	8004da2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c96:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9a:	617b      	str	r3, [r7, #20]
  return(result);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d17f      	bne.n	8004da2 <osSemaphoreNew+0x12a>
 8004ca2:	4b42      	ldr	r3, [pc, #264]	@ (8004dac <osSemaphoreNew+0x134>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d105      	bne.n	8004cb6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004caa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cae:	613b      	str	r3, [r7, #16]
  return(result);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d175      	bne.n	8004da2 <osSemaphoreNew+0x12a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d072      	beq.n	8004da2 <osSemaphoreNew+0x12a>
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d86e      	bhi.n	8004da2 <osSemaphoreNew+0x12a>
    mem = -1;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <osSemaphoreNew+0x6e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cde:	d902      	bls.n	8004ce6 <osSemaphoreNew+0x6e>
        mem = 1;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	e00c      	b.n	8004d00 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d108      	bne.n	8004d00 <osSemaphoreNew+0x88>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <osSemaphoreNew+0x88>
          mem = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	e001      	b.n	8004d00 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d04c      	beq.n	8004da2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d128      	bne.n	8004d60 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d10a      	bne.n	8004d2a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	9200      	str	r2, [sp, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2001      	movs	r0, #1
 8004d22:	f000 fcc1 	bl	80056a8 <xQueueGenericCreateStatic>
 8004d26:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d28:	e005      	b.n	8004d36 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f000 fd36 	bl	80057a0 <xQueueGenericCreate>
 8004d34:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d022      	beq.n	8004d82 <osSemaphoreNew+0x10a>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01f      	beq.n	8004d82 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	2200      	movs	r2, #0
 8004d46:	2100      	movs	r1, #0
 8004d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d4a:	f000 fdf9 	bl	8005940 <xQueueGenericSend>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d016      	beq.n	8004d82 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004d54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d56:	f001 fa95 	bl	8006284 <vQueueDelete>
            hSemaphore = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5e:	e010      	b.n	8004d82 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d108      	bne.n	8004d78 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fd78 	bl	8005864 <xQueueCreateCountingSemaphoreStatic>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d76:	e004      	b.n	8004d82 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fdab 	bl	80058d6 <xQueueCreateCountingSemaphore>
 8004d80:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e001      	b.n	8004d9a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d9e:	f001 fbbd 	bl	800651c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3728      	adds	r7, #40	@ 0x28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	2000037c 	.word	0x2000037c

08004db0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004dc8:	f06f 0303 	mvn.w	r3, #3
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e04b      	b.n	8004e68 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd0:	f3ef 8305 	mrs	r3, IPSR
 8004dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8004dd6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10f      	bne.n	8004dfc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8004de0:	613b      	str	r3, [r7, #16]
  return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <osSemaphoreAcquire+0x4c>
 8004de8:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <osSemaphoreAcquire+0xc4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d128      	bne.n	8004e42 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004df0:	f3ef 8311 	mrs	r3, BASEPRI
 8004df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d022      	beq.n	8004e42 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004e02:	f06f 0303 	mvn.w	r3, #3
 8004e06:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e08:	e02d      	b.n	8004e66 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	461a      	mov	r2, r3
 8004e14:	2100      	movs	r1, #0
 8004e16:	69b8      	ldr	r0, [r7, #24]
 8004e18:	f001 f9b2 	bl	8006180 <xQueueReceiveFromISR>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004e22:	f06f 0302 	mvn.w	r3, #2
 8004e26:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e28:	e01d      	b.n	8004e66 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01a      	beq.n	8004e66 <osSemaphoreAcquire+0xb6>
 8004e30:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <osSemaphoreAcquire+0xc8>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004e40:	e011      	b.n	8004e66 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	69b8      	ldr	r0, [r7, #24]
 8004e46:	f001 f88b 	bl	8005f60 <xQueueSemaphoreTake>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d00b      	beq.n	8004e68 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004e56:	f06f 0301 	mvn.w	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e004      	b.n	8004e68 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004e5e:	f06f 0302 	mvn.w	r3, #2
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e000      	b.n	8004e68 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004e66:	bf00      	nop
      }
    }
  }

  return (stat);
 8004e68:	69fb      	ldr	r3, [r7, #28]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2000037c 	.word	0x2000037c
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004e92:	f06f 0303 	mvn.w	r3, #3
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	e03e      	b.n	8004f18 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9a:	f3ef 8305 	mrs	r3, IPSR
 8004e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eaa:	613b      	str	r3, [r7, #16]
  return(result);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <osSemaphoreRelease+0x4a>
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <osSemaphoreRelease+0xa8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d120      	bne.n	8004efc <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eba:	f3ef 8311 	mrs	r3, BASEPRI
 8004ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01a      	beq.n	8004efc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4619      	mov	r1, r3
 8004ed0:	69b8      	ldr	r0, [r7, #24]
 8004ed2:	f000 fed2 	bl	8005c7a <xQueueGiveFromISR>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d003      	beq.n	8004ee4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004edc:	f06f 0302 	mvn.w	r3, #2
 8004ee0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ee2:	e018      	b.n	8004f16 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d015      	beq.n	8004f16 <osSemaphoreRelease+0x9a>
 8004eea:	4b0f      	ldr	r3, [pc, #60]	@ (8004f28 <osSemaphoreRelease+0xac>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004efa:	e00c      	b.n	8004f16 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004efc:	2300      	movs	r3, #0
 8004efe:	2200      	movs	r2, #0
 8004f00:	2100      	movs	r1, #0
 8004f02:	69b8      	ldr	r0, [r7, #24]
 8004f04:	f000 fd1c 	bl	8005940 <xQueueGenericSend>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d004      	beq.n	8004f18 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004f0e:	f06f 0302 	mvn.w	r3, #2
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e000      	b.n	8004f18 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f16:	bf00      	nop
    }
  }

  return (stat);
 8004f18:	69fb      	ldr	r3, [r7, #28]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	2000037c 	.word	0x2000037c
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a06      	ldr	r2, [pc, #24]	@ (8004f54 <vApplicationGetIdleTaskMemory+0x28>)
 8004f3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2280      	movs	r2, #128	@ 0x80
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	20000380 	.word	0x20000380
 8004f58:	20000428 	.word	0x20000428

08004f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a07      	ldr	r2, [pc, #28]	@ (8004f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a06      	ldr	r2, [pc, #24]	@ (8004f8c <vApplicationGetTimerTaskMemory+0x30>)
 8004f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f7a:	601a      	str	r2, [r3, #0]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000628 	.word	0x20000628
 8004f8c:	200006d0 	.word	0x200006d0

08004f90 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d00b      	beq.n	8004fd8 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <xEventGroupCreateStatic+0x44>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fa41 	bl	8005474 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004ff8:	697b      	ldr	r3, [r7, #20]
	}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005008:	2020      	movs	r0, #32
 800500a:	f003 fa61 	bl	80084d0 <pvPortMalloc>
 800500e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fa27 	bl	8005474 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800502c:	687b      	ldr	r3, [r7, #4]
	}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b090      	sub	sp, #64	@ 0x40
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <xEventGroupWaitBits+0x38>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	623b      	str	r3, [r7, #32]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005076:	d30b      	bcc.n	8005090 <xEventGroupWaitBits+0x58>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	61fb      	str	r3, [r7, #28]
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <xEventGroupWaitBits+0x76>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	61bb      	str	r3, [r7, #24]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ae:	f002 fad5 	bl	800765c <xTaskGetSchedulerState>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <xEventGroupWaitBits+0x86>
 80050b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <xEventGroupWaitBits+0x8a>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xEventGroupWaitBits+0x8c>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	617b      	str	r3, [r7, #20]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80050e0:	f001 fe0e 	bl	8006d00 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050f0:	f000 f98b 	bl	800540a <prvTestWaitCondition>
 80050f4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00e      	beq.n	800511a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005100:	2300      	movs	r3, #0
 8005102:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d028      	beq.n	800515c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800510a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e020      	b.n	800515c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800511a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	633b      	str	r3, [r7, #48]	@ 0x30
 8005128:	e018      	b.n	800515c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005136:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005144:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	1d18      	adds	r0, r3, #4
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514e:	4313      	orrs	r3, r2
 8005150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005152:	4619      	mov	r1, r3
 8005154:	f001 ffea 	bl	800712c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800515c:	f001 fdde 	bl	8006d1c <xTaskResumeAll>
 8005160:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005164:	2b00      	cmp	r3, #0
 8005166:	d031      	beq.n	80051cc <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800516e:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <xEventGroupWaitBits+0x1a0>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800517e:	f002 fbf1 	bl	8007964 <uxTaskResetEventItemValue>
 8005182:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d11a      	bne.n	80051c4 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800518e:	f003 f89d 	bl	80082cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800519e:	f000 f934 	bl	800540a <prvTestWaitCondition>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d006      	beq.n	80051bc <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	401a      	ands	r2, r3
 80051b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ba:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80051c0:	f003 f8b4 	bl	800832c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80051c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80051cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3740      	adds	r7, #64	@ 0x40
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <xEventGroupClearBits+0x2c>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800520e:	d30b      	bcc.n	8005228 <xEventGroupClearBits+0x4c>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60bb      	str	r3, [r7, #8]
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005228:	f003 f850 	bl	80082cc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	43db      	mvns	r3, r3
 800523a:	401a      	ands	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005240:	f003 f874 	bl	800832c <vPortExitCritical>

	return uxReturn;
 8005244:	693b      	ldr	r3, [r7, #16]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800525a:	2300      	movs	r3, #0
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4804      	ldr	r0, [pc, #16]	@ (8005274 <xEventGroupClearBitsFromISR+0x24>)
 8005262:	f002 ff1f 	bl	80080a4 <xTimerPendFunctionCallFromISR>
 8005266:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005268:	68fb      	ldr	r3, [r7, #12]
	}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	080053f1 	.word	0x080053f1

08005278 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	@ 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005284:	f3ef 8211 	mrs	r2, BASEPRI
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	60fa      	str	r2, [r7, #12]
 800529a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800529c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800529e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052b0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80052b2:	697b      	ldr	r3, [r7, #20]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3724      	adds	r7, #36	@ 0x24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08e      	sub	sp, #56	@ 0x38
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80052c8:	2300      	movs	r3, #0
 80052ca:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <xEventGroupSetBits+0x34>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	613b      	str	r3, [r7, #16]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052f8:	d30b      	bcc.n	8005312 <xEventGroupSetBits+0x54>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60fb      	str	r3, [r7, #12]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	3304      	adds	r3, #4
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	3308      	adds	r3, #8
 800531c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800531e:	f001 fcef 	bl	8006d00 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	431a      	orrs	r2, r3
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005334:	e03c      	b.n	80053b0 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800533c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005342:	2300      	movs	r3, #0
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800534c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005354:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	e008      	b.n	8005384 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d101      	bne.n	8005384 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053a4:	4619      	mov	r1, r3
 80053a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80053a8:	f001 ff8e 	bl	80072c8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80053b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1be      	bne.n	8005336 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	43db      	mvns	r3, r3
 80053c0:	401a      	ands	r2, r3
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80053c6:	f001 fca9 	bl	8006d1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	681b      	ldr	r3, [r3, #0]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3738      	adds	r7, #56	@ 0x38
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff ff6b 	bl	80052be <xEventGroupSetBits>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff feed 	bl	80051dc <xEventGroupClearBits>
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800540a:	b480      	push	{r7}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d107      	bne.n	8005430 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e007      	b.n	8005440 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d101      	bne.n	8005440 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005440:	697b      	ldr	r3, [r7, #20]
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	4804      	ldr	r0, [pc, #16]	@ (8005470 <xEventGroupSetBitsFromISR+0x24>)
 8005460:	f002 fe20 	bl	80080a4 <xTimerPendFunctionCallFromISR>
 8005464:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005466:	697b      	ldr	r3, [r7, #20]
	}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	080053d7 	.word	0x080053d7

08005474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f103 0208 	add.w	r2, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f04f 32ff 	mov.w	r2, #4294967295
 800548c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f103 0208 	add.w	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f103 0208 	add.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d103      	bne.n	8005530 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e00c      	b.n	800554a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3308      	adds	r3, #8
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e002      	b.n	800553e <vListInsert+0x2e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d2f6      	bcs.n	8005538 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6892      	ldr	r2, [r2, #8]
 8005596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6852      	ldr	r2, [r2, #4]
 80055a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d103      	bne.n	80055b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	1e5a      	subs	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
	...

080055d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <xQueueGenericReset+0x2c>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	60bb      	str	r3, [r7, #8]
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005600:	f002 fe64 	bl	80082cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	3b01      	subs	r3, #1
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	441a      	add	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	22ff      	movs	r2, #255	@ 0xff
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d114      	bne.n	8005680 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01a      	beq.n	8005694 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3310      	adds	r3, #16
 8005662:	4618      	mov	r0, r3
 8005664:	f001 fdcc 	bl	8007200 <xTaskRemoveFromEventList>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d012      	beq.n	8005694 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <xQueueGenericReset+0xd0>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	e009      	b.n	8005694 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3310      	adds	r3, #16
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fef5 	bl	8005474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3324      	adds	r3, #36	@ 0x24
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fef0 	bl	8005474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005694:	f002 fe4a 	bl	800832c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005698:	2301      	movs	r3, #1
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	@ 0x38
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <xQueueGenericCreateStatic+0x56>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <xQueueGenericCreateStatic+0x5a>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <xQueueGenericCreateStatic+0x5c>
 8005702:	2300      	movs	r3, #0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	623b      	str	r3, [r7, #32]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <xQueueGenericCreateStatic+0x84>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <xQueueGenericCreateStatic+0x88>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <xQueueGenericCreateStatic+0x8a>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fb      	str	r3, [r7, #28]
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	e7fd      	b.n	800574a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800574e:	2350      	movs	r3, #80	@ 0x50
 8005750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b50      	cmp	r3, #80	@ 0x50
 8005756:	d00b      	beq.n	8005770 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61bb      	str	r3, [r7, #24]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005782:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f844 	bl	800581e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005798:	4618      	mov	r0, r3
 800579a:	3730      	adds	r7, #48	@ 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	@ 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <xQueueGenericCreate+0x2c>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	613b      	str	r3, [r7, #16]
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e004      	b.n	80057e2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3350      	adds	r3, #80	@ 0x50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 fe72 	bl	80084d0 <pvPortMalloc>
 80057ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00f      	beq.n	8005814 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	3350      	adds	r3, #80	@ 0x50
 80057f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005802:	79fa      	ldrb	r2, [r7, #7]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f805 	bl	800581e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005814:	69bb      	ldr	r3, [r7, #24]
	}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e002      	b.n	8005840 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800584c:	2101      	movs	r1, #1
 800584e:	69b8      	ldr	r0, [r7, #24]
 8005850:	f7ff fec0 	bl	80055d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	@ 0x28
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	61bb      	str	r3, [r7, #24]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	429a      	cmp	r2, r3
 8005894:	d90b      	bls.n	80058ae <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	617b      	str	r3, [r7, #20]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80058ae:	2302      	movs	r3, #2
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2100      	movs	r1, #0
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fef5 	bl	80056a8 <xQueueGenericCreateStatic>
 80058be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058cc:	69fb      	ldr	r3, [r7, #28]
	}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	613b      	str	r3, [r7, #16]
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	e7fd      	b.n	80058fa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d90b      	bls.n	800591e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800591e:	2202      	movs	r2, #2
 8005920:	2100      	movs	r1, #0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff ff3c 	bl	80057a0 <xQueueGenericCreate>
 8005928:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005936:	697b      	ldr	r3, [r7, #20]
	}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	@ 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800594e:	2300      	movs	r3, #0
 8005950:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <xQueueGenericSend+0x34>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <xQueueGenericSend+0x42>
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <xQueueGenericSend+0x46>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericSend+0x48>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xQueueGenericSend+0x64>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d103      	bne.n	80059b2 <xQueueGenericSend+0x72>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <xQueueGenericSend+0x76>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueGenericSend+0x78>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <xQueueGenericSend+0x94>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	623b      	str	r3, [r7, #32]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d4:	f001 fe42 	bl	800765c <xTaskGetSchedulerState>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <xQueueGenericSend+0xa4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <xQueueGenericSend+0xa8>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <xQueueGenericSend+0xaa>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <xQueueGenericSend+0xc6>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61fb      	str	r3, [r7, #28]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a06:	f002 fc61 	bl	80082cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <xQueueGenericSend+0xdc>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d129      	bne.n	8005a70 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a22:	f000 fc6a 	bl	80062fa <prvCopyDataToQueue>
 8005a26:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	3324      	adds	r3, #36	@ 0x24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 fbe3 	bl	8007200 <xTaskRemoveFromEventList>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d013      	beq.n	8005a68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a40:	4b3f      	ldr	r3, [pc, #252]	@ (8005b40 <xQueueGenericSend+0x200>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	e00a      	b.n	8005a68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a58:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <xQueueGenericSend+0x200>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a68:	f002 fc60 	bl	800832c <vPortExitCritical>
				return pdPASS;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e063      	b.n	8005b38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a76:	f002 fc59 	bl	800832c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e05c      	b.n	8005b38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fc81 	bl	8007390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a92:	f002 fc4b 	bl	800832c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a96:	f001 f933 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a9a:	f002 fc17 	bl	80082cc <vPortEnterCritical>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aa4:	b25b      	sxtb	r3, r3
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d103      	bne.n	8005ab4 <xQueueGenericSend+0x174>
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSend+0x18a>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aca:	f002 fc2f 	bl	800832c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ace:	1d3a      	adds	r2, r7, #4
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 fc70 	bl	80073bc <xTaskCheckForTimeOut>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d124      	bne.n	8005b2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ae2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae4:	f000 fd01 	bl	80064ea <prvIsQueueFull>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d018      	beq.n	8005b20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	3310      	adds	r3, #16
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 faf2 	bl	80070e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005afe:	f000 fc8c 	bl	800641a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b02:	f001 f90b 	bl	8006d1c <xTaskResumeAll>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f47f af7c 	bne.w	8005a06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <xQueueGenericSend+0x200>)
 8005b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	e772      	b.n	8005a06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b22:	f000 fc7a 	bl	800641a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b26:	f001 f8f9 	bl	8006d1c <xTaskResumeAll>
 8005b2a:	e76c      	b.n	8005a06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b2e:	f000 fc74 	bl	800641a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b32:	f001 f8f3 	bl	8006d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b36:	2300      	movs	r3, #0
		}
	}
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3738      	adds	r7, #56	@ 0x38
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08e      	sub	sp, #56	@ 0x38
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <xQueueGenericSendFromISR+0x3e>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <xQueueGenericSendFromISR+0x42>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <xQueueGenericSendFromISR+0x44>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	623b      	str	r3, [r7, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d103      	bne.n	8005bb2 <xQueueGenericSendFromISR+0x6e>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericSendFromISR+0x72>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericSendFromISR+0x74>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	61fb      	str	r3, [r7, #28]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bd4:	f002 fc3c 	bl	8008450 <vPortValidateInterruptPriority>
	__asm volatile
 8005bd8:	f3ef 8211 	mrs	r2, BASEPRI
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	61ba      	str	r2, [r7, #24]
 8005bee:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <xQueueGenericSendFromISR+0xc2>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d12c      	bne.n	8005c60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c16:	f000 fb70 	bl	80062fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d112      	bne.n	8005c4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d016      	beq.n	8005c5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	3324      	adds	r3, #36	@ 0x24
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 fae5 	bl	8007200 <xTaskRemoveFromEventList>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00e      	beq.n	8005c5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e007      	b.n	8005c5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c4e:	3301      	adds	r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	b25a      	sxtb	r2, r3
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005c5e:	e001      	b.n	8005c64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
}
 8005c6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3738      	adds	r7, #56	@ 0x38
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b08e      	sub	sp, #56	@ 0x38
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	623b      	str	r3, [r7, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	61fb      	str	r3, [r7, #28]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <xQueueGiveFromISR+0x5c>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <xQueueGiveFromISR+0x60>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <xQueueGiveFromISR+0x62>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	61bb      	str	r3, [r7, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf8:	f002 fbaa 	bl	8008450 <vPortValidateInterruptPriority>
	__asm volatile
 8005cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	617a      	str	r2, [r7, #20]
 8005d12:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d14:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d22b      	bcs.n	8005d80 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d112      	bne.n	8005d6a <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	3324      	adds	r3, #36	@ 0x24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fa55 	bl	8007200 <xTaskRemoveFromEventList>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e007      	b.n	8005d7a <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d6e:	3301      	adds	r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	b25a      	sxtb	r2, r3
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7e:	e001      	b.n	8005d84 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f383 8811 	msr	BASEPRI, r3
}
 8005d8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3738      	adds	r7, #56	@ 0x38
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	@ 0x30
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <xQueueReceive+0x32>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	623b      	str	r3, [r7, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <xQueueReceive+0x40>
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <xQueueReceive+0x44>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <xQueueReceive+0x46>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <xQueueReceive+0x62>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	61fb      	str	r3, [r7, #28]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dfe:	f001 fc2d 	bl	800765c <xTaskGetSchedulerState>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <xQueueReceive+0x72>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <xQueueReceive+0x76>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueReceive+0x78>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xQueueReceive+0x94>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	61bb      	str	r3, [r7, #24]
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e30:	f002 fa4c 	bl	80082cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01f      	beq.n	8005e80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e44:	f000 fac3 	bl	80063ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00f      	beq.n	8005e78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	3310      	adds	r3, #16
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f9cf 	bl	8007200 <xTaskRemoveFromEventList>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e68:	4b3c      	ldr	r3, [pc, #240]	@ (8005f5c <xQueueReceive+0x1c0>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e78:	f002 fa58 	bl	800832c <vPortExitCritical>
				return pdPASS;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e069      	b.n	8005f54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e86:	f002 fa51 	bl	800832c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e062      	b.n	8005f54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 fa79 	bl	8007390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ea2:	f002 fa43 	bl	800832c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ea6:	f000 ff2b 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eaa:	f002 fa0f 	bl	80082cc <vPortEnterCritical>
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d103      	bne.n	8005ec4 <xQueueReceive+0x128>
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d103      	bne.n	8005eda <xQueueReceive+0x13e>
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eda:	f002 fa27 	bl	800832c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ede:	1d3a      	adds	r2, r7, #4
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fa68 	bl	80073bc <xTaskCheckForTimeOut>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d123      	bne.n	8005f3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef4:	f000 fae3 	bl	80064be <prvIsQueueEmpty>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d017      	beq.n	8005f2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f00:	3324      	adds	r3, #36	@ 0x24
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4611      	mov	r1, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f8ea 	bl	80070e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f0e:	f000 fa84 	bl	800641a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f12:	f000 ff03 	bl	8006d1c <xTaskResumeAll>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d189      	bne.n	8005e30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <xQueueReceive+0x1c0>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	e780      	b.n	8005e30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f30:	f000 fa73 	bl	800641a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f34:	f000 fef2 	bl	8006d1c <xTaskResumeAll>
 8005f38:	e77a      	b.n	8005e30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f3c:	f000 fa6d 	bl	800641a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f40:	f000 feec 	bl	8006d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f46:	f000 faba 	bl	80064be <prvIsQueueEmpty>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f43f af6f 	beq.w	8005e30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3730      	adds	r7, #48	@ 0x30
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08e      	sub	sp, #56	@ 0x38
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	623b      	str	r3, [r7, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	e7fd      	b.n	8005f90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	61fb      	str	r3, [r7, #28]
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb4:	f001 fb52 	bl	800765c <xTaskGetSchedulerState>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <xQueueSemaphoreTake+0x64>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <xQueueSemaphoreTake+0x68>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <xQueueSemaphoreTake+0x6a>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	61bb      	str	r3, [r7, #24]
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fe6:	f002 f971 	bl	80082cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d024      	beq.n	8006040 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006006:	f001 fcc5 	bl	8007994 <pvTaskIncrementMutexHeldCount>
 800600a:	4602      	mov	r2, r0
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00f      	beq.n	8006038 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	3310      	adds	r3, #16
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f8ef 	bl	8007200 <xTaskRemoveFromEventList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006028:	4b54      	ldr	r3, [pc, #336]	@ (800617c <xQueueSemaphoreTake+0x21c>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006038:	f002 f978 	bl	800832c <vPortExitCritical>
				return pdPASS;
 800603c:	2301      	movs	r3, #1
 800603e:	e098      	b.n	8006172 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d112      	bne.n	800606c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	617b      	str	r3, [r7, #20]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006064:	f002 f962 	bl	800832c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006068:	2300      	movs	r3, #0
 800606a:	e082      	b.n	8006172 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006072:	f107 030c 	add.w	r3, r7, #12
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f98a 	bl	8007390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006080:	f002 f954 	bl	800832c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006084:	f000 fe3c 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006088:	f002 f920 	bl	80082cc <vPortEnterCritical>
 800608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006092:	b25b      	sxtb	r3, r3
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d103      	bne.n	80060a2 <xQueueSemaphoreTake+0x142>
 800609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d103      	bne.n	80060b8 <xQueueSemaphoreTake+0x158>
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060b8:	f002 f938 	bl	800832c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060bc:	463a      	mov	r2, r7
 80060be:	f107 030c 	add.w	r3, r7, #12
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f979 	bl	80073bc <xTaskCheckForTimeOut>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d132      	bne.n	8006136 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060d2:	f000 f9f4 	bl	80064be <prvIsQueueEmpty>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d026      	beq.n	800612a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80060e4:	f002 f8f2 	bl	80082cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fad3 	bl	8007698 <xTaskPriorityInherit>
 80060f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80060f4:	f002 f91a 	bl	800832c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fa:	3324      	adds	r3, #36	@ 0x24
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f000 ffed 	bl	80070e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006108:	f000 f987 	bl	800641a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800610c:	f000 fe06 	bl	8006d1c <xTaskResumeAll>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	f47f af67 	bne.w	8005fe6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006118:	4b18      	ldr	r3, [pc, #96]	@ (800617c <xQueueSemaphoreTake+0x21c>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	e75d      	b.n	8005fe6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800612a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800612c:	f000 f975 	bl	800641a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006130:	f000 fdf4 	bl	8006d1c <xTaskResumeAll>
 8006134:	e757      	b.n	8005fe6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006136:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006138:	f000 f96f 	bl	800641a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613c:	f000 fdee 	bl	8006d1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006142:	f000 f9bc 	bl	80064be <prvIsQueueEmpty>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	f43f af4c 	beq.w	8005fe6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006154:	f002 f8ba 	bl	80082cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006158:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800615a:	f000 f8b7 	bl	80062cc <prvGetDisinheritPriorityAfterTimeout>
 800615e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fb74 	bl	8007854 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800616c:	f002 f8de 	bl	800832c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006170:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006172:	4618      	mov	r0, r3
 8006174:	3738      	adds	r7, #56	@ 0x38
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08e      	sub	sp, #56	@ 0x38
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	623b      	str	r3, [r7, #32]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <xQueueReceiveFromISR+0x3c>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <xQueueReceiveFromISR+0x40>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <xQueueReceiveFromISR+0x42>
 80061c0:	2300      	movs	r3, #0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	61fb      	str	r3, [r7, #28]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061de:	f002 f937 	bl	8008450 <vPortValidateInterruptPriority>
	__asm volatile
 80061e2:	f3ef 8211 	mrs	r2, BASEPRI
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61ba      	str	r2, [r7, #24]
 80061f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006202:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d02f      	beq.n	800626a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006218:	f000 f8d9 	bl	80063ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	1e5a      	subs	r2, r3, #1
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d112      	bne.n	8006254 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	3310      	adds	r3, #16
 800623a:	4618      	mov	r0, r3
 800623c:	f000 ffe0 	bl	8007200 <xTaskRemoveFromEventList>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e007      	b.n	8006264 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006258:	3301      	adds	r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	b25a      	sxtb	r2, r3
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
 8006268:	e001      	b.n	800626e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f383 8811 	msr	BASEPRI, r3
}
 8006278:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800627a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800627c:	4618      	mov	r0, r3
 800627e:	3738      	adds	r7, #56	@ 0x38
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <vQueueDelete+0x2a>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60bb      	str	r3, [r7, #8]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f95c 	bl	800656c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f002 f9ce 	bl	8008660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d006      	beq.n	80062ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e001      	b.n	80062ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062ee:	68fb      	ldr	r3, [r7, #12]
	}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10d      	bne.n	8006334 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d14d      	bne.n	80063bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fa25 	bl	8007774 <xTaskPriorityDisinherit>
 800632a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e043      	b.n	80063bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d119      	bne.n	800636e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6898      	ldr	r0, [r3, #8]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	461a      	mov	r2, r3
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	f003 f906 	bl	8009556 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d32b      	bcc.n	80063bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	e026      	b.n	80063bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68d8      	ldr	r0, [r3, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	461a      	mov	r2, r3
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	f003 f8ec 	bl	8009556 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	425b      	negs	r3, r3
 8006388:	441a      	add	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d207      	bcs.n	80063aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	425b      	negs	r3, r3
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d105      	bne.n	80063bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063c4:	697b      	ldr	r3, [r7, #20]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d018      	beq.n	8006412 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d303      	bcc.n	8006402 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68d9      	ldr	r1, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	461a      	mov	r2, r3
 800640c:	6838      	ldr	r0, [r7, #0]
 800640e:	f003 f8a2 	bl	8009556 <memcpy>
	}
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006422:	f001 ff53 	bl	80082cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800642c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800642e:	e011      	b.n	8006454 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3324      	adds	r3, #36	@ 0x24
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fedf 	bl	8007200 <xTaskRemoveFromEventList>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006448:	f001 f81c 	bl	8007484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	3b01      	subs	r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dce9      	bgt.n	8006430 <prvUnlockQueue+0x16>
 800645c:	e000      	b.n	8006460 <prvUnlockQueue+0x46>
					break;
 800645e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	22ff      	movs	r2, #255	@ 0xff
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006468:	f001 ff60 	bl	800832c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800646c:	f001 ff2e 	bl	80082cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006476:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006478:	e011      	b.n	800649e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d012      	beq.n	80064a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3310      	adds	r3, #16
 8006486:	4618      	mov	r0, r3
 8006488:	f000 feba 	bl	8007200 <xTaskRemoveFromEventList>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006492:	f000 fff7 	bl	8007484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	3b01      	subs	r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800649e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dce9      	bgt.n	800647a <prvUnlockQueue+0x60>
 80064a6:	e000      	b.n	80064aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	22ff      	movs	r2, #255	@ 0xff
 80064ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064b2:	f001 ff3b 	bl	800832c <vPortExitCritical>
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064c6:	f001 ff01 	bl	80082cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e001      	b.n	80064dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064dc:	f001 ff26 	bl	800832c <vPortExitCritical>

	return xReturn;
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064f2:	f001 feeb 	bl	80082cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d102      	bne.n	8006508 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e001      	b.n	800650c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800650c:	f001 ff0e 	bl	800832c <vPortExitCritical>

	return xReturn;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e014      	b.n	8006556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800652c:	4a0e      	ldr	r2, [pc, #56]	@ (8006568 <vQueueAddToRegistry+0x4c>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006538:	490b      	ldr	r1, [pc, #44]	@ (8006568 <vQueueAddToRegistry+0x4c>)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006542:	4a09      	ldr	r2, [pc, #36]	@ (8006568 <vQueueAddToRegistry+0x4c>)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4413      	add	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800654e:	e006      	b.n	800655e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b07      	cmp	r3, #7
 800655a:	d9e7      	bls.n	800652c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	20000ad0 	.word	0x20000ad0

0800656c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e016      	b.n	80065a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800657a:	4a10      	ldr	r2, [pc, #64]	@ (80065bc <vQueueUnregisterQueue+0x50>)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d10b      	bne.n	80065a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800658a:	4a0c      	ldr	r2, [pc, #48]	@ (80065bc <vQueueUnregisterQueue+0x50>)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2100      	movs	r1, #0
 8006590:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006594:	4a09      	ldr	r2, [pc, #36]	@ (80065bc <vQueueUnregisterQueue+0x50>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4413      	add	r3, r2
 800659c:	2200      	movs	r2, #0
 800659e:	605a      	str	r2, [r3, #4]
				break;
 80065a0:	e006      	b.n	80065b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b07      	cmp	r3, #7
 80065ac:	d9e5      	bls.n	800657a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000ad0 	.word	0x20000ad0

080065c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065d0:	f001 fe7c 	bl	80082cc <vPortEnterCritical>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d103      	bne.n	80065ea <vQueueWaitForMessageRestricted+0x2a>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d103      	bne.n	8006600 <vQueueWaitForMessageRestricted+0x40>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006600:	f001 fe94 	bl	800832c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3324      	adds	r3, #36	@ 0x24
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fdc7 	bl	80071a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800661a:	6978      	ldr	r0, [r7, #20]
 800661c:	f7ff fefd 	bl	800641a <prvUnlockQueue>
	}
 8006620:	bf00      	nop
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08e      	sub	sp, #56	@ 0x38
 800662c:	af04      	add	r7, sp, #16
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <xTaskCreateStatic+0x2c>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	623b      	str	r3, [r7, #32]
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <xTaskCreateStatic+0x4a>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	61fb      	str	r3, [r7, #28]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006672:	23a8      	movs	r3, #168	@ 0xa8
 8006674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2ba8      	cmp	r3, #168	@ 0xa8
 800667a:	d00b      	beq.n	8006694 <xTaskCreateStatic+0x6c>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61bb      	str	r3, [r7, #24]
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01e      	beq.n	80066d8 <xTaskCreateStatic+0xb0>
 800669a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066a8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066b2:	2300      	movs	r3, #0
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	9302      	str	r3, [sp, #8]
 80066ba:	f107 0314 	add.w	r3, r7, #20
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f850 	bl	8006770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066d2:	f000 f8ed 	bl	80068b0 <prvAddNewTaskToReadyList>
 80066d6:	e001      	b.n	80066dc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066dc:	697b      	ldr	r3, [r7, #20]
	}
 80066de:	4618      	mov	r0, r3
 80066e0:	3728      	adds	r7, #40	@ 0x28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b08c      	sub	sp, #48	@ 0x30
 80066ea:	af04      	add	r7, sp, #16
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 fee8 	bl	80084d0 <pvPortMalloc>
 8006700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006708:	20a8      	movs	r0, #168	@ 0xa8
 800670a:	f001 fee1 	bl	80084d0 <pvPortMalloc>
 800670e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	631a      	str	r2, [r3, #48]	@ 0x30
 800671c:	e005      	b.n	800672a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800671e:	6978      	ldr	r0, [r7, #20]
 8006720:	f001 ff9e 	bl	8008660 <vPortFree>
 8006724:	e001      	b.n	800672a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	2300      	movs	r3, #0
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	9302      	str	r3, [sp, #8]
 8006742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f80e 	bl	8006770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006754:	69f8      	ldr	r0, [r7, #28]
 8006756:	f000 f8ab 	bl	80068b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800675a:	2301      	movs	r3, #1
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e002      	b.n	8006766 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006766:	69bb      	ldr	r3, [r7, #24]
	}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	461a      	mov	r2, r3
 8006788:	21a5      	movs	r1, #165	@ 0xa5
 800678a:	f002 fe00 	bl	800938e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006798:	3b01      	subs	r3, #1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	617b      	str	r3, [r7, #20]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	e012      	b.n	80067f6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	7819      	ldrb	r1, [r3, #0]
 80067d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	3334      	adds	r3, #52	@ 0x34
 80067e0:	460a      	mov	r2, r1
 80067e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d9e9      	bls.n	80067d0 <prvInitialiseNewTask+0x60>
 80067fc:	e000      	b.n	8006800 <prvInitialiseNewTask+0x90>
		{
			break;
 80067fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	2b37      	cmp	r3, #55	@ 0x37
 800680c:	d901      	bls.n	8006812 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800680e:	2337      	movs	r3, #55	@ 0x37
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006816:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2200      	movs	r2, #0
 8006822:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	3304      	adds	r3, #4
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fe42 	bl	80054b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	3318      	adds	r3, #24
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fe3d 	bl	80054b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800684c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	2200      	movs	r2, #0
 800685a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	3354      	adds	r3, #84	@ 0x54
 8006862:	224c      	movs	r2, #76	@ 0x4c
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f002 fd91 	bl	800938e <memset>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	4a0d      	ldr	r2, [pc, #52]	@ (80068a4 <prvInitialiseNewTask+0x134>)
 8006870:	659a      	str	r2, [r3, #88]	@ 0x58
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	4a0c      	ldr	r2, [pc, #48]	@ (80068a8 <prvInitialiseNewTask+0x138>)
 8006876:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <prvInitialiseNewTask+0x13c>)
 800687c:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	68f9      	ldr	r1, [r7, #12]
 8006882:	69b8      	ldr	r0, [r7, #24]
 8006884:	f001 fc2e 	bl	80080e4 <pxPortInitialiseStack>
 8006888:	4602      	mov	r2, r0
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800689a:	bf00      	nop
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200030fc 	.word	0x200030fc
 80068a8:	20003164 	.word	0x20003164
 80068ac:	200031cc 	.word	0x200031cc

080068b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068b8:	f001 fd08 	bl	80082cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006974 <prvAddNewTaskToReadyList+0xc4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <prvAddNewTaskToReadyList+0xc4>)
 80068c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068d4:	4b27      	ldr	r3, [pc, #156]	@ (8006974 <prvAddNewTaskToReadyList+0xc4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d110      	bne.n	80068fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068dc:	f000 fdf6 	bl	80074cc <prvInitialiseTaskLists>
 80068e0:	e00d      	b.n	80068fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068e2:	4b26      	ldr	r3, [pc, #152]	@ (800697c <prvAddNewTaskToReadyList+0xcc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ea:	4b23      	ldr	r3, [pc, #140]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d802      	bhi.n	80068fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068fe:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <prvAddNewTaskToReadyList+0xd0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a1e      	ldr	r2, [pc, #120]	@ (8006980 <prvAddNewTaskToReadyList+0xd0>)
 8006906:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006908:	4b1d      	ldr	r3, [pc, #116]	@ (8006980 <prvAddNewTaskToReadyList+0xd0>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <prvAddNewTaskToReadyList+0xd4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d903      	bls.n	8006924 <prvAddNewTaskToReadyList+0x74>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <prvAddNewTaskToReadyList+0xd4>)
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4a15      	ldr	r2, [pc, #84]	@ (8006988 <prvAddNewTaskToReadyList+0xd8>)
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7fe fdc5 	bl	80054ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006940:	f001 fcf4 	bl	800832c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006944:	4b0d      	ldr	r3, [pc, #52]	@ (800697c <prvAddNewTaskToReadyList+0xcc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	429a      	cmp	r2, r3
 8006958:	d207      	bcs.n	800696a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800695a:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <prvAddNewTaskToReadyList+0xdc>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000fe4 	.word	0x20000fe4
 8006978:	20000b10 	.word	0x20000b10
 800697c:	20000ff0 	.word	0x20000ff0
 8006980:	20001000 	.word	0x20001000
 8006984:	20000fec 	.word	0x20000fec
 8006988:	20000b14 	.word	0x20000b14
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d018      	beq.n	80069d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <vTaskDelay+0x64>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <vTaskDelay+0x32>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60bb      	str	r3, [r7, #8]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069c2:	f000 f99d 	bl	8006d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fff7 	bl	80079bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069ce:	f000 f9a5 	bl	8006d1c <xTaskResumeAll>
 80069d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069da:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <vTaskDelay+0x68>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000100c 	.word	0x2000100c
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006a04:	f001 fc62 	bl	80082cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <vTaskSuspend+0x18>
 8006a0e:	4b30      	ldr	r3, [pc, #192]	@ (8006ad0 <vTaskSuspend+0xd4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	e000      	b.n	8006a16 <vTaskSuspend+0x1a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fdaf 	bl	8005580 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fda6 	bl	8005580 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4826      	ldr	r0, [pc, #152]	@ (8006ad4 <vTaskSuspend+0xd8>)
 8006a3c:	f7fe fd45 	bl	80054ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d103      	bne.n	8006a54 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006a54:	f001 fc6a 	bl	800832c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006a58:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad8 <vTaskSuspend+0xdc>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006a60:	f001 fc34 	bl	80082cc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006a64:	f000 fdd6 	bl	8007614 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006a68:	f001 fc60 	bl	800832c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006a6c:	4b18      	ldr	r3, [pc, #96]	@ (8006ad0 <vTaskSuspend+0xd4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d128      	bne.n	8006ac8 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a76:	4b18      	ldr	r3, [pc, #96]	@ (8006ad8 <vTaskSuspend+0xdc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d018      	beq.n	8006ab0 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006a7e:	4b17      	ldr	r3, [pc, #92]	@ (8006adc <vTaskSuspend+0xe0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <vTaskSuspend+0xa2>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60bb      	str	r3, [r7, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	e7fd      	b.n	8006a9a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006a9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ae0 <vTaskSuspend+0xe4>)
 8006aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aae:	e00b      	b.n	8006ac8 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006ab0:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <vTaskSuspend+0xd8>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <vTaskSuspend+0xe8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d103      	bne.n	8006ac4 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8006abc:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <vTaskSuspend+0xd4>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
	}
 8006ac2:	e001      	b.n	8006ac8 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8006ac4:	f000 faa8 	bl	8007018 <vTaskSwitchContext>
	}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000b10 	.word	0x20000b10
 8006ad4:	20000fd0 	.word	0x20000fd0
 8006ad8:	20000ff0 	.word	0x20000ff0
 8006adc:	2000100c 	.word	0x2000100c
 8006ae0:	e000ed04 	.word	0xe000ed04
 8006ae4:	20000fe4 	.word	0x20000fe4

08006ae8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	60fb      	str	r3, [r7, #12]
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b58 <prvTaskIsTaskSuspended+0x70>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d101      	bne.n	8006b24 <prvTaskIsTaskSuspended+0x3c>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <prvTaskIsTaskSuspended+0x3e>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00f      	beq.n	8006b4a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8006b5c <prvTaskIsTaskSuspended+0x74>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00a      	beq.n	8006b4a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <prvTaskIsTaskSuspended+0x58>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <prvTaskIsTaskSuspended+0x5a>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b4a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000fd0 	.word	0x20000fd0
 8006b5c:	20000fa4 	.word	0x20000fa4

08006b60 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10b      	bne.n	8006b8a <vTaskResume+0x2a>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	60bb      	str	r3, [r7, #8]
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	e7fd      	b.n	8006b86 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d03a      	beq.n	8006c06 <vTaskResume+0xa6>
 8006b90:	4b1f      	ldr	r3, [pc, #124]	@ (8006c10 <vTaskResume+0xb0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d035      	beq.n	8006c06 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8006b9a:	f001 fb97 	bl	80082cc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff ffa2 	bl	8006ae8 <prvTaskIsTaskSuspended>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d02b      	beq.n	8006c02 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fce6 	bl	8005580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb8:	4b16      	ldr	r3, [pc, #88]	@ (8006c14 <vTaskResume+0xb4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d903      	bls.n	8006bc8 <vTaskResume+0x68>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4a13      	ldr	r2, [pc, #76]	@ (8006c14 <vTaskResume+0xb4>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a10      	ldr	r2, [pc, #64]	@ (8006c18 <vTaskResume+0xb8>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fc73 	bl	80054ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be8:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <vTaskResume+0xb0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d307      	bcc.n	8006c02 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c1c <vTaskResume+0xbc>)
 8006bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006c02:	f001 fb93 	bl	800832c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000b10 	.word	0x20000b10
 8006c14:	20000fec 	.word	0x20000fec
 8006c18:	20000b14 	.word	0x20000b14
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	@ 0x28
 8006c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c2e:	463a      	mov	r2, r7
 8006c30:	1d39      	adds	r1, r7, #4
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe f978 	bl	8004f2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	9202      	str	r2, [sp, #8]
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	4924      	ldr	r1, [pc, #144]	@ (8006ce0 <vTaskStartScheduler+0xc0>)
 8006c50:	4824      	ldr	r0, [pc, #144]	@ (8006ce4 <vTaskStartScheduler+0xc4>)
 8006c52:	f7ff fce9 	bl	8006628 <xTaskCreateStatic>
 8006c56:	4603      	mov	r3, r0
 8006c58:	4a23      	ldr	r2, [pc, #140]	@ (8006ce8 <vTaskStartScheduler+0xc8>)
 8006c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c5c:	4b22      	ldr	r3, [pc, #136]	@ (8006ce8 <vTaskStartScheduler+0xc8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e001      	b.n	8006c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d102      	bne.n	8006c7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c74:	f000 fef6 	bl	8007a64 <xTimerCreateTimerTask>
 8006c78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d11b      	bne.n	8006cb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c94:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <vTaskStartScheduler+0xcc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3354      	adds	r3, #84	@ 0x54
 8006c9a:	4a15      	ldr	r2, [pc, #84]	@ (8006cf0 <vTaskStartScheduler+0xd0>)
 8006c9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <vTaskStartScheduler+0xd4>)
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ca6:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <vTaskStartScheduler+0xd8>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006cac:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <vTaskStartScheduler+0xdc>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cb2:	f001 fa99 	bl	80081e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cb6:	e00f      	b.n	8006cd8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d10b      	bne.n	8006cd8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <vTaskStartScheduler+0xb4>
}
 8006cd8:	bf00      	nop
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	0800b6dc 	.word	0x0800b6dc
 8006ce4:	0800749d 	.word	0x0800749d
 8006ce8:	20001008 	.word	0x20001008
 8006cec:	20000b10 	.word	0x20000b10
 8006cf0:	20000020 	.word	0x20000020
 8006cf4:	20001004 	.word	0x20001004
 8006cf8:	20000ff0 	.word	0x20000ff0
 8006cfc:	20000fe8 	.word	0x20000fe8

08006d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <vTaskSuspendAll+0x18>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a03      	ldr	r2, [pc, #12]	@ (8006d18 <vTaskSuspendAll+0x18>)
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	2000100c 	.word	0x2000100c

08006d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d2a:	4b42      	ldr	r3, [pc, #264]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <xTaskResumeAll+0x2e>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	603b      	str	r3, [r7, #0]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d4a:	f001 fabf 	bl	80082cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d4e:	4b39      	ldr	r3, [pc, #228]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	4a37      	ldr	r2, [pc, #220]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d58:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d162      	bne.n	8006e26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d60:	4b35      	ldr	r3, [pc, #212]	@ (8006e38 <xTaskResumeAll+0x11c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d05e      	beq.n	8006e26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d68:	e02f      	b.n	8006dca <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d6a:	4b34      	ldr	r3, [pc, #208]	@ (8006e3c <xTaskResumeAll+0x120>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3318      	adds	r3, #24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fc02 	bl	8005580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fbfd 	bl	8005580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e40 <xTaskResumeAll+0x124>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d903      	bls.n	8006d9a <xTaskResumeAll+0x7e>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	4a2a      	ldr	r2, [pc, #168]	@ (8006e40 <xTaskResumeAll+0x124>)
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4a27      	ldr	r2, [pc, #156]	@ (8006e44 <xTaskResumeAll+0x128>)
 8006da8:	441a      	add	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f7fe fb8a 	bl	80054ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dba:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <xTaskResumeAll+0x12c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d302      	bcc.n	8006dca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006dc4:	4b21      	ldr	r3, [pc, #132]	@ (8006e4c <xTaskResumeAll+0x130>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dca:	4b1c      	ldr	r3, [pc, #112]	@ (8006e3c <xTaskResumeAll+0x120>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1cb      	bne.n	8006d6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dd8:	f000 fc1c 	bl	8007614 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <xTaskResumeAll+0x134>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006de8:	f000 f856 	bl	8006e98 <xTaskIncrementTick>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006df2:	4b16      	ldr	r3, [pc, #88]	@ (8006e4c <xTaskResumeAll+0x130>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f1      	bne.n	8006de8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006e04:	4b12      	ldr	r3, [pc, #72]	@ (8006e50 <xTaskResumeAll+0x134>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e0a:	4b10      	ldr	r3, [pc, #64]	@ (8006e4c <xTaskResumeAll+0x130>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e16:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <xTaskResumeAll+0x138>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e26:	f001 fa81 	bl	800832c <vPortExitCritical>

	return xAlreadyYielded;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	2000100c 	.word	0x2000100c
 8006e38:	20000fe4 	.word	0x20000fe4
 8006e3c:	20000fa4 	.word	0x20000fa4
 8006e40:	20000fec 	.word	0x20000fec
 8006e44:	20000b14 	.word	0x20000b14
 8006e48:	20000b10 	.word	0x20000b10
 8006e4c:	20000ff8 	.word	0x20000ff8
 8006e50:	20000ff4 	.word	0x20000ff4
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e5e:	4b04      	ldr	r3, [pc, #16]	@ (8006e70 <xTaskGetTickCount+0x18>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e64:	687b      	ldr	r3, [r7, #4]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	20000fe8 	.word	0x20000fe8

08006e74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e7a:	f001 fae9 	bl	8008450 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e82:	4b04      	ldr	r3, [pc, #16]	@ (8006e94 <xTaskGetTickCountFromISR+0x20>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e88:	683b      	ldr	r3, [r7, #0]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000fe8 	.word	0x20000fe8

08006e98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea2:	4b52      	ldr	r3, [pc, #328]	@ (8006fec <xTaskIncrementTick+0x154>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f040 808f 	bne.w	8006fca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006eac:	4b50      	ldr	r3, [pc, #320]	@ (8006ff0 <xTaskIncrementTick+0x158>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8006ff0 <xTaskIncrementTick+0x158>)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d121      	bne.n	8006f04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8006ff4 <xTaskIncrementTick+0x15c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00b      	beq.n	8006ee2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	603b      	str	r3, [r7, #0]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <xTaskIncrementTick+0x46>
 8006ee2:	4b44      	ldr	r3, [pc, #272]	@ (8006ff4 <xTaskIncrementTick+0x15c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	4b43      	ldr	r3, [pc, #268]	@ (8006ff8 <xTaskIncrementTick+0x160>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a41      	ldr	r2, [pc, #260]	@ (8006ff4 <xTaskIncrementTick+0x15c>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	4a41      	ldr	r2, [pc, #260]	@ (8006ff8 <xTaskIncrementTick+0x160>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	4b41      	ldr	r3, [pc, #260]	@ (8006ffc <xTaskIncrementTick+0x164>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	4a3f      	ldr	r2, [pc, #252]	@ (8006ffc <xTaskIncrementTick+0x164>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	f000 fb88 	bl	8007614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f04:	4b3e      	ldr	r3, [pc, #248]	@ (8007000 <xTaskIncrementTick+0x168>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d34e      	bcc.n	8006fac <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f0e:	4b39      	ldr	r3, [pc, #228]	@ (8006ff4 <xTaskIncrementTick+0x15c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <xTaskIncrementTick+0x84>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <xTaskIncrementTick+0x86>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f22:	4b37      	ldr	r3, [pc, #220]	@ (8007000 <xTaskIncrementTick+0x168>)
 8006f24:	f04f 32ff 	mov.w	r2, #4294967295
 8006f28:	601a      	str	r2, [r3, #0]
					break;
 8006f2a:	e03f      	b.n	8006fac <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f2c:	4b31      	ldr	r3, [pc, #196]	@ (8006ff4 <xTaskIncrementTick+0x15c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d203      	bcs.n	8006f4c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f44:	4a2e      	ldr	r2, [pc, #184]	@ (8007000 <xTaskIncrementTick+0x168>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6013      	str	r3, [r2, #0]
						break;
 8006f4a:	e02f      	b.n	8006fac <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fb15 	bl	8005580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3318      	adds	r3, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fb0c 	bl	8005580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6c:	4b25      	ldr	r3, [pc, #148]	@ (8007004 <xTaskIncrementTick+0x16c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d903      	bls.n	8006f7c <xTaskIncrementTick+0xe4>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	4a22      	ldr	r2, [pc, #136]	@ (8007004 <xTaskIncrementTick+0x16c>)
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4a1f      	ldr	r2, [pc, #124]	@ (8007008 <xTaskIncrementTick+0x170>)
 8006f8a:	441a      	add	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4619      	mov	r1, r3
 8006f92:	4610      	mov	r0, r2
 8006f94:	f7fe fa99 	bl	80054ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800700c <xTaskIncrementTick+0x174>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3b3      	bcc.n	8006f0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006faa:	e7b0      	b.n	8006f0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fac:	4b17      	ldr	r3, [pc, #92]	@ (800700c <xTaskIncrementTick+0x174>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb2:	4915      	ldr	r1, [pc, #84]	@ (8007008 <xTaskIncrementTick+0x170>)
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d907      	bls.n	8006fd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e004      	b.n	8006fd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fca:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <xTaskIncrementTick+0x178>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8007010 <xTaskIncrementTick+0x178>)
 8006fd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007014 <xTaskIncrementTick+0x17c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006fe0:	697b      	ldr	r3, [r7, #20]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	2000100c 	.word	0x2000100c
 8006ff0:	20000fe8 	.word	0x20000fe8
 8006ff4:	20000f9c 	.word	0x20000f9c
 8006ff8:	20000fa0 	.word	0x20000fa0
 8006ffc:	20000ffc 	.word	0x20000ffc
 8007000:	20001004 	.word	0x20001004
 8007004:	20000fec 	.word	0x20000fec
 8007008:	20000b14 	.word	0x20000b14
 800700c:	20000b10 	.word	0x20000b10
 8007010:	20000ff4 	.word	0x20000ff4
 8007014:	20000ff8 	.word	0x20000ff8

08007018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800701e:	4b2a      	ldr	r3, [pc, #168]	@ (80070c8 <vTaskSwitchContext+0xb0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007026:	4b29      	ldr	r3, [pc, #164]	@ (80070cc <vTaskSwitchContext+0xb4>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800702c:	e047      	b.n	80070be <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800702e:	4b27      	ldr	r3, [pc, #156]	@ (80070cc <vTaskSwitchContext+0xb4>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007034:	4b26      	ldr	r3, [pc, #152]	@ (80070d0 <vTaskSwitchContext+0xb8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e011      	b.n	8007060 <vTaskSwitchContext+0x48>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <vTaskSwitchContext+0x42>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	607b      	str	r3, [r7, #4]
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	e7fd      	b.n	8007056 <vTaskSwitchContext+0x3e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3b01      	subs	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	491c      	ldr	r1, [pc, #112]	@ (80070d4 <vTaskSwitchContext+0xbc>)
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0e3      	beq.n	800703c <vTaskSwitchContext+0x24>
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a15      	ldr	r2, [pc, #84]	@ (80070d4 <vTaskSwitchContext+0xbc>)
 8007080:	4413      	add	r3, r2
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3308      	adds	r3, #8
 8007096:	429a      	cmp	r2, r3
 8007098:	d104      	bne.n	80070a4 <vTaskSwitchContext+0x8c>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	4a0b      	ldr	r2, [pc, #44]	@ (80070d8 <vTaskSwitchContext+0xc0>)
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	4a08      	ldr	r2, [pc, #32]	@ (80070d0 <vTaskSwitchContext+0xb8>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070b4:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <vTaskSwitchContext+0xc0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3354      	adds	r3, #84	@ 0x54
 80070ba:	4a08      	ldr	r2, [pc, #32]	@ (80070dc <vTaskSwitchContext+0xc4>)
 80070bc:	6013      	str	r3, [r2, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	2000100c 	.word	0x2000100c
 80070cc:	20000ff8 	.word	0x20000ff8
 80070d0:	20000fec 	.word	0x20000fec
 80070d4:	20000b14 	.word	0x20000b14
 80070d8:	20000b10 	.word	0x20000b10
 80070dc:	20000020 	.word	0x20000020

080070e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007108:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <vTaskPlaceOnEventList+0x48>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3318      	adds	r3, #24
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fe f9fd 	bl	8005510 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007116:	2101      	movs	r1, #1
 8007118:	6838      	ldr	r0, [r7, #0]
 800711a:	f000 fc4f 	bl	80079bc <prvAddCurrentTaskToDelayedList>
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000b10 	.word	0x20000b10

0800712c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007156:	4b12      	ldr	r3, [pc, #72]	@ (80071a0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	613b      	str	r3, [r7, #16]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007176:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007180:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007182:	4b08      	ldr	r3, [pc, #32]	@ (80071a4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3318      	adds	r3, #24
 8007188:	4619      	mov	r1, r3
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f7fe f99d 	bl	80054ca <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007190:	2101      	movs	r1, #1
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fc12 	bl	80079bc <prvAddCurrentTaskToDelayedList>
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	2000100c 	.word	0x2000100c
 80071a4:	20000b10 	.word	0x20000b10

080071a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	617b      	str	r3, [r7, #20]
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071d2:	4b0a      	ldr	r3, [pc, #40]	@ (80071fc <vTaskPlaceOnEventListRestricted+0x54>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7fe f975 	bl	80054ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80071e6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	68b8      	ldr	r0, [r7, #8]
 80071f0:	f000 fbe4 	bl	80079bc <prvAddCurrentTaskToDelayedList>
	}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000b10 	.word	0x20000b10

08007200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3318      	adds	r3, #24
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe f9a4 	bl	8005580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007238:	4b1d      	ldr	r3, [pc, #116]	@ (80072b0 <xTaskRemoveFromEventList+0xb0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d11d      	bne.n	800727c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe f99b 	bl	8005580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724e:	4b19      	ldr	r3, [pc, #100]	@ (80072b4 <xTaskRemoveFromEventList+0xb4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d903      	bls.n	800725e <xTaskRemoveFromEventList+0x5e>
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725a:	4a16      	ldr	r2, [pc, #88]	@ (80072b4 <xTaskRemoveFromEventList+0xb4>)
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4a13      	ldr	r2, [pc, #76]	@ (80072b8 <xTaskRemoveFromEventList+0xb8>)
 800726c:	441a      	add	r2, r3
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7fe f928 	bl	80054ca <vListInsertEnd>
 800727a:	e005      	b.n	8007288 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	3318      	adds	r3, #24
 8007280:	4619      	mov	r1, r3
 8007282:	480e      	ldr	r0, [pc, #56]	@ (80072bc <xTaskRemoveFromEventList+0xbc>)
 8007284:	f7fe f921 	bl	80054ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728c:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <xTaskRemoveFromEventList+0xc0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	429a      	cmp	r2, r3
 8007294:	d905      	bls.n	80072a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800729a:	4b0a      	ldr	r3, [pc, #40]	@ (80072c4 <xTaskRemoveFromEventList+0xc4>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e001      	b.n	80072a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80072a6:	697b      	ldr	r3, [r7, #20]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	2000100c 	.word	0x2000100c
 80072b4:	20000fec 	.word	0x20000fec
 80072b8:	20000b14 	.word	0x20000b14
 80072bc:	20000fa4 	.word	0x20000fa4
 80072c0:	20000b10 	.word	0x20000b10
 80072c4:	20000ff8 	.word	0x20000ff8

080072c8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80072d2:	4b2a      	ldr	r3, [pc, #168]	@ (800737c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10b      	bne.n	80072f2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	613b      	str	r3, [r7, #16]
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	e7fd      	b.n	80072ee <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fe f92d 	bl	8005580 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	3304      	adds	r3, #4
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe f928 	bl	8005580 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	4b12      	ldr	r3, [pc, #72]	@ (8007380 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d903      	bls.n	8007344 <vTaskRemoveFromUnorderedEventList+0x7c>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	4a0f      	ldr	r2, [pc, #60]	@ (8007380 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4a0c      	ldr	r2, [pc, #48]	@ (8007384 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007352:	441a      	add	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7fe f8b5 	bl	80054ca <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007364:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	429a      	cmp	r2, r3
 800736c:	d902      	bls.n	8007374 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800736e:	4b07      	ldr	r3, [pc, #28]	@ (800738c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007370:	2201      	movs	r2, #1
 8007372:	601a      	str	r2, [r3, #0]
	}
}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	2000100c 	.word	0x2000100c
 8007380:	20000fec 	.word	0x20000fec
 8007384:	20000b14 	.word	0x20000b14
 8007388:	20000b10 	.word	0x20000b10
 800738c:	20000ff8 	.word	0x20000ff8

08007390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007398:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <vTaskInternalSetTimeOutState+0x24>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <vTaskInternalSetTimeOutState+0x28>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000ffc 	.word	0x20000ffc
 80073b8:	20000fe8 	.word	0x20000fe8

080073bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	613b      	str	r3, [r7, #16]
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	60fb      	str	r3, [r7, #12]
}
 80073fc:	bf00      	nop
 80073fe:	bf00      	nop
 8007400:	e7fd      	b.n	80073fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007402:	f000 ff63 	bl	80082cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007406:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <xTaskCheckForTimeOut+0xc0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d102      	bne.n	8007426 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007420:	2300      	movs	r3, #0
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	e023      	b.n	800746e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	4b15      	ldr	r3, [pc, #84]	@ (8007480 <xTaskCheckForTimeOut+0xc4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d007      	beq.n	8007442 <xTaskCheckForTimeOut+0x86>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	e015      	b.n	800746e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	429a      	cmp	r2, r3
 800744a:	d20b      	bcs.n	8007464 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	1ad2      	subs	r2, r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff99 	bl	8007390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	e004      	b.n	800746e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800746a:	2301      	movs	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800746e:	f000 ff5d 	bl	800832c <vPortExitCritical>

	return xReturn;
 8007472:	69fb      	ldr	r3, [r7, #28]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3720      	adds	r7, #32
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000fe8 	.word	0x20000fe8
 8007480:	20000ffc 	.word	0x20000ffc

08007484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007488:	4b03      	ldr	r3, [pc, #12]	@ (8007498 <vTaskMissedYield+0x14>)
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000ff8 	.word	0x20000ff8

0800749c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a4:	f000 f852 	bl	800754c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074a8:	4b06      	ldr	r3, [pc, #24]	@ (80074c4 <prvIdleTask+0x28>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d9f9      	bls.n	80074a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b0:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <prvIdleTask+0x2c>)
 80074b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c0:	e7f0      	b.n	80074a4 <prvIdleTask+0x8>
 80074c2:	bf00      	nop
 80074c4:	20000b14 	.word	0x20000b14
 80074c8:	e000ed04 	.word	0xe000ed04

080074cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e00c      	b.n	80074f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a12      	ldr	r2, [pc, #72]	@ (800752c <prvInitialiseTaskLists+0x60>)
 80074e4:	4413      	add	r3, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fd ffc4 	bl	8005474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3301      	adds	r3, #1
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b37      	cmp	r3, #55	@ 0x37
 80074f6:	d9ef      	bls.n	80074d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074f8:	480d      	ldr	r0, [pc, #52]	@ (8007530 <prvInitialiseTaskLists+0x64>)
 80074fa:	f7fd ffbb 	bl	8005474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074fe:	480d      	ldr	r0, [pc, #52]	@ (8007534 <prvInitialiseTaskLists+0x68>)
 8007500:	f7fd ffb8 	bl	8005474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007504:	480c      	ldr	r0, [pc, #48]	@ (8007538 <prvInitialiseTaskLists+0x6c>)
 8007506:	f7fd ffb5 	bl	8005474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800750a:	480c      	ldr	r0, [pc, #48]	@ (800753c <prvInitialiseTaskLists+0x70>)
 800750c:	f7fd ffb2 	bl	8005474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007510:	480b      	ldr	r0, [pc, #44]	@ (8007540 <prvInitialiseTaskLists+0x74>)
 8007512:	f7fd ffaf 	bl	8005474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007516:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <prvInitialiseTaskLists+0x78>)
 8007518:	4a05      	ldr	r2, [pc, #20]	@ (8007530 <prvInitialiseTaskLists+0x64>)
 800751a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800751c:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <prvInitialiseTaskLists+0x7c>)
 800751e:	4a05      	ldr	r2, [pc, #20]	@ (8007534 <prvInitialiseTaskLists+0x68>)
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000b14 	.word	0x20000b14
 8007530:	20000f74 	.word	0x20000f74
 8007534:	20000f88 	.word	0x20000f88
 8007538:	20000fa4 	.word	0x20000fa4
 800753c:	20000fb8 	.word	0x20000fb8
 8007540:	20000fd0 	.word	0x20000fd0
 8007544:	20000f9c 	.word	0x20000f9c
 8007548:	20000fa0 	.word	0x20000fa0

0800754c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007552:	e019      	b.n	8007588 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007554:	f000 feba 	bl	80082cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007558:	4b10      	ldr	r3, [pc, #64]	@ (800759c <prvCheckTasksWaitingTermination+0x50>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe f80b 	bl	8005580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800756a:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <prvCheckTasksWaitingTermination+0x54>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a0b      	ldr	r2, [pc, #44]	@ (80075a0 <prvCheckTasksWaitingTermination+0x54>)
 8007572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007574:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3b01      	subs	r3, #1
 800757a:	4a0a      	ldr	r2, [pc, #40]	@ (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 800757c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800757e:	f000 fed5 	bl	800832c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f810 	bl	80075a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007588:	4b06      	ldr	r3, [pc, #24]	@ (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e1      	bne.n	8007554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000fb8 	.word	0x20000fb8
 80075a0:	20000fe4 	.word	0x20000fe4
 80075a4:	20000fcc 	.word	0x20000fcc

080075a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3354      	adds	r3, #84	@ 0x54
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 ff07 	bl	80093c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d108      	bne.n	80075d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 f849 	bl	8008660 <vPortFree>
				vPortFree( pxTCB );
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 f846 	bl	8008660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d4:	e019      	b.n	800760a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d103      	bne.n	80075e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f83d 	bl	8008660 <vPortFree>
	}
 80075e6:	e010      	b.n	800760a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d00b      	beq.n	800760a <prvDeleteTCB+0x62>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60fb      	str	r3, [r7, #12]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <prvDeleteTCB+0x5e>
	}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761a:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <prvResetNextTaskUnblockTime+0x40>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <prvResetNextTaskUnblockTime+0x14>
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <prvResetNextTaskUnblockTime+0x16>
 8007628:	2300      	movs	r3, #0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800762e:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <prvResetNextTaskUnblockTime+0x44>)
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007636:	e008      	b.n	800764a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007638:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <prvResetNextTaskUnblockTime+0x40>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4a04      	ldr	r2, [pc, #16]	@ (8007658 <prvResetNextTaskUnblockTime+0x44>)
 8007648:	6013      	str	r3, [r2, #0]
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	20000f9c 	.word	0x20000f9c
 8007658:	20001004 	.word	0x20001004

0800765c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007662:	4b0b      	ldr	r3, [pc, #44]	@ (8007690 <xTaskGetSchedulerState+0x34>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800766a:	2301      	movs	r3, #1
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	e008      	b.n	8007682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007670:	4b08      	ldr	r3, [pc, #32]	@ (8007694 <xTaskGetSchedulerState+0x38>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007678:	2302      	movs	r3, #2
 800767a:	607b      	str	r3, [r7, #4]
 800767c:	e001      	b.n	8007682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800767e:	2300      	movs	r3, #0
 8007680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007682:	687b      	ldr	r3, [r7, #4]
	}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20000ff0 	.word	0x20000ff0
 8007694:	2000100c 	.word	0x2000100c

08007698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d056      	beq.n	800775c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007768 <xTaskPriorityInherit+0xd0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d246      	bcs.n	800774a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db06      	blt.n	80076d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c4:	4b28      	ldr	r3, [pc, #160]	@ (8007768 <xTaskPriorityInherit+0xd0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6959      	ldr	r1, [r3, #20]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4a22      	ldr	r2, [pc, #136]	@ (800776c <xTaskPriorityInherit+0xd4>)
 80076e4:	4413      	add	r3, r2
 80076e6:	4299      	cmp	r1, r3
 80076e8:	d101      	bne.n	80076ee <xTaskPriorityInherit+0x56>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <xTaskPriorityInherit+0x58>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d022      	beq.n	800773a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fd ff41 	bl	8005580 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007768 <xTaskPriorityInherit+0xd0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770c:	4b18      	ldr	r3, [pc, #96]	@ (8007770 <xTaskPriorityInherit+0xd8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d903      	bls.n	800771c <xTaskPriorityInherit+0x84>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	4a15      	ldr	r2, [pc, #84]	@ (8007770 <xTaskPriorityInherit+0xd8>)
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4a10      	ldr	r2, [pc, #64]	@ (800776c <xTaskPriorityInherit+0xd4>)
 800772a:	441a      	add	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7fd fec9 	bl	80054ca <vListInsertEnd>
 8007738:	e004      	b.n	8007744 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800773a:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <xTaskPriorityInherit+0xd0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e008      	b.n	800775c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800774e:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <xTaskPriorityInherit+0xd0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	429a      	cmp	r2, r3
 8007756:	d201      	bcs.n	800775c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007758:	2301      	movs	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800775c:	68fb      	ldr	r3, [r7, #12]
	}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000b10 	.word	0x20000b10
 800776c:	20000b14 	.word	0x20000b14
 8007770:	20000fec 	.word	0x20000fec

08007774 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d058      	beq.n	800783c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800778a:	4b2f      	ldr	r3, [pc, #188]	@ (8007848 <xTaskPriorityDisinherit+0xd4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	429a      	cmp	r2, r3
 8007792:	d00b      	beq.n	80077ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10b      	bne.n	80077cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	60bb      	str	r3, [r7, #8]
}
 80077c6:	bf00      	nop
 80077c8:	bf00      	nop
 80077ca:	e7fd      	b.n	80077c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d0:	1e5a      	subs	r2, r3, #1
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077de:	429a      	cmp	r2, r3
 80077e0:	d02c      	beq.n	800783c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d128      	bne.n	800783c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3304      	adds	r3, #4
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd fec6 	bl	8005580 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <xTaskPriorityDisinherit+0xd8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d903      	bls.n	800781c <xTaskPriorityDisinherit+0xa8>
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	4a0c      	ldr	r2, [pc, #48]	@ (800784c <xTaskPriorityDisinherit+0xd8>)
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4a09      	ldr	r2, [pc, #36]	@ (8007850 <xTaskPriorityDisinherit+0xdc>)
 800782a:	441a      	add	r2, r3
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7fd fe49 	bl	80054ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800783c:	697b      	ldr	r3, [r7, #20]
	}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000b10 	.word	0x20000b10
 800784c:	20000fec 	.word	0x20000fec
 8007850:	20000b14 	.word	0x20000b14

08007854 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007862:	2301      	movs	r3, #1
 8007864:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d071      	beq.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60fb      	str	r3, [r7, #12]
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d902      	bls.n	800789c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e002      	b.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d051      	beq.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d14c      	bne.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078b6:	4b28      	ldr	r3, [pc, #160]	@ (8007958 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d10b      	bne.n	80078d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60bb      	str	r3, [r7, #8]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	db04      	blt.n	80078f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	6959      	ldr	r1, [r3, #20]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4a15      	ldr	r2, [pc, #84]	@ (800795c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007906:	4413      	add	r3, r2
 8007908:	4299      	cmp	r1, r3
 800790a:	d101      	bne.n	8007910 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01c      	beq.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	3304      	adds	r3, #4
 800791a:	4618      	mov	r0, r3
 800791c:	f7fd fe30 	bl	8005580 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	4b0e      	ldr	r3, [pc, #56]	@ (8007960 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d903      	bls.n	8007934 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	4a0b      	ldr	r2, [pc, #44]	@ (8007960 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4a06      	ldr	r2, [pc, #24]	@ (800795c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007942:	441a      	add	r2, r3
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7fd fdbd 	bl	80054ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007950:	bf00      	nop
 8007952:	3720      	adds	r7, #32
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000b10 	.word	0x20000b10
 800795c:	20000b14 	.word	0x20000b14
 8007960:	20000fec 	.word	0x20000fec

08007964 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <uxTaskResetEventItemValue+0x2c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <uxTaskResetEventItemValue+0x2c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <uxTaskResetEventItemValue+0x2c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8007980:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007982:	687b      	ldr	r3, [r7, #4]
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20000b10 	.word	0x20000b10

08007994 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007998:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079a0:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079a6:	3201      	adds	r2, #1
 80079a8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80079aa:	4b03      	ldr	r3, [pc, #12]	@ (80079b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079ac:	681b      	ldr	r3, [r3, #0]
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bc80      	pop	{r7}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20000b10 	.word	0x20000b10

080079bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079c6:	4b21      	ldr	r3, [pc, #132]	@ (8007a4c <prvAddCurrentTaskToDelayedList+0x90>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079cc:	4b20      	ldr	r3, [pc, #128]	@ (8007a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fd fdd4 	bl	8005580 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079de:	d10a      	bne.n	80079f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d007      	beq.n	80079f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4819      	ldr	r0, [pc, #100]	@ (8007a54 <prvAddCurrentTaskToDelayedList+0x98>)
 80079f0:	f7fd fd6b 	bl	80054ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079f4:	e026      	b.n	8007a44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079fe:	4b14      	ldr	r3, [pc, #80]	@ (8007a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d209      	bcs.n	8007a22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a0e:	4b12      	ldr	r3, [pc, #72]	@ (8007a58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b0f      	ldr	r3, [pc, #60]	@ (8007a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fd fd78 	bl	8005510 <vListInsert>
}
 8007a20:	e010      	b.n	8007a44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a22:	4b0e      	ldr	r3, [pc, #56]	@ (8007a5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b0a      	ldr	r3, [pc, #40]	@ (8007a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fd fd6e 	bl	8005510 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a34:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d202      	bcs.n	8007a44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a3e:	4a08      	ldr	r2, [pc, #32]	@ (8007a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000fe8 	.word	0x20000fe8
 8007a50:	20000b10 	.word	0x20000b10
 8007a54:	20000fd0 	.word	0x20000fd0
 8007a58:	20000fa0 	.word	0x20000fa0
 8007a5c:	20000f9c 	.word	0x20000f9c
 8007a60:	20001004 	.word	0x20001004

08007a64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	@ 0x28
 8007a68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a6e:	f000 fad9 	bl	8008024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a72:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae8 <xTimerCreateTimerTask+0x84>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d021      	beq.n	8007abe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a82:	1d3a      	adds	r2, r7, #4
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	f107 030c 	add.w	r3, r7, #12
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd fa65 	bl	8004f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	9202      	str	r2, [sp, #8]
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	4911      	ldr	r1, [pc, #68]	@ (8007aec <xTimerCreateTimerTask+0x88>)
 8007aa6:	4812      	ldr	r0, [pc, #72]	@ (8007af0 <xTimerCreateTimerTask+0x8c>)
 8007aa8:	f7fe fdbe 	bl	8006628 <xTaskCreateStatic>
 8007aac:	4603      	mov	r3, r0
 8007aae:	4a11      	ldr	r2, [pc, #68]	@ (8007af4 <xTimerCreateTimerTask+0x90>)
 8007ab0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ab2:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <xTimerCreateTimerTask+0x90>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007aba:	2301      	movs	r3, #1
 8007abc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10b      	bne.n	8007adc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	613b      	str	r3, [r7, #16]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007adc:	697b      	ldr	r3, [r7, #20]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20001040 	.word	0x20001040
 8007aec:	0800b6e4 	.word	0x0800b6e4
 8007af0:	08007c19 	.word	0x08007c19
 8007af4:	20001044 	.word	0x20001044

08007af8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	@ 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <xTimerGenericCommand+0x30>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	623b      	str	r3, [r7, #32]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b28:	4b19      	ldr	r3, [pc, #100]	@ (8007b90 <xTimerGenericCommand+0x98>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d02a      	beq.n	8007b86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	dc18      	bgt.n	8007b74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b42:	f7ff fd8b 	bl	800765c <xTaskGetSchedulerState>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d109      	bne.n	8007b60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b4c:	4b10      	ldr	r3, [pc, #64]	@ (8007b90 <xTimerGenericCommand+0x98>)
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	f107 0110 	add.w	r1, r7, #16
 8007b54:	2300      	movs	r3, #0
 8007b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b58:	f7fd fef2 	bl	8005940 <xQueueGenericSend>
 8007b5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b5e:	e012      	b.n	8007b86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b60:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <xTimerGenericCommand+0x98>)
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	f107 0110 	add.w	r1, r7, #16
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f7fd fee8 	bl	8005940 <xQueueGenericSend>
 8007b70:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b72:	e008      	b.n	8007b86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b74:	4b06      	ldr	r3, [pc, #24]	@ (8007b90 <xTimerGenericCommand+0x98>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	f107 0110 	add.w	r1, r7, #16
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	f7fd ffe0 	bl	8005b44 <xQueueGenericSendFromISR>
 8007b84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3728      	adds	r7, #40	@ 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20001040 	.word	0x20001040

08007b94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c14 <prvProcessExpiredTimer+0x80>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fd fce7 	bl	8005580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d123      	bne.n	8007c02 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	18d1      	adds	r1, r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f000 f8cc 	bl	8007d64 <prvInsertTimerInActiveList>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	2100      	movs	r1, #0
 8007bdc:	6978      	ldr	r0, [r7, #20]
 8007bde:	f7ff ff8b 	bl	8007af8 <xTimerGenericCommand>
 8007be2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10b      	bne.n	8007c02 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	4798      	blx	r3
}
 8007c0a:	bf00      	nop
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20001038 	.word	0x20001038

08007c18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c20:	f107 0308 	add.w	r3, r7, #8
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f859 	bl	8007cdc <prvGetNextExpireTime>
 8007c2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f805 	bl	8007c40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c36:	f000 f8d7 	bl	8007de8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c3a:	bf00      	nop
 8007c3c:	e7f0      	b.n	8007c20 <prvTimerTask+0x8>
	...

08007c40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c4a:	f7ff f859 	bl	8006d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c4e:	f107 0308 	add.w	r3, r7, #8
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f866 	bl	8007d24 <prvSampleTimeNow>
 8007c58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d130      	bne.n	8007cc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <prvProcessTimerOrBlockTask+0x3c>
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d806      	bhi.n	8007c7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c6e:	f7ff f855 	bl	8006d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ff8d 	bl	8007b94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c7a:	e024      	b.n	8007cc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d008      	beq.n	8007c94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c82:	4b13      	ldr	r3, [pc, #76]	@ (8007cd0 <prvProcessTimerOrBlockTask+0x90>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2301      	moveq	r3, #1
 8007c8e:	2300      	movne	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c94:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <prvProcessTimerOrBlockTask+0x94>)
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f7fe fc8d 	bl	80065c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ca6:	f7ff f839 	bl	8006d1c <xTaskResumeAll>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cb0:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <prvProcessTimerOrBlockTask+0x98>)
 8007cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
}
 8007cc0:	e001      	b.n	8007cc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cc2:	f7ff f82b 	bl	8006d1c <xTaskResumeAll>
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	2000103c 	.word	0x2000103c
 8007cd4:	20001040 	.word	0x20001040
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d20 <prvGetNextExpireTime+0x44>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bf0c      	ite	eq
 8007cee:	2301      	moveq	r3, #1
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d02:	4b07      	ldr	r3, [pc, #28]	@ (8007d20 <prvGetNextExpireTime+0x44>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e001      	b.n	8007d12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d12:	68fb      	ldr	r3, [r7, #12]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20001038 	.word	0x20001038

08007d24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d2c:	f7ff f894 	bl	8006e58 <xTaskGetTickCount>
 8007d30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d32:	4b0b      	ldr	r3, [pc, #44]	@ (8007d60 <prvSampleTimeNow+0x3c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d205      	bcs.n	8007d48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d3c:	f000 f910 	bl	8007f60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e002      	b.n	8007d4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d4e:	4a04      	ldr	r2, [pc, #16]	@ (8007d60 <prvSampleTimeNow+0x3c>)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d54:	68fb      	ldr	r3, [r7, #12]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20001048 	.word	0x20001048

08007d64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d812      	bhi.n	8007db0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d302      	bcc.n	8007d9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e01b      	b.n	8007dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d9e:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <prvInsertTimerInActiveList+0x7c>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f7fd fbb1 	bl	8005510 <vListInsert>
 8007dae:	e012      	b.n	8007dd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d206      	bcs.n	8007dc6 <prvInsertTimerInActiveList+0x62>
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d302      	bcc.n	8007dc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	e007      	b.n	8007dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dc6:	4b07      	ldr	r3, [pc, #28]	@ (8007de4 <prvInsertTimerInActiveList+0x80>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7fd fb9d 	bl	8005510 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dd6:	697b      	ldr	r3, [r7, #20]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2000103c 	.word	0x2000103c
 8007de4:	20001038 	.word	0x20001038

08007de8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08e      	sub	sp, #56	@ 0x38
 8007dec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dee:	e0a5      	b.n	8007f3c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	da19      	bge.n	8007e2a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007df6:	1d3b      	adds	r3, r7, #4
 8007df8:	3304      	adds	r3, #4
 8007dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	61fb      	str	r3, [r7, #28]
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e20:	6850      	ldr	r0, [r2, #4]
 8007e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e24:	6892      	ldr	r2, [r2, #8]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f2c0 8085 	blt.w	8007f3c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	3304      	adds	r3, #4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd fb9c 	bl	8005580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e48:	463b      	mov	r3, r7
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff ff6a 	bl	8007d24 <prvSampleTimeNow>
 8007e50:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b09      	cmp	r3, #9
 8007e56:	d86c      	bhi.n	8007f32 <prvProcessReceivedCommands+0x14a>
 8007e58:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <prvProcessReceivedCommands+0x78>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e89 	.word	0x08007e89
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007e89 	.word	0x08007e89
 8007e6c:	08007f33 	.word	0x08007f33
 8007e70:	08007ee7 	.word	0x08007ee7
 8007e74:	08007f21 	.word	0x08007f21
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	08007e89 	.word	0x08007e89
 8007e80:	08007f33 	.word	0x08007f33
 8007e84:	08007ee7 	.word	0x08007ee7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	18d1      	adds	r1, r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e96:	f7ff ff65 	bl	8007d64 <prvInsertTimerInActiveList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d04a      	beq.n	8007f36 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ea6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d142      	bne.n	8007f36 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	441a      	add	r2, r3
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ec2:	f7ff fe19 	bl	8007af8 <xTimerGenericCommand>
 8007ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d133      	bne.n	8007f36 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61bb      	str	r3, [r7, #24]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	617b      	str	r3, [r7, #20]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	18d1      	adds	r1, r2, r3
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f1a:	f7ff ff23 	bl	8007d64 <prvInsertTimerInActiveList>
					break;
 8007f1e:	e00d      	b.n	8007f3c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d107      	bne.n	8007f3a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f2c:	f000 fb98 	bl	8008660 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f30:	e003      	b.n	8007f3a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <prvProcessReceivedCommands+0x154>
					break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <prvProcessReceivedCommands+0x154>
					break;
 8007f3a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f3c:	4b07      	ldr	r3, [pc, #28]	@ (8007f5c <prvProcessReceivedCommands+0x174>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	1d39      	adds	r1, r7, #4
 8007f42:	2200      	movs	r2, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fd ff29 	bl	8005d9c <xQueueReceive>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f47f af4f 	bne.w	8007df0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	3730      	adds	r7, #48	@ 0x30
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20001040 	.word	0x20001040

08007f60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f66:	e046      	b.n	8007ff6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f68:	4b2c      	ldr	r3, [pc, #176]	@ (800801c <prvSwitchTimerLists+0xbc>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f72:	4b2a      	ldr	r3, [pc, #168]	@ (800801c <prvSwitchTimerLists+0xbc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fd fafd 	bl	8005580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d12f      	bne.n	8007ff6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d90e      	bls.n	8007fc6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fb4:	4b19      	ldr	r3, [pc, #100]	@ (800801c <prvSwitchTimerLists+0xbc>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fd faa6 	bl	8005510 <vListInsert>
 8007fc4:	e017      	b.n	8007ff6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	2100      	movs	r1, #0
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fd91 	bl	8007af8 <xTimerGenericCommand>
 8007fd6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <prvSwitchTimerLists+0x96>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	603b      	str	r3, [r7, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	e7fd      	b.n	8007ff2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ff6:	4b09      	ldr	r3, [pc, #36]	@ (800801c <prvSwitchTimerLists+0xbc>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1b3      	bne.n	8007f68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008000:	4b06      	ldr	r3, [pc, #24]	@ (800801c <prvSwitchTimerLists+0xbc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008006:	4b06      	ldr	r3, [pc, #24]	@ (8008020 <prvSwitchTimerLists+0xc0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a04      	ldr	r2, [pc, #16]	@ (800801c <prvSwitchTimerLists+0xbc>)
 800800c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800800e:	4a04      	ldr	r2, [pc, #16]	@ (8008020 <prvSwitchTimerLists+0xc0>)
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	6013      	str	r3, [r2, #0]
}
 8008014:	bf00      	nop
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20001038 	.word	0x20001038
 8008020:	2000103c 	.word	0x2000103c

08008024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800802a:	f000 f94f 	bl	80082cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800802e:	4b15      	ldr	r3, [pc, #84]	@ (8008084 <prvCheckForValidListAndQueue+0x60>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d120      	bne.n	8008078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008036:	4814      	ldr	r0, [pc, #80]	@ (8008088 <prvCheckForValidListAndQueue+0x64>)
 8008038:	f7fd fa1c 	bl	8005474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800803c:	4813      	ldr	r0, [pc, #76]	@ (800808c <prvCheckForValidListAndQueue+0x68>)
 800803e:	f7fd fa19 	bl	8005474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008042:	4b13      	ldr	r3, [pc, #76]	@ (8008090 <prvCheckForValidListAndQueue+0x6c>)
 8008044:	4a10      	ldr	r2, [pc, #64]	@ (8008088 <prvCheckForValidListAndQueue+0x64>)
 8008046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008048:	4b12      	ldr	r3, [pc, #72]	@ (8008094 <prvCheckForValidListAndQueue+0x70>)
 800804a:	4a10      	ldr	r2, [pc, #64]	@ (800808c <prvCheckForValidListAndQueue+0x68>)
 800804c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800804e:	2300      	movs	r3, #0
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4b11      	ldr	r3, [pc, #68]	@ (8008098 <prvCheckForValidListAndQueue+0x74>)
 8008054:	4a11      	ldr	r2, [pc, #68]	@ (800809c <prvCheckForValidListAndQueue+0x78>)
 8008056:	2110      	movs	r1, #16
 8008058:	200a      	movs	r0, #10
 800805a:	f7fd fb25 	bl	80056a8 <xQueueGenericCreateStatic>
 800805e:	4603      	mov	r3, r0
 8008060:	4a08      	ldr	r2, [pc, #32]	@ (8008084 <prvCheckForValidListAndQueue+0x60>)
 8008062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008064:	4b07      	ldr	r3, [pc, #28]	@ (8008084 <prvCheckForValidListAndQueue+0x60>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800806c:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <prvCheckForValidListAndQueue+0x60>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	490b      	ldr	r1, [pc, #44]	@ (80080a0 <prvCheckForValidListAndQueue+0x7c>)
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fa52 	bl	800651c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008078:	f000 f958 	bl	800832c <vPortExitCritical>
}
 800807c:	bf00      	nop
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20001040 	.word	0x20001040
 8008088:	20001010 	.word	0x20001010
 800808c:	20001024 	.word	0x20001024
 8008090:	20001038 	.word	0x20001038
 8008094:	2000103c 	.word	0x2000103c
 8008098:	200010ec 	.word	0x200010ec
 800809c:	2000104c 	.word	0x2000104c
 80080a0:	0800b6ec 	.word	0x0800b6ec

080080a4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08a      	sub	sp, #40	@ 0x28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80080b2:	f06f 0301 	mvn.w	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080c4:	4b06      	ldr	r3, [pc, #24]	@ (80080e0 <xTimerPendFunctionCallFromISR+0x3c>)
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	f107 0114 	add.w	r1, r7, #20
 80080cc:	2300      	movs	r3, #0
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	f7fd fd38 	bl	8005b44 <xQueueGenericSendFromISR>
 80080d4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80080d8:	4618      	mov	r0, r3
 80080da:	3728      	adds	r7, #40	@ 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20001040 	.word	0x20001040

080080e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3b04      	subs	r3, #4
 80080f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b04      	subs	r3, #4
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f023 0201 	bic.w	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3b04      	subs	r3, #4
 8008112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008114:	4a08      	ldr	r2, [pc, #32]	@ (8008138 <pxPortInitialiseStack+0x54>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b14      	subs	r3, #20
 800811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b20      	subs	r3, #32
 800812a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800812c:	68fb      	ldr	r3, [r7, #12]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr
 8008138:	0800813d 	.word	0x0800813d

0800813c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008146:	4b12      	ldr	r3, [pc, #72]	@ (8008190 <prvTaskExitError+0x54>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d00b      	beq.n	8008168 <prvTaskExitError+0x2c>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <prvTaskExitError+0x28>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60bb      	str	r3, [r7, #8]
}
 800817a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800817c:	bf00      	nop
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0fc      	beq.n	800817e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr
 8008190:	20000010 	.word	0x20000010
	...

080081a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081a0:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <pxCurrentTCBConst2>)
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	6808      	ldr	r0, [r1, #0]
 80081a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081aa:	f380 8809 	msr	PSP, r0
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f04f 0000 	mov.w	r0, #0
 80081b6:	f380 8811 	msr	BASEPRI, r0
 80081ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80081be:	4770      	bx	lr

080081c0 <pxCurrentTCBConst2>:
 80081c0:	20000b10 	.word	0x20000b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80081c8:	4806      	ldr	r0, [pc, #24]	@ (80081e4 <prvPortStartFirstTask+0x1c>)
 80081ca:	6800      	ldr	r0, [r0, #0]
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f380 8808 	msr	MSP, r0
 80081d2:	b662      	cpsie	i
 80081d4:	b661      	cpsie	f
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	df00      	svc	0
 80081e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081e2:	bf00      	nop
 80081e4:	e000ed08 	.word	0xe000ed08

080081e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081ee:	4b32      	ldr	r3, [pc, #200]	@ (80082b8 <xPortStartScheduler+0xd0>)
 80081f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	22ff      	movs	r2, #255	@ 0xff
 80081fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b2a      	ldr	r3, [pc, #168]	@ (80082bc <xPortStartScheduler+0xd4>)
 8008214:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008216:	4b2a      	ldr	r3, [pc, #168]	@ (80082c0 <xPortStartScheduler+0xd8>)
 8008218:	2207      	movs	r2, #7
 800821a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800821c:	e009      	b.n	8008232 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800821e:	4b28      	ldr	r3, [pc, #160]	@ (80082c0 <xPortStartScheduler+0xd8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3b01      	subs	r3, #1
 8008224:	4a26      	ldr	r2, [pc, #152]	@ (80082c0 <xPortStartScheduler+0xd8>)
 8008226:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	b2db      	uxtb	r3, r3
 8008230:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823a:	2b80      	cmp	r3, #128	@ 0x80
 800823c:	d0ef      	beq.n	800821e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800823e:	4b20      	ldr	r3, [pc, #128]	@ (80082c0 <xPortStartScheduler+0xd8>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f1c3 0307 	rsb	r3, r3, #7
 8008246:	2b04      	cmp	r3, #4
 8008248:	d00b      	beq.n	8008262 <xPortStartScheduler+0x7a>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	60bb      	str	r3, [r7, #8]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008262:	4b17      	ldr	r3, [pc, #92]	@ (80082c0 <xPortStartScheduler+0xd8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	4a15      	ldr	r2, [pc, #84]	@ (80082c0 <xPortStartScheduler+0xd8>)
 800826a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800826c:	4b14      	ldr	r3, [pc, #80]	@ (80082c0 <xPortStartScheduler+0xd8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008274:	4a12      	ldr	r2, [pc, #72]	@ (80082c0 <xPortStartScheduler+0xd8>)
 8008276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	b2da      	uxtb	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008280:	4b10      	ldr	r3, [pc, #64]	@ (80082c4 <xPortStartScheduler+0xdc>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a0f      	ldr	r2, [pc, #60]	@ (80082c4 <xPortStartScheduler+0xdc>)
 8008286:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800828a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800828c:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <xPortStartScheduler+0xdc>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0c      	ldr	r2, [pc, #48]	@ (80082c4 <xPortStartScheduler+0xdc>)
 8008292:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008298:	f000 f8b8 	bl	800840c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800829c:	4b0a      	ldr	r3, [pc, #40]	@ (80082c8 <xPortStartScheduler+0xe0>)
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082a2:	f7ff ff91 	bl	80081c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082a6:	f7fe feb7 	bl	8007018 <vTaskSwitchContext>
	prvTaskExitError();
 80082aa:	f7ff ff47 	bl	800813c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	e000e400 	.word	0xe000e400
 80082bc:	2000113c 	.word	0x2000113c
 80082c0:	20001140 	.word	0x20001140
 80082c4:	e000ed20 	.word	0xe000ed20
 80082c8:	20000010 	.word	0x20000010

080082cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	607b      	str	r3, [r7, #4]
}
 80082e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008324 <vPortEnterCritical+0x58>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	4a0d      	ldr	r2, [pc, #52]	@ (8008324 <vPortEnterCritical+0x58>)
 80082ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <vPortEnterCritical+0x58>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d110      	bne.n	800831a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008328 <vPortEnterCritical+0x5c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <vPortEnterCritical+0x4e>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	603b      	str	r3, [r7, #0]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <vPortEnterCritical+0x4a>
	}
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr
 8008324:	20000010 	.word	0x20000010
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008332:	4b12      	ldr	r3, [pc, #72]	@ (800837c <vPortExitCritical+0x50>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10b      	bne.n	8008352 <vPortExitCritical+0x26>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	607b      	str	r3, [r7, #4]
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	e7fd      	b.n	800834e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <vPortExitCritical+0x50>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3b01      	subs	r3, #1
 8008358:	4a08      	ldr	r2, [pc, #32]	@ (800837c <vPortExitCritical+0x50>)
 800835a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <vPortExitCritical+0x50>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d105      	bne.n	8008370 <vPortExitCritical+0x44>
 8008364:	2300      	movs	r3, #0
 8008366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f383 8811 	msr	BASEPRI, r3
}
 800836e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000010 	.word	0x20000010

08008380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008380:	f3ef 8009 	mrs	r0, PSP
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <pxCurrentTCBConst>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008390:	6010      	str	r0, [r2, #0]
 8008392:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008396:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800839a:	f380 8811 	msr	BASEPRI, r0
 800839e:	f7fe fe3b 	bl	8007018 <vTaskSwitchContext>
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8811 	msr	BASEPRI, r0
 80083aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	6808      	ldr	r0, [r1, #0]
 80083b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083b6:	f380 8809 	msr	PSP, r0
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	4770      	bx	lr

080083c0 <pxCurrentTCBConst>:
 80083c0:	20000b10 	.word	0x20000b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f7fe fd59 	bl	8006e98 <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ec:	4b06      	ldr	r3, [pc, #24]	@ (8008408 <SysTick_Handler+0x40>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
}
 80083fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008410:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <vPortSetupTimerInterrupt+0x30>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008416:	4b0a      	ldr	r3, [pc, #40]	@ (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800841c:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <vPortSetupTimerInterrupt+0x38>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a09      	ldr	r2, [pc, #36]	@ (8008448 <vPortSetupTimerInterrupt+0x3c>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	099b      	lsrs	r3, r3, #6
 8008428:	4a08      	ldr	r2, [pc, #32]	@ (800844c <vPortSetupTimerInterrupt+0x40>)
 800842a:	3b01      	subs	r3, #1
 800842c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800842e:	4b03      	ldr	r3, [pc, #12]	@ (800843c <vPortSetupTimerInterrupt+0x30>)
 8008430:	2207      	movs	r2, #7
 8008432:	601a      	str	r2, [r3, #0]
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr
 800843c:	e000e010 	.word	0xe000e010
 8008440:	e000e018 	.word	0xe000e018
 8008444:	20000004 	.word	0x20000004
 8008448:	10624dd3 	.word	0x10624dd3
 800844c:	e000e014 	.word	0xe000e014

08008450 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008456:	f3ef 8305 	mrs	r3, IPSR
 800845a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b0f      	cmp	r3, #15
 8008460:	d915      	bls.n	800848e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008462:	4a17      	ldr	r2, [pc, #92]	@ (80084c0 <vPortValidateInterruptPriority+0x70>)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800846c:	4b15      	ldr	r3, [pc, #84]	@ (80084c4 <vPortValidateInterruptPriority+0x74>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	7afa      	ldrb	r2, [r7, #11]
 8008472:	429a      	cmp	r2, r3
 8008474:	d20b      	bcs.n	800848e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	607b      	str	r3, [r7, #4]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800848e:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <vPortValidateInterruptPriority+0x78>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <vPortValidateInterruptPriority+0x7c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d90b      	bls.n	80084b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	603b      	str	r3, [r7, #0]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <vPortValidateInterruptPriority+0x62>
	}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr
 80084c0:	e000e3f0 	.word	0xe000e3f0
 80084c4:	2000113c 	.word	0x2000113c
 80084c8:	e000ed0c 	.word	0xe000ed0c
 80084cc:	20001140 	.word	0x20001140

080084d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08a      	sub	sp, #40	@ 0x28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084dc:	f7fe fc10 	bl	8006d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084e0:	4b5a      	ldr	r3, [pc, #360]	@ (800864c <pvPortMalloc+0x17c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084e8:	f000 f916 	bl	8008718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084ec:	4b58      	ldr	r3, [pc, #352]	@ (8008650 <pvPortMalloc+0x180>)
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f040 8090 	bne.w	800861a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01e      	beq.n	800853e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008500:	2208      	movs	r2, #8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	2b00      	cmp	r3, #0
 8008510:	d015      	beq.n	800853e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f023 0307 	bic.w	r3, r3, #7
 8008518:	3308      	adds	r3, #8
 800851a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <pvPortMalloc+0x6e>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	617b      	str	r3, [r7, #20]
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	e7fd      	b.n	800853a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d06a      	beq.n	800861a <pvPortMalloc+0x14a>
 8008544:	4b43      	ldr	r3, [pc, #268]	@ (8008654 <pvPortMalloc+0x184>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d865      	bhi.n	800861a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800854e:	4b42      	ldr	r3, [pc, #264]	@ (8008658 <pvPortMalloc+0x188>)
 8008550:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008552:	4b41      	ldr	r3, [pc, #260]	@ (8008658 <pvPortMalloc+0x188>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008558:	e004      	b.n	8008564 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d903      	bls.n	8008576 <pvPortMalloc+0xa6>
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f1      	bne.n	800855a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008576:	4b35      	ldr	r3, [pc, #212]	@ (800864c <pvPortMalloc+0x17c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800857c:	429a      	cmp	r2, r3
 800857e:	d04c      	beq.n	800861a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2208      	movs	r2, #8
 8008586:	4413      	add	r3, r2
 8008588:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	2308      	movs	r3, #8
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	429a      	cmp	r2, r3
 80085a0:	d920      	bls.n	80085e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4413      	add	r3, r2
 80085a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <pvPortMalloc+0xfc>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	613b      	str	r3, [r7, #16]
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	e7fd      	b.n	80085c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	1ad2      	subs	r2, r2, r3
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085de:	69b8      	ldr	r0, [r7, #24]
 80085e0:	f000 f8fc 	bl	80087dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008654 <pvPortMalloc+0x184>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	4a19      	ldr	r2, [pc, #100]	@ (8008654 <pvPortMalloc+0x184>)
 80085f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085f2:	4b18      	ldr	r3, [pc, #96]	@ (8008654 <pvPortMalloc+0x184>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4b19      	ldr	r3, [pc, #100]	@ (800865c <pvPortMalloc+0x18c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d203      	bcs.n	8008606 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085fe:	4b15      	ldr	r3, [pc, #84]	@ (8008654 <pvPortMalloc+0x184>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a16      	ldr	r2, [pc, #88]	@ (800865c <pvPortMalloc+0x18c>)
 8008604:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	4b11      	ldr	r3, [pc, #68]	@ (8008650 <pvPortMalloc+0x180>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	431a      	orrs	r2, r3
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800861a:	f7fe fb7f 	bl	8006d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <pvPortMalloc+0x170>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <pvPortMalloc+0x16c>
	return pvReturn;
 8008640:	69fb      	ldr	r3, [r7, #28]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3728      	adds	r7, #40	@ 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200030ec 	.word	0x200030ec
 8008650:	200030f8 	.word	0x200030f8
 8008654:	200030f0 	.word	0x200030f0
 8008658:	200030e4 	.word	0x200030e4
 800865c:	200030f4 	.word	0x200030f4

08008660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d04a      	beq.n	8008708 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008672:	2308      	movs	r3, #8
 8008674:	425b      	negs	r3, r3
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	4b22      	ldr	r3, [pc, #136]	@ (8008710 <vPortFree+0xb0>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10b      	bne.n	80086a6 <vPortFree+0x46>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	e7fd      	b.n	80086a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <vPortFree+0x66>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4b11      	ldr	r3, [pc, #68]	@ (8008710 <vPortFree+0xb0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d115      	bne.n	8008708 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <vPortFree+0xb0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086ec:	f7fe fb08 	bl	8006d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <vPortFree+0xb4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4413      	add	r3, r2
 80086fa:	4a06      	ldr	r2, [pc, #24]	@ (8008714 <vPortFree+0xb4>)
 80086fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fe:	6938      	ldr	r0, [r7, #16]
 8008700:	f000 f86c 	bl	80087dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008704:	f7fe fb0a 	bl	8006d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008708:	bf00      	nop
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	200030f8 	.word	0x200030f8
 8008714:	200030f0 	.word	0x200030f0

08008718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800871e:	f44f 53fd 	mov.w	r3, #8096	@ 0x1fa0
 8008722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008724:	4b27      	ldr	r3, [pc, #156]	@ (80087c4 <prvHeapInit+0xac>)
 8008726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00c      	beq.n	800874c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3307      	adds	r3, #7
 8008736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	4a1f      	ldr	r2, [pc, #124]	@ (80087c4 <prvHeapInit+0xac>)
 8008748:	4413      	add	r3, r2
 800874a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008750:	4a1d      	ldr	r2, [pc, #116]	@ (80087c8 <prvHeapInit+0xb0>)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008756:	4b1c      	ldr	r3, [pc, #112]	@ (80087c8 <prvHeapInit+0xb0>)
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008764:	2208      	movs	r2, #8
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0307 	bic.w	r3, r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a15      	ldr	r2, [pc, #84]	@ (80087cc <prvHeapInit+0xb4>)
 8008778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800877a:	4b14      	ldr	r3, [pc, #80]	@ (80087cc <prvHeapInit+0xb4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2200      	movs	r2, #0
 8008780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008782:	4b12      	ldr	r3, [pc, #72]	@ (80087cc <prvHeapInit+0xb4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008798:	4b0c      	ldr	r3, [pc, #48]	@ (80087cc <prvHeapInit+0xb4>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a0a      	ldr	r2, [pc, #40]	@ (80087d0 <prvHeapInit+0xb8>)
 80087a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4a09      	ldr	r2, [pc, #36]	@ (80087d4 <prvHeapInit+0xbc>)
 80087ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087b0:	4b09      	ldr	r3, [pc, #36]	@ (80087d8 <prvHeapInit+0xc0>)
 80087b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80087b6:	601a      	str	r2, [r3, #0]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	20001144 	.word	0x20001144
 80087c8:	200030e4 	.word	0x200030e4
 80087cc:	200030ec 	.word	0x200030ec
 80087d0:	200030f4 	.word	0x200030f4
 80087d4:	200030f0 	.word	0x200030f0
 80087d8:	200030f8 	.word	0x200030f8

080087dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e4:	4b27      	ldr	r3, [pc, #156]	@ (8008884 <prvInsertBlockIntoFreeList+0xa8>)
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e002      	b.n	80087f0 <prvInsertBlockIntoFreeList+0x14>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d8f7      	bhi.n	80087ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d108      	bne.n	800881e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d118      	bne.n	8008864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b14      	ldr	r3, [pc, #80]	@ (8008888 <prvInsertBlockIntoFreeList+0xac>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d00d      	beq.n	800885a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	441a      	add	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e008      	b.n	800886c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800885a:	4b0b      	ldr	r3, [pc, #44]	@ (8008888 <prvInsertBlockIntoFreeList+0xac>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e003      	b.n	800886c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d002      	beq.n	800887a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr
 8008884:	200030e4 	.word	0x200030e4
 8008888:	200030ec 	.word	0x200030ec

0800888c <__cvt>:
 800888c:	2b00      	cmp	r3, #0
 800888e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008892:	461d      	mov	r5, r3
 8008894:	bfbb      	ittet	lt
 8008896:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800889a:	461d      	movlt	r5, r3
 800889c:	2300      	movge	r3, #0
 800889e:	232d      	movlt	r3, #45	@ 0x2d
 80088a0:	b088      	sub	sp, #32
 80088a2:	4614      	mov	r4, r2
 80088a4:	bfb8      	it	lt
 80088a6:	4614      	movlt	r4, r2
 80088a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80088ac:	7013      	strb	r3, [r2, #0]
 80088ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80088b4:	f023 0820 	bic.w	r8, r3, #32
 80088b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088bc:	d005      	beq.n	80088ca <__cvt+0x3e>
 80088be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80088c2:	d100      	bne.n	80088c6 <__cvt+0x3a>
 80088c4:	3601      	adds	r6, #1
 80088c6:	2302      	movs	r3, #2
 80088c8:	e000      	b.n	80088cc <__cvt+0x40>
 80088ca:	2303      	movs	r3, #3
 80088cc:	aa07      	add	r2, sp, #28
 80088ce:	9204      	str	r2, [sp, #16]
 80088d0:	aa06      	add	r2, sp, #24
 80088d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088d6:	e9cd 3600 	strd	r3, r6, [sp]
 80088da:	4622      	mov	r2, r4
 80088dc:	462b      	mov	r3, r5
 80088de:	f000 fed3 	bl	8009688 <_dtoa_r>
 80088e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80088e6:	4607      	mov	r7, r0
 80088e8:	d119      	bne.n	800891e <__cvt+0x92>
 80088ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088ec:	07db      	lsls	r3, r3, #31
 80088ee:	d50e      	bpl.n	800890e <__cvt+0x82>
 80088f0:	eb00 0906 	add.w	r9, r0, r6
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	4620      	mov	r0, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	f7f8 f854 	bl	80009a8 <__aeabi_dcmpeq>
 8008900:	b108      	cbz	r0, 8008906 <__cvt+0x7a>
 8008902:	f8cd 901c 	str.w	r9, [sp, #28]
 8008906:	2230      	movs	r2, #48	@ 0x30
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	454b      	cmp	r3, r9
 800890c:	d31e      	bcc.n	800894c <__cvt+0xc0>
 800890e:	4638      	mov	r0, r7
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008914:	1bdb      	subs	r3, r3, r7
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	b008      	add	sp, #32
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008922:	eb00 0906 	add.w	r9, r0, r6
 8008926:	d1e5      	bne.n	80088f4 <__cvt+0x68>
 8008928:	7803      	ldrb	r3, [r0, #0]
 800892a:	2b30      	cmp	r3, #48	@ 0x30
 800892c:	d10a      	bne.n	8008944 <__cvt+0xb8>
 800892e:	2200      	movs	r2, #0
 8008930:	2300      	movs	r3, #0
 8008932:	4620      	mov	r0, r4
 8008934:	4629      	mov	r1, r5
 8008936:	f7f8 f837 	bl	80009a8 <__aeabi_dcmpeq>
 800893a:	b918      	cbnz	r0, 8008944 <__cvt+0xb8>
 800893c:	f1c6 0601 	rsb	r6, r6, #1
 8008940:	f8ca 6000 	str.w	r6, [sl]
 8008944:	f8da 3000 	ldr.w	r3, [sl]
 8008948:	4499      	add	r9, r3
 800894a:	e7d3      	b.n	80088f4 <__cvt+0x68>
 800894c:	1c59      	adds	r1, r3, #1
 800894e:	9107      	str	r1, [sp, #28]
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e7d9      	b.n	8008908 <__cvt+0x7c>

08008954 <__exponent>:
 8008954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008956:	2900      	cmp	r1, #0
 8008958:	bfb6      	itet	lt
 800895a:	232d      	movlt	r3, #45	@ 0x2d
 800895c:	232b      	movge	r3, #43	@ 0x2b
 800895e:	4249      	neglt	r1, r1
 8008960:	2909      	cmp	r1, #9
 8008962:	7002      	strb	r2, [r0, #0]
 8008964:	7043      	strb	r3, [r0, #1]
 8008966:	dd29      	ble.n	80089bc <__exponent+0x68>
 8008968:	f10d 0307 	add.w	r3, sp, #7
 800896c:	461d      	mov	r5, r3
 800896e:	270a      	movs	r7, #10
 8008970:	fbb1 f6f7 	udiv	r6, r1, r7
 8008974:	461a      	mov	r2, r3
 8008976:	fb07 1416 	mls	r4, r7, r6, r1
 800897a:	3430      	adds	r4, #48	@ 0x30
 800897c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008980:	460c      	mov	r4, r1
 8008982:	2c63      	cmp	r4, #99	@ 0x63
 8008984:	4631      	mov	r1, r6
 8008986:	f103 33ff 	add.w	r3, r3, #4294967295
 800898a:	dcf1      	bgt.n	8008970 <__exponent+0x1c>
 800898c:	3130      	adds	r1, #48	@ 0x30
 800898e:	1e94      	subs	r4, r2, #2
 8008990:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008994:	4623      	mov	r3, r4
 8008996:	1c41      	adds	r1, r0, #1
 8008998:	42ab      	cmp	r3, r5
 800899a:	d30a      	bcc.n	80089b2 <__exponent+0x5e>
 800899c:	f10d 0309 	add.w	r3, sp, #9
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	42ac      	cmp	r4, r5
 80089a4:	bf88      	it	hi
 80089a6:	2300      	movhi	r3, #0
 80089a8:	3302      	adds	r3, #2
 80089aa:	4403      	add	r3, r0
 80089ac:	1a18      	subs	r0, r3, r0
 80089ae:	b003      	add	sp, #12
 80089b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80089b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80089ba:	e7ed      	b.n	8008998 <__exponent+0x44>
 80089bc:	2330      	movs	r3, #48	@ 0x30
 80089be:	3130      	adds	r1, #48	@ 0x30
 80089c0:	7083      	strb	r3, [r0, #2]
 80089c2:	70c1      	strb	r1, [r0, #3]
 80089c4:	1d03      	adds	r3, r0, #4
 80089c6:	e7f1      	b.n	80089ac <__exponent+0x58>

080089c8 <_printf_float>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	b091      	sub	sp, #68	@ 0x44
 80089ce:	460c      	mov	r4, r1
 80089d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80089d4:	4616      	mov	r6, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	4605      	mov	r5, r0
 80089da:	f000 fce1 	bl	80093a0 <_localeconv_r>
 80089de:	6803      	ldr	r3, [r0, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	9308      	str	r3, [sp, #32]
 80089e4:	f7f7 fbb4 	bl	8000150 <strlen>
 80089e8:	2300      	movs	r3, #0
 80089ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80089ec:	f8d8 3000 	ldr.w	r3, [r8]
 80089f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80089f2:	3307      	adds	r3, #7
 80089f4:	f023 0307 	bic.w	r3, r3, #7
 80089f8:	f103 0208 	add.w	r2, r3, #8
 80089fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a00:	f8d4 b000 	ldr.w	fp, [r4]
 8008a04:	f8c8 2000 	str.w	r2, [r8]
 8008a08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a12:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008a22:	4b9c      	ldr	r3, [pc, #624]	@ (8008c94 <_printf_float+0x2cc>)
 8008a24:	f7f7 fff2 	bl	8000a0c <__aeabi_dcmpun>
 8008a28:	bb70      	cbnz	r0, 8008a88 <_printf_float+0xc0>
 8008a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a32:	4b98      	ldr	r3, [pc, #608]	@ (8008c94 <_printf_float+0x2cc>)
 8008a34:	f7f7 ffcc 	bl	80009d0 <__aeabi_dcmple>
 8008a38:	bb30      	cbnz	r0, 8008a88 <_printf_float+0xc0>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4640      	mov	r0, r8
 8008a40:	4649      	mov	r1, r9
 8008a42:	f7f7 ffbb 	bl	80009bc <__aeabi_dcmplt>
 8008a46:	b110      	cbz	r0, 8008a4e <_printf_float+0x86>
 8008a48:	232d      	movs	r3, #45	@ 0x2d
 8008a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a4e:	4a92      	ldr	r2, [pc, #584]	@ (8008c98 <_printf_float+0x2d0>)
 8008a50:	4b92      	ldr	r3, [pc, #584]	@ (8008c9c <_printf_float+0x2d4>)
 8008a52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a56:	bf94      	ite	ls
 8008a58:	4690      	movls	r8, r2
 8008a5a:	4698      	movhi	r8, r3
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	f02b 0304 	bic.w	r3, fp, #4
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	9700      	str	r7, [sp, #0]
 8008a72:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008a74:	f000 f9d4 	bl	8008e20 <_printf_common>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f040 8090 	bne.w	8008b9e <_printf_float+0x1d6>
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	b011      	add	sp, #68	@ 0x44
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f7 ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8008a94:	b148      	cbz	r0, 8008aaa <_printf_float+0xe2>
 8008a96:	464b      	mov	r3, r9
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfb8      	it	lt
 8008a9c:	232d      	movlt	r3, #45	@ 0x2d
 8008a9e:	4a80      	ldr	r2, [pc, #512]	@ (8008ca0 <_printf_float+0x2d8>)
 8008aa0:	bfb8      	it	lt
 8008aa2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ca4 <_printf_float+0x2dc>)
 8008aa8:	e7d3      	b.n	8008a52 <_printf_float+0x8a>
 8008aaa:	6863      	ldr	r3, [r4, #4]
 8008aac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	d13f      	bne.n	8008b34 <_printf_float+0x16c>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	9206      	str	r2, [sp, #24]
 8008ac2:	aa0e      	add	r2, sp, #56	@ 0x38
 8008ac4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008ac8:	aa0d      	add	r2, sp, #52	@ 0x34
 8008aca:	9203      	str	r2, [sp, #12]
 8008acc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008ad0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	4628      	mov	r0, r5
 8008adc:	464b      	mov	r3, r9
 8008ade:	910a      	str	r1, [sp, #40]	@ 0x28
 8008ae0:	f7ff fed4 	bl	800888c <__cvt>
 8008ae4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	2947      	cmp	r1, #71	@ 0x47
 8008aea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008aec:	d128      	bne.n	8008b40 <_printf_float+0x178>
 8008aee:	1cc8      	adds	r0, r1, #3
 8008af0:	db02      	blt.n	8008af8 <_printf_float+0x130>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	4299      	cmp	r1, r3
 8008af6:	dd40      	ble.n	8008b7a <_printf_float+0x1b2>
 8008af8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008afc:	fa5f fa8a 	uxtb.w	sl, sl
 8008b00:	4652      	mov	r2, sl
 8008b02:	3901      	subs	r1, #1
 8008b04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b08:	910d      	str	r1, [sp, #52]	@ 0x34
 8008b0a:	f7ff ff23 	bl	8008954 <__exponent>
 8008b0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b10:	4681      	mov	r9, r0
 8008b12:	1813      	adds	r3, r2, r0
 8008b14:	2a01      	cmp	r2, #1
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	dc02      	bgt.n	8008b20 <_printf_float+0x158>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	07d2      	lsls	r2, r2, #31
 8008b1e:	d501      	bpl.n	8008b24 <_printf_float+0x15c>
 8008b20:	3301      	adds	r3, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d09e      	beq.n	8008a6a <_printf_float+0xa2>
 8008b2c:	232d      	movs	r3, #45	@ 0x2d
 8008b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b32:	e79a      	b.n	8008a6a <_printf_float+0xa2>
 8008b34:	2947      	cmp	r1, #71	@ 0x47
 8008b36:	d1bf      	bne.n	8008ab8 <_printf_float+0xf0>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1bd      	bne.n	8008ab8 <_printf_float+0xf0>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e7ba      	b.n	8008ab6 <_printf_float+0xee>
 8008b40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b44:	d9dc      	bls.n	8008b00 <_printf_float+0x138>
 8008b46:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b4a:	d118      	bne.n	8008b7e <_printf_float+0x1b6>
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	6863      	ldr	r3, [r4, #4]
 8008b50:	dd0b      	ble.n	8008b6a <_printf_float+0x1a2>
 8008b52:	6121      	str	r1, [r4, #16]
 8008b54:	b913      	cbnz	r3, 8008b5c <_printf_float+0x194>
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	07d0      	lsls	r0, r2, #31
 8008b5a:	d502      	bpl.n	8008b62 <_printf_float+0x19a>
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	440b      	add	r3, r1
 8008b60:	6123      	str	r3, [r4, #16]
 8008b62:	f04f 0900 	mov.w	r9, #0
 8008b66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b68:	e7dc      	b.n	8008b24 <_printf_float+0x15c>
 8008b6a:	b913      	cbnz	r3, 8008b72 <_printf_float+0x1aa>
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	07d2      	lsls	r2, r2, #31
 8008b70:	d501      	bpl.n	8008b76 <_printf_float+0x1ae>
 8008b72:	3302      	adds	r3, #2
 8008b74:	e7f4      	b.n	8008b60 <_printf_float+0x198>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e7f2      	b.n	8008b60 <_printf_float+0x198>
 8008b7a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b80:	4299      	cmp	r1, r3
 8008b82:	db05      	blt.n	8008b90 <_printf_float+0x1c8>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	6121      	str	r1, [r4, #16]
 8008b88:	07d8      	lsls	r0, r3, #31
 8008b8a:	d5ea      	bpl.n	8008b62 <_printf_float+0x19a>
 8008b8c:	1c4b      	adds	r3, r1, #1
 8008b8e:	e7e7      	b.n	8008b60 <_printf_float+0x198>
 8008b90:	2900      	cmp	r1, #0
 8008b92:	bfcc      	ite	gt
 8008b94:	2201      	movgt	r2, #1
 8008b96:	f1c1 0202 	rsble	r2, r1, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	e7e0      	b.n	8008b60 <_printf_float+0x198>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	055a      	lsls	r2, r3, #21
 8008ba2:	d407      	bmi.n	8008bb4 <_printf_float+0x1ec>
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	4642      	mov	r2, r8
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d12b      	bne.n	8008c0a <_printf_float+0x242>
 8008bb2:	e764      	b.n	8008a7e <_printf_float+0xb6>
 8008bb4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bb8:	f240 80dc 	bls.w	8008d74 <_printf_float+0x3ac>
 8008bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f7f7 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d033      	beq.n	8008c34 <_printf_float+0x26c>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	4a35      	ldr	r2, [pc, #212]	@ (8008ca8 <_printf_float+0x2e0>)
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f af51 	beq.w	8008a7e <_printf_float+0xb6>
 8008bdc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008be0:	4543      	cmp	r3, r8
 8008be2:	db02      	blt.n	8008bea <_printf_float+0x222>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	07d8      	lsls	r0, r3, #31
 8008be8:	d50f      	bpl.n	8008c0a <_printf_float+0x242>
 8008bea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f af42 	beq.w	8008a7e <_printf_float+0xb6>
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c02:	f104 0a1a 	add.w	sl, r4, #26
 8008c06:	45c8      	cmp	r8, r9
 8008c08:	dc09      	bgt.n	8008c1e <_printf_float+0x256>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	079b      	lsls	r3, r3, #30
 8008c0e:	f100 8102 	bmi.w	8008e16 <_printf_float+0x44e>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c16:	4298      	cmp	r0, r3
 8008c18:	bfb8      	it	lt
 8008c1a:	4618      	movlt	r0, r3
 8008c1c:	e731      	b.n	8008a82 <_printf_float+0xba>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4652      	mov	r2, sl
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f af28 	beq.w	8008a7e <_printf_float+0xb6>
 8008c2e:	f109 0901 	add.w	r9, r9, #1
 8008c32:	e7e8      	b.n	8008c06 <_printf_float+0x23e>
 8008c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dc38      	bgt.n	8008cac <_printf_float+0x2e4>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	4a19      	ldr	r2, [pc, #100]	@ (8008ca8 <_printf_float+0x2e0>)
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	f43f af1a 	beq.w	8008a7e <_printf_float+0xb6>
 8008c4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008c4e:	ea59 0303 	orrs.w	r3, r9, r3
 8008c52:	d102      	bne.n	8008c5a <_printf_float+0x292>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	07d9      	lsls	r1, r3, #31
 8008c58:	d5d7      	bpl.n	8008c0a <_printf_float+0x242>
 8008c5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f af0a 	beq.w	8008a7e <_printf_float+0xb6>
 8008c6a:	f04f 0a00 	mov.w	sl, #0
 8008c6e:	f104 0b1a 	add.w	fp, r4, #26
 8008c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c74:	425b      	negs	r3, r3
 8008c76:	4553      	cmp	r3, sl
 8008c78:	dc01      	bgt.n	8008c7e <_printf_float+0x2b6>
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	e793      	b.n	8008ba6 <_printf_float+0x1de>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	465a      	mov	r2, fp
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f43f aef8 	beq.w	8008a7e <_printf_float+0xb6>
 8008c8e:	f10a 0a01 	add.w	sl, sl, #1
 8008c92:	e7ee      	b.n	8008c72 <_printf_float+0x2aa>
 8008c94:	7fefffff 	.word	0x7fefffff
 8008c98:	0800b822 	.word	0x0800b822
 8008c9c:	0800b826 	.word	0x0800b826
 8008ca0:	0800b82a 	.word	0x0800b82a
 8008ca4:	0800b82e 	.word	0x0800b82e
 8008ca8:	0800b832 	.word	0x0800b832
 8008cac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008cb2:	4553      	cmp	r3, sl
 8008cb4:	bfa8      	it	ge
 8008cb6:	4653      	movge	r3, sl
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	4699      	mov	r9, r3
 8008cbc:	dc36      	bgt.n	8008d2c <_printf_float+0x364>
 8008cbe:	f04f 0b00 	mov.w	fp, #0
 8008cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc6:	f104 021a 	add.w	r2, r4, #26
 8008cca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cce:	eba3 0309 	sub.w	r3, r3, r9
 8008cd2:	455b      	cmp	r3, fp
 8008cd4:	dc31      	bgt.n	8008d3a <_printf_float+0x372>
 8008cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cd8:	459a      	cmp	sl, r3
 8008cda:	dc3a      	bgt.n	8008d52 <_printf_float+0x38a>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	07da      	lsls	r2, r3, #31
 8008ce0:	d437      	bmi.n	8008d52 <_printf_float+0x38a>
 8008ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ce4:	ebaa 0903 	sub.w	r9, sl, r3
 8008ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cea:	ebaa 0303 	sub.w	r3, sl, r3
 8008cee:	4599      	cmp	r9, r3
 8008cf0:	bfa8      	it	ge
 8008cf2:	4699      	movge	r9, r3
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	dc33      	bgt.n	8008d62 <_printf_float+0x39a>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d02:	f104 0b1a 	add.w	fp, r4, #26
 8008d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d08:	ebaa 0303 	sub.w	r3, sl, r3
 8008d0c:	eba3 0309 	sub.w	r3, r3, r9
 8008d10:	4543      	cmp	r3, r8
 8008d12:	f77f af7a 	ble.w	8008c0a <_printf_float+0x242>
 8008d16:	2301      	movs	r3, #1
 8008d18:	465a      	mov	r2, fp
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	f43f aeac 	beq.w	8008a7e <_printf_float+0xb6>
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	e7ec      	b.n	8008d06 <_printf_float+0x33e>
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	d1c2      	bne.n	8008cbe <_printf_float+0x2f6>
 8008d38:	e6a1      	b.n	8008a7e <_printf_float+0xb6>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	920a      	str	r2, [sp, #40]	@ 0x28
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	f43f ae9a 	beq.w	8008a7e <_printf_float+0xb6>
 8008d4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d4c:	f10b 0b01 	add.w	fp, fp, #1
 8008d50:	e7bb      	b.n	8008cca <_printf_float+0x302>
 8008d52:	4631      	mov	r1, r6
 8008d54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b8      	blx	r7
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d1c0      	bne.n	8008ce2 <_printf_float+0x31a>
 8008d60:	e68d      	b.n	8008a7e <_printf_float+0xb6>
 8008d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d64:	464b      	mov	r3, r9
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	4442      	add	r2, r8
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d1c3      	bne.n	8008cfa <_printf_float+0x332>
 8008d72:	e684      	b.n	8008a7e <_printf_float+0xb6>
 8008d74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008d78:	f1ba 0f01 	cmp.w	sl, #1
 8008d7c:	dc01      	bgt.n	8008d82 <_printf_float+0x3ba>
 8008d7e:	07db      	lsls	r3, r3, #31
 8008d80:	d536      	bpl.n	8008df0 <_printf_float+0x428>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4642      	mov	r2, r8
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f43f ae76 	beq.w	8008a7e <_printf_float+0xb6>
 8008d92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d96:	4631      	mov	r1, r6
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b8      	blx	r7
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	f43f ae6e 	beq.w	8008a7e <_printf_float+0xb6>
 8008da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008da6:	2200      	movs	r2, #0
 8008da8:	2300      	movs	r3, #0
 8008daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dae:	f7f7 fdfb 	bl	80009a8 <__aeabi_dcmpeq>
 8008db2:	b9c0      	cbnz	r0, 8008de6 <_printf_float+0x41e>
 8008db4:	4653      	mov	r3, sl
 8008db6:	f108 0201 	add.w	r2, r8, #1
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d10c      	bne.n	8008dde <_printf_float+0x416>
 8008dc4:	e65b      	b.n	8008a7e <_printf_float+0xb6>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	465a      	mov	r2, fp
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae54 	beq.w	8008a7e <_printf_float+0xb6>
 8008dd6:	f108 0801 	add.w	r8, r8, #1
 8008dda:	45d0      	cmp	r8, sl
 8008ddc:	dbf3      	blt.n	8008dc6 <_printf_float+0x3fe>
 8008dde:	464b      	mov	r3, r9
 8008de0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008de4:	e6e0      	b.n	8008ba8 <_printf_float+0x1e0>
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	f104 0b1a 	add.w	fp, r4, #26
 8008dee:	e7f4      	b.n	8008dda <_printf_float+0x412>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4642      	mov	r2, r8
 8008df4:	e7e1      	b.n	8008dba <_printf_float+0x3f2>
 8008df6:	2301      	movs	r3, #1
 8008df8:	464a      	mov	r2, r9
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	f43f ae3c 	beq.w	8008a7e <_printf_float+0xb6>
 8008e06:	f108 0801 	add.w	r8, r8, #1
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008e0e:	1a5b      	subs	r3, r3, r1
 8008e10:	4543      	cmp	r3, r8
 8008e12:	dcf0      	bgt.n	8008df6 <_printf_float+0x42e>
 8008e14:	e6fd      	b.n	8008c12 <_printf_float+0x24a>
 8008e16:	f04f 0800 	mov.w	r8, #0
 8008e1a:	f104 0919 	add.w	r9, r4, #25
 8008e1e:	e7f4      	b.n	8008e0a <_printf_float+0x442>

08008e20 <_printf_common>:
 8008e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e24:	4616      	mov	r6, r2
 8008e26:	4698      	mov	r8, r3
 8008e28:	688a      	ldr	r2, [r1, #8]
 8008e2a:	690b      	ldr	r3, [r1, #16]
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	bfb8      	it	lt
 8008e32:	4613      	movlt	r3, r2
 8008e34:	6033      	str	r3, [r6, #0]
 8008e36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e40:	b10a      	cbz	r2, 8008e46 <_printf_common+0x26>
 8008e42:	3301      	adds	r3, #1
 8008e44:	6033      	str	r3, [r6, #0]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	0699      	lsls	r1, r3, #26
 8008e4a:	bf42      	ittt	mi
 8008e4c:	6833      	ldrmi	r3, [r6, #0]
 8008e4e:	3302      	addmi	r3, #2
 8008e50:	6033      	strmi	r3, [r6, #0]
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	f015 0506 	ands.w	r5, r5, #6
 8008e58:	d106      	bne.n	8008e68 <_printf_common+0x48>
 8008e5a:	f104 0a19 	add.w	sl, r4, #25
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	6832      	ldr	r2, [r6, #0]
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dc2b      	bgt.n	8008ec0 <_printf_common+0xa0>
 8008e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	3b00      	subs	r3, #0
 8008e70:	bf18      	it	ne
 8008e72:	2301      	movne	r3, #1
 8008e74:	0692      	lsls	r2, r2, #26
 8008e76:	d430      	bmi.n	8008eda <_printf_common+0xba>
 8008e78:	4641      	mov	r1, r8
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e80:	47c8      	blx	r9
 8008e82:	3001      	adds	r0, #1
 8008e84:	d023      	beq.n	8008ece <_printf_common+0xae>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	6922      	ldr	r2, [r4, #16]
 8008e8a:	f003 0306 	and.w	r3, r3, #6
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	bf14      	ite	ne
 8008e92:	2500      	movne	r5, #0
 8008e94:	6833      	ldreq	r3, [r6, #0]
 8008e96:	f04f 0600 	mov.w	r6, #0
 8008e9a:	bf08      	it	eq
 8008e9c:	68e5      	ldreq	r5, [r4, #12]
 8008e9e:	f104 041a 	add.w	r4, r4, #26
 8008ea2:	bf08      	it	eq
 8008ea4:	1aed      	subeq	r5, r5, r3
 8008ea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008eaa:	bf08      	it	eq
 8008eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	bfc4      	itt	gt
 8008eb4:	1a9b      	subgt	r3, r3, r2
 8008eb6:	18ed      	addgt	r5, r5, r3
 8008eb8:	42b5      	cmp	r5, r6
 8008eba:	d11a      	bne.n	8008ef2 <_printf_common+0xd2>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e008      	b.n	8008ed2 <_printf_common+0xb2>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	4652      	mov	r2, sl
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	47c8      	blx	r9
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d103      	bne.n	8008ed6 <_printf_common+0xb6>
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed6:	3501      	adds	r5, #1
 8008ed8:	e7c1      	b.n	8008e5e <_printf_common+0x3e>
 8008eda:	2030      	movs	r0, #48	@ 0x30
 8008edc:	18e1      	adds	r1, r4, r3
 8008ede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ee8:	4422      	add	r2, r4
 8008eea:	3302      	adds	r3, #2
 8008eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ef0:	e7c2      	b.n	8008e78 <_printf_common+0x58>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	4638      	mov	r0, r7
 8008efa:	47c8      	blx	r9
 8008efc:	3001      	adds	r0, #1
 8008efe:	d0e6      	beq.n	8008ece <_printf_common+0xae>
 8008f00:	3601      	adds	r6, #1
 8008f02:	e7d9      	b.n	8008eb8 <_printf_common+0x98>

08008f04 <_printf_i>:
 8008f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	7e0f      	ldrb	r7, [r1, #24]
 8008f0a:	4691      	mov	r9, r2
 8008f0c:	2f78      	cmp	r7, #120	@ 0x78
 8008f0e:	4680      	mov	r8, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	469a      	mov	sl, r3
 8008f14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f1a:	d807      	bhi.n	8008f2c <_printf_i+0x28>
 8008f1c:	2f62      	cmp	r7, #98	@ 0x62
 8008f1e:	d80a      	bhi.n	8008f36 <_printf_i+0x32>
 8008f20:	2f00      	cmp	r7, #0
 8008f22:	f000 80d3 	beq.w	80090cc <_printf_i+0x1c8>
 8008f26:	2f58      	cmp	r7, #88	@ 0x58
 8008f28:	f000 80ba 	beq.w	80090a0 <_printf_i+0x19c>
 8008f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f34:	e03a      	b.n	8008fac <_printf_i+0xa8>
 8008f36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f3a:	2b15      	cmp	r3, #21
 8008f3c:	d8f6      	bhi.n	8008f2c <_printf_i+0x28>
 8008f3e:	a101      	add	r1, pc, #4	@ (adr r1, 8008f44 <_printf_i+0x40>)
 8008f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f44:	08008f9d 	.word	0x08008f9d
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008f2d 	.word	0x08008f2d
 8008f50:	08008f2d 	.word	0x08008f2d
 8008f54:	08008f2d 	.word	0x08008f2d
 8008f58:	08008f2d 	.word	0x08008f2d
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008f2d 	.word	0x08008f2d
 8008f64:	08008f2d 	.word	0x08008f2d
 8008f68:	08008f2d 	.word	0x08008f2d
 8008f6c:	08008f2d 	.word	0x08008f2d
 8008f70:	080090b3 	.word	0x080090b3
 8008f74:	08008fdb 	.word	0x08008fdb
 8008f78:	0800906d 	.word	0x0800906d
 8008f7c:	08008f2d 	.word	0x08008f2d
 8008f80:	08008f2d 	.word	0x08008f2d
 8008f84:	080090d5 	.word	0x080090d5
 8008f88:	08008f2d 	.word	0x08008f2d
 8008f8c:	08008fdb 	.word	0x08008fdb
 8008f90:	08008f2d 	.word	0x08008f2d
 8008f94:	08008f2d 	.word	0x08008f2d
 8008f98:	08009075 	.word	0x08009075
 8008f9c:	6833      	ldr	r3, [r6, #0]
 8008f9e:	1d1a      	adds	r2, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6032      	str	r2, [r6, #0]
 8008fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fac:	2301      	movs	r3, #1
 8008fae:	e09e      	b.n	80090ee <_printf_i+0x1ea>
 8008fb0:	6833      	ldr	r3, [r6, #0]
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	1d19      	adds	r1, r3, #4
 8008fb6:	6031      	str	r1, [r6, #0]
 8008fb8:	0606      	lsls	r6, r0, #24
 8008fba:	d501      	bpl.n	8008fc0 <_printf_i+0xbc>
 8008fbc:	681d      	ldr	r5, [r3, #0]
 8008fbe:	e003      	b.n	8008fc8 <_printf_i+0xc4>
 8008fc0:	0645      	lsls	r5, r0, #25
 8008fc2:	d5fb      	bpl.n	8008fbc <_printf_i+0xb8>
 8008fc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fc8:	2d00      	cmp	r5, #0
 8008fca:	da03      	bge.n	8008fd4 <_printf_i+0xd0>
 8008fcc:	232d      	movs	r3, #45	@ 0x2d
 8008fce:	426d      	negs	r5, r5
 8008fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd4:	230a      	movs	r3, #10
 8008fd6:	4859      	ldr	r0, [pc, #356]	@ (800913c <_printf_i+0x238>)
 8008fd8:	e011      	b.n	8008ffe <_printf_i+0xfa>
 8008fda:	6821      	ldr	r1, [r4, #0]
 8008fdc:	6833      	ldr	r3, [r6, #0]
 8008fde:	0608      	lsls	r0, r1, #24
 8008fe0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fe4:	d402      	bmi.n	8008fec <_printf_i+0xe8>
 8008fe6:	0649      	lsls	r1, r1, #25
 8008fe8:	bf48      	it	mi
 8008fea:	b2ad      	uxthmi	r5, r5
 8008fec:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fee:	6033      	str	r3, [r6, #0]
 8008ff0:	bf14      	ite	ne
 8008ff2:	230a      	movne	r3, #10
 8008ff4:	2308      	moveq	r3, #8
 8008ff6:	4851      	ldr	r0, [pc, #324]	@ (800913c <_printf_i+0x238>)
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ffe:	6866      	ldr	r6, [r4, #4]
 8009000:	2e00      	cmp	r6, #0
 8009002:	bfa8      	it	ge
 8009004:	6821      	ldrge	r1, [r4, #0]
 8009006:	60a6      	str	r6, [r4, #8]
 8009008:	bfa4      	itt	ge
 800900a:	f021 0104 	bicge.w	r1, r1, #4
 800900e:	6021      	strge	r1, [r4, #0]
 8009010:	b90d      	cbnz	r5, 8009016 <_printf_i+0x112>
 8009012:	2e00      	cmp	r6, #0
 8009014:	d04b      	beq.n	80090ae <_printf_i+0x1aa>
 8009016:	4616      	mov	r6, r2
 8009018:	fbb5 f1f3 	udiv	r1, r5, r3
 800901c:	fb03 5711 	mls	r7, r3, r1, r5
 8009020:	5dc7      	ldrb	r7, [r0, r7]
 8009022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009026:	462f      	mov	r7, r5
 8009028:	42bb      	cmp	r3, r7
 800902a:	460d      	mov	r5, r1
 800902c:	d9f4      	bls.n	8009018 <_printf_i+0x114>
 800902e:	2b08      	cmp	r3, #8
 8009030:	d10b      	bne.n	800904a <_printf_i+0x146>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	07df      	lsls	r7, r3, #31
 8009036:	d508      	bpl.n	800904a <_printf_i+0x146>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	6861      	ldr	r1, [r4, #4]
 800903c:	4299      	cmp	r1, r3
 800903e:	bfde      	ittt	le
 8009040:	2330      	movle	r3, #48	@ 0x30
 8009042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800904a:	1b92      	subs	r2, r2, r6
 800904c:	6122      	str	r2, [r4, #16]
 800904e:	464b      	mov	r3, r9
 8009050:	4621      	mov	r1, r4
 8009052:	4640      	mov	r0, r8
 8009054:	f8cd a000 	str.w	sl, [sp]
 8009058:	aa03      	add	r2, sp, #12
 800905a:	f7ff fee1 	bl	8008e20 <_printf_common>
 800905e:	3001      	adds	r0, #1
 8009060:	d14a      	bne.n	80090f8 <_printf_i+0x1f4>
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	b004      	add	sp, #16
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	2778      	movs	r7, #120	@ 0x78
 8009076:	4832      	ldr	r0, [pc, #200]	@ (8009140 <_printf_i+0x23c>)
 8009078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6831      	ldr	r1, [r6, #0]
 8009080:	061f      	lsls	r7, r3, #24
 8009082:	f851 5b04 	ldr.w	r5, [r1], #4
 8009086:	d402      	bmi.n	800908e <_printf_i+0x18a>
 8009088:	065f      	lsls	r7, r3, #25
 800908a:	bf48      	it	mi
 800908c:	b2ad      	uxthmi	r5, r5
 800908e:	6031      	str	r1, [r6, #0]
 8009090:	07d9      	lsls	r1, r3, #31
 8009092:	bf44      	itt	mi
 8009094:	f043 0320 	orrmi.w	r3, r3, #32
 8009098:	6023      	strmi	r3, [r4, #0]
 800909a:	b11d      	cbz	r5, 80090a4 <_printf_i+0x1a0>
 800909c:	2310      	movs	r3, #16
 800909e:	e7ab      	b.n	8008ff8 <_printf_i+0xf4>
 80090a0:	4826      	ldr	r0, [pc, #152]	@ (800913c <_printf_i+0x238>)
 80090a2:	e7e9      	b.n	8009078 <_printf_i+0x174>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	f023 0320 	bic.w	r3, r3, #32
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	e7f6      	b.n	800909c <_printf_i+0x198>
 80090ae:	4616      	mov	r6, r2
 80090b0:	e7bd      	b.n	800902e <_printf_i+0x12a>
 80090b2:	6833      	ldr	r3, [r6, #0]
 80090b4:	6825      	ldr	r5, [r4, #0]
 80090b6:	1d18      	adds	r0, r3, #4
 80090b8:	6961      	ldr	r1, [r4, #20]
 80090ba:	6030      	str	r0, [r6, #0]
 80090bc:	062e      	lsls	r6, r5, #24
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	d501      	bpl.n	80090c6 <_printf_i+0x1c2>
 80090c2:	6019      	str	r1, [r3, #0]
 80090c4:	e002      	b.n	80090cc <_printf_i+0x1c8>
 80090c6:	0668      	lsls	r0, r5, #25
 80090c8:	d5fb      	bpl.n	80090c2 <_printf_i+0x1be>
 80090ca:	8019      	strh	r1, [r3, #0]
 80090cc:	2300      	movs	r3, #0
 80090ce:	4616      	mov	r6, r2
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	e7bc      	b.n	800904e <_printf_i+0x14a>
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	2100      	movs	r1, #0
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	6032      	str	r2, [r6, #0]
 80090dc:	681e      	ldr	r6, [r3, #0]
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 fa2a 	bl	800953a <memchr>
 80090e6:	b108      	cbz	r0, 80090ec <_printf_i+0x1e8>
 80090e8:	1b80      	subs	r0, r0, r6
 80090ea:	6060      	str	r0, [r4, #4]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	2300      	movs	r3, #0
 80090f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f6:	e7aa      	b.n	800904e <_printf_i+0x14a>
 80090f8:	4632      	mov	r2, r6
 80090fa:	4649      	mov	r1, r9
 80090fc:	4640      	mov	r0, r8
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	47d0      	blx	sl
 8009102:	3001      	adds	r0, #1
 8009104:	d0ad      	beq.n	8009062 <_printf_i+0x15e>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	079b      	lsls	r3, r3, #30
 800910a:	d413      	bmi.n	8009134 <_printf_i+0x230>
 800910c:	68e0      	ldr	r0, [r4, #12]
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	4298      	cmp	r0, r3
 8009112:	bfb8      	it	lt
 8009114:	4618      	movlt	r0, r3
 8009116:	e7a6      	b.n	8009066 <_printf_i+0x162>
 8009118:	2301      	movs	r3, #1
 800911a:	4632      	mov	r2, r6
 800911c:	4649      	mov	r1, r9
 800911e:	4640      	mov	r0, r8
 8009120:	47d0      	blx	sl
 8009122:	3001      	adds	r0, #1
 8009124:	d09d      	beq.n	8009062 <_printf_i+0x15e>
 8009126:	3501      	adds	r5, #1
 8009128:	68e3      	ldr	r3, [r4, #12]
 800912a:	9903      	ldr	r1, [sp, #12]
 800912c:	1a5b      	subs	r3, r3, r1
 800912e:	42ab      	cmp	r3, r5
 8009130:	dcf2      	bgt.n	8009118 <_printf_i+0x214>
 8009132:	e7eb      	b.n	800910c <_printf_i+0x208>
 8009134:	2500      	movs	r5, #0
 8009136:	f104 0619 	add.w	r6, r4, #25
 800913a:	e7f5      	b.n	8009128 <_printf_i+0x224>
 800913c:	0800b834 	.word	0x0800b834
 8009140:	0800b845 	.word	0x0800b845

08009144 <std>:
 8009144:	2300      	movs	r3, #0
 8009146:	b510      	push	{r4, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	e9c0 3300 	strd	r3, r3, [r0]
 800914e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009152:	6083      	str	r3, [r0, #8]
 8009154:	8181      	strh	r1, [r0, #12]
 8009156:	6643      	str	r3, [r0, #100]	@ 0x64
 8009158:	81c2      	strh	r2, [r0, #14]
 800915a:	6183      	str	r3, [r0, #24]
 800915c:	4619      	mov	r1, r3
 800915e:	2208      	movs	r2, #8
 8009160:	305c      	adds	r0, #92	@ 0x5c
 8009162:	f000 f914 	bl	800938e <memset>
 8009166:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <std+0x58>)
 8009168:	6224      	str	r4, [r4, #32]
 800916a:	6263      	str	r3, [r4, #36]	@ 0x24
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <std+0x5c>)
 800916e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009170:	4b0c      	ldr	r3, [pc, #48]	@ (80091a4 <std+0x60>)
 8009172:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009174:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <std+0x64>)
 8009176:	6323      	str	r3, [r4, #48]	@ 0x30
 8009178:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <std+0x68>)
 800917a:	429c      	cmp	r4, r3
 800917c:	d006      	beq.n	800918c <std+0x48>
 800917e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009182:	4294      	cmp	r4, r2
 8009184:	d002      	beq.n	800918c <std+0x48>
 8009186:	33d0      	adds	r3, #208	@ 0xd0
 8009188:	429c      	cmp	r4, r3
 800918a:	d105      	bne.n	8009198 <std+0x54>
 800918c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009194:	f000 b9ce 	b.w	8009534 <__retarget_lock_init_recursive>
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	08009309 	.word	0x08009309
 80091a0:	0800932b 	.word	0x0800932b
 80091a4:	08009363 	.word	0x08009363
 80091a8:	08009387 	.word	0x08009387
 80091ac:	200030fc 	.word	0x200030fc

080091b0 <stdio_exit_handler>:
 80091b0:	4a02      	ldr	r2, [pc, #8]	@ (80091bc <stdio_exit_handler+0xc>)
 80091b2:	4903      	ldr	r1, [pc, #12]	@ (80091c0 <stdio_exit_handler+0x10>)
 80091b4:	4803      	ldr	r0, [pc, #12]	@ (80091c4 <stdio_exit_handler+0x14>)
 80091b6:	f000 b869 	b.w	800928c <_fwalk_sglue>
 80091ba:	bf00      	nop
 80091bc:	20000014 	.word	0x20000014
 80091c0:	0800aec5 	.word	0x0800aec5
 80091c4:	20000024 	.word	0x20000024

080091c8 <cleanup_stdio>:
 80091c8:	6841      	ldr	r1, [r0, #4]
 80091ca:	4b0c      	ldr	r3, [pc, #48]	@ (80091fc <cleanup_stdio+0x34>)
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4299      	cmp	r1, r3
 80091d0:	4604      	mov	r4, r0
 80091d2:	d001      	beq.n	80091d8 <cleanup_stdio+0x10>
 80091d4:	f001 fe76 	bl	800aec4 <_fflush_r>
 80091d8:	68a1      	ldr	r1, [r4, #8]
 80091da:	4b09      	ldr	r3, [pc, #36]	@ (8009200 <cleanup_stdio+0x38>)
 80091dc:	4299      	cmp	r1, r3
 80091de:	d002      	beq.n	80091e6 <cleanup_stdio+0x1e>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f001 fe6f 	bl	800aec4 <_fflush_r>
 80091e6:	68e1      	ldr	r1, [r4, #12]
 80091e8:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <cleanup_stdio+0x3c>)
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d004      	beq.n	80091f8 <cleanup_stdio+0x30>
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f4:	f001 be66 	b.w	800aec4 <_fflush_r>
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	200030fc 	.word	0x200030fc
 8009200:	20003164 	.word	0x20003164
 8009204:	200031cc 	.word	0x200031cc

08009208 <global_stdio_init.part.0>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <global_stdio_init.part.0+0x30>)
 800920c:	4c0b      	ldr	r4, [pc, #44]	@ (800923c <global_stdio_init.part.0+0x34>)
 800920e:	4a0c      	ldr	r2, [pc, #48]	@ (8009240 <global_stdio_init.part.0+0x38>)
 8009210:	4620      	mov	r0, r4
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	2104      	movs	r1, #4
 8009216:	2200      	movs	r2, #0
 8009218:	f7ff ff94 	bl	8009144 <std>
 800921c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009220:	2201      	movs	r2, #1
 8009222:	2109      	movs	r1, #9
 8009224:	f7ff ff8e 	bl	8009144 <std>
 8009228:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800922c:	2202      	movs	r2, #2
 800922e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009232:	2112      	movs	r1, #18
 8009234:	f7ff bf86 	b.w	8009144 <std>
 8009238:	20003234 	.word	0x20003234
 800923c:	200030fc 	.word	0x200030fc
 8009240:	080091b1 	.word	0x080091b1

08009244 <__sfp_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	@ (800924c <__sfp_lock_acquire+0x8>)
 8009246:	f000 b976 	b.w	8009536 <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	2000323d 	.word	0x2000323d

08009250 <__sfp_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__sfp_lock_release+0x8>)
 8009252:	f000 b971 	b.w	8009538 <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	2000323d 	.word	0x2000323d

0800925c <__sinit>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff fff0 	bl	8009244 <__sfp_lock_acquire>
 8009264:	6a23      	ldr	r3, [r4, #32]
 8009266:	b11b      	cbz	r3, 8009270 <__sinit+0x14>
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	f7ff bff0 	b.w	8009250 <__sfp_lock_release>
 8009270:	4b04      	ldr	r3, [pc, #16]	@ (8009284 <__sinit+0x28>)
 8009272:	6223      	str	r3, [r4, #32]
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <__sinit+0x2c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f5      	bne.n	8009268 <__sinit+0xc>
 800927c:	f7ff ffc4 	bl	8009208 <global_stdio_init.part.0>
 8009280:	e7f2      	b.n	8009268 <__sinit+0xc>
 8009282:	bf00      	nop
 8009284:	080091c9 	.word	0x080091c9
 8009288:	20003234 	.word	0x20003234

0800928c <_fwalk_sglue>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	4607      	mov	r7, r0
 8009292:	4688      	mov	r8, r1
 8009294:	4614      	mov	r4, r2
 8009296:	2600      	movs	r6, #0
 8009298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800929c:	f1b9 0901 	subs.w	r9, r9, #1
 80092a0:	d505      	bpl.n	80092ae <_fwalk_sglue+0x22>
 80092a2:	6824      	ldr	r4, [r4, #0]
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	d1f7      	bne.n	8009298 <_fwalk_sglue+0xc>
 80092a8:	4630      	mov	r0, r6
 80092aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d907      	bls.n	80092c4 <_fwalk_sglue+0x38>
 80092b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092b8:	3301      	adds	r3, #1
 80092ba:	d003      	beq.n	80092c4 <_fwalk_sglue+0x38>
 80092bc:	4629      	mov	r1, r5
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	4306      	orrs	r6, r0
 80092c4:	3568      	adds	r5, #104	@ 0x68
 80092c6:	e7e9      	b.n	800929c <_fwalk_sglue+0x10>

080092c8 <siprintf>:
 80092c8:	b40e      	push	{r1, r2, r3}
 80092ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80092ce:	b500      	push	{lr}
 80092d0:	b09c      	sub	sp, #112	@ 0x70
 80092d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80092d4:	9002      	str	r0, [sp, #8]
 80092d6:	9006      	str	r0, [sp, #24]
 80092d8:	9107      	str	r1, [sp, #28]
 80092da:	9104      	str	r1, [sp, #16]
 80092dc:	4808      	ldr	r0, [pc, #32]	@ (8009300 <siprintf+0x38>)
 80092de:	4909      	ldr	r1, [pc, #36]	@ (8009304 <siprintf+0x3c>)
 80092e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	6800      	ldr	r0, [r0, #0]
 80092e8:	a902      	add	r1, sp, #8
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	f001 fc6e 	bl	800abcc <_svfiprintf_r>
 80092f0:	2200      	movs	r2, #0
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	b01c      	add	sp, #112	@ 0x70
 80092f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fc:	b003      	add	sp, #12
 80092fe:	4770      	bx	lr
 8009300:	20000020 	.word	0x20000020
 8009304:	ffff0208 	.word	0xffff0208

08009308 <__sread>:
 8009308:	b510      	push	{r4, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	f000 f8c2 	bl	8009498 <_read_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	bfab      	itete	ge
 8009318:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800931a:	89a3      	ldrhlt	r3, [r4, #12]
 800931c:	181b      	addge	r3, r3, r0
 800931e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009322:	bfac      	ite	ge
 8009324:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009326:	81a3      	strhlt	r3, [r4, #12]
 8009328:	bd10      	pop	{r4, pc}

0800932a <__swrite>:
 800932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	461f      	mov	r7, r3
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	4605      	mov	r5, r0
 8009334:	05db      	lsls	r3, r3, #23
 8009336:	460c      	mov	r4, r1
 8009338:	4616      	mov	r6, r2
 800933a:	d505      	bpl.n	8009348 <__swrite+0x1e>
 800933c:	2302      	movs	r3, #2
 800933e:	2200      	movs	r2, #0
 8009340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009344:	f000 f896 	bl	8009474 <_lseek_r>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	4632      	mov	r2, r6
 800934c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	4628      	mov	r0, r5
 8009354:	463b      	mov	r3, r7
 8009356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	f000 b8ad 	b.w	80094bc <_write_r>

08009362 <__sseek>:
 8009362:	b510      	push	{r4, lr}
 8009364:	460c      	mov	r4, r1
 8009366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936a:	f000 f883 	bl	8009474 <_lseek_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	bf15      	itete	ne
 8009374:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009376:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800937a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800937e:	81a3      	strheq	r3, [r4, #12]
 8009380:	bf18      	it	ne
 8009382:	81a3      	strhne	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__sclose>:
 8009386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938a:	f000 b80d 	b.w	80093a8 <_close_r>

0800938e <memset>:
 800938e:	4603      	mov	r3, r0
 8009390:	4402      	add	r2, r0
 8009392:	4293      	cmp	r3, r2
 8009394:	d100      	bne.n	8009398 <memset+0xa>
 8009396:	4770      	bx	lr
 8009398:	f803 1b01 	strb.w	r1, [r3], #1
 800939c:	e7f9      	b.n	8009392 <memset+0x4>
	...

080093a0 <_localeconv_r>:
 80093a0:	4800      	ldr	r0, [pc, #0]	@ (80093a4 <_localeconv_r+0x4>)
 80093a2:	4770      	bx	lr
 80093a4:	20000160 	.word	0x20000160

080093a8 <_close_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	2300      	movs	r3, #0
 80093ac:	4d05      	ldr	r5, [pc, #20]	@ (80093c4 <_close_r+0x1c>)
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f8 fe79 	bl	80020aa <_close>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_close_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_close_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20003238 	.word	0x20003238

080093c8 <_reclaim_reent>:
 80093c8:	4b29      	ldr	r3, [pc, #164]	@ (8009470 <_reclaim_reent+0xa8>)
 80093ca:	b570      	push	{r4, r5, r6, lr}
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4604      	mov	r4, r0
 80093d0:	4283      	cmp	r3, r0
 80093d2:	d04b      	beq.n	800946c <_reclaim_reent+0xa4>
 80093d4:	69c3      	ldr	r3, [r0, #28]
 80093d6:	b1ab      	cbz	r3, 8009404 <_reclaim_reent+0x3c>
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	b16b      	cbz	r3, 80093f8 <_reclaim_reent+0x30>
 80093dc:	2500      	movs	r5, #0
 80093de:	69e3      	ldr	r3, [r4, #28]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	5959      	ldr	r1, [r3, r5]
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d13b      	bne.n	8009460 <_reclaim_reent+0x98>
 80093e8:	3504      	adds	r5, #4
 80093ea:	2d80      	cmp	r5, #128	@ 0x80
 80093ec:	d1f7      	bne.n	80093de <_reclaim_reent+0x16>
 80093ee:	69e3      	ldr	r3, [r4, #28]
 80093f0:	4620      	mov	r0, r4
 80093f2:	68d9      	ldr	r1, [r3, #12]
 80093f4:	f000 ff10 	bl	800a218 <_free_r>
 80093f8:	69e3      	ldr	r3, [r4, #28]
 80093fa:	6819      	ldr	r1, [r3, #0]
 80093fc:	b111      	cbz	r1, 8009404 <_reclaim_reent+0x3c>
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 ff0a 	bl	800a218 <_free_r>
 8009404:	6961      	ldr	r1, [r4, #20]
 8009406:	b111      	cbz	r1, 800940e <_reclaim_reent+0x46>
 8009408:	4620      	mov	r0, r4
 800940a:	f000 ff05 	bl	800a218 <_free_r>
 800940e:	69e1      	ldr	r1, [r4, #28]
 8009410:	b111      	cbz	r1, 8009418 <_reclaim_reent+0x50>
 8009412:	4620      	mov	r0, r4
 8009414:	f000 ff00 	bl	800a218 <_free_r>
 8009418:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800941a:	b111      	cbz	r1, 8009422 <_reclaim_reent+0x5a>
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fefb 	bl	800a218 <_free_r>
 8009422:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009424:	b111      	cbz	r1, 800942c <_reclaim_reent+0x64>
 8009426:	4620      	mov	r0, r4
 8009428:	f000 fef6 	bl	800a218 <_free_r>
 800942c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800942e:	b111      	cbz	r1, 8009436 <_reclaim_reent+0x6e>
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fef1 	bl	800a218 <_free_r>
 8009436:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009438:	b111      	cbz	r1, 8009440 <_reclaim_reent+0x78>
 800943a:	4620      	mov	r0, r4
 800943c:	f000 feec 	bl	800a218 <_free_r>
 8009440:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009442:	b111      	cbz	r1, 800944a <_reclaim_reent+0x82>
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fee7 	bl	800a218 <_free_r>
 800944a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800944c:	b111      	cbz	r1, 8009454 <_reclaim_reent+0x8c>
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fee2 	bl	800a218 <_free_r>
 8009454:	6a23      	ldr	r3, [r4, #32]
 8009456:	b14b      	cbz	r3, 800946c <_reclaim_reent+0xa4>
 8009458:	4620      	mov	r0, r4
 800945a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800945e:	4718      	bx	r3
 8009460:	680e      	ldr	r6, [r1, #0]
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fed8 	bl	800a218 <_free_r>
 8009468:	4631      	mov	r1, r6
 800946a:	e7bb      	b.n	80093e4 <_reclaim_reent+0x1c>
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	bf00      	nop
 8009470:	20000020 	.word	0x20000020

08009474 <_lseek_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	4611      	mov	r1, r2
 800947c:	2200      	movs	r2, #0
 800947e:	4d05      	ldr	r5, [pc, #20]	@ (8009494 <_lseek_r+0x20>)
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f8 fe35 	bl	80020f2 <_lseek>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_lseek_r+0x1e>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_lseek_r+0x1e>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20003238 	.word	0x20003238

08009498 <_read_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	2200      	movs	r2, #0
 80094a2:	4d05      	ldr	r5, [pc, #20]	@ (80094b8 <_read_r+0x20>)
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f8 fdc6 	bl	8002038 <_read>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_read_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_read_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20003238 	.word	0x20003238

080094bc <_write_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	2200      	movs	r2, #0
 80094c6:	4d05      	ldr	r5, [pc, #20]	@ (80094dc <_write_r+0x20>)
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7f8 fdd1 	bl	8002072 <_write>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_write_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_write_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20003238 	.word	0x20003238

080094e0 <__errno>:
 80094e0:	4b01      	ldr	r3, [pc, #4]	@ (80094e8 <__errno+0x8>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	20000020 	.word	0x20000020

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	2600      	movs	r6, #0
 80094f0:	4d0c      	ldr	r5, [pc, #48]	@ (8009524 <__libc_init_array+0x38>)
 80094f2:	4c0d      	ldr	r4, [pc, #52]	@ (8009528 <__libc_init_array+0x3c>)
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	f002 f870 	bl	800b5e0 <_init>
 8009500:	2600      	movs	r6, #0
 8009502:	4d0a      	ldr	r5, [pc, #40]	@ (800952c <__libc_init_array+0x40>)
 8009504:	4c0a      	ldr	r4, [pc, #40]	@ (8009530 <__libc_init_array+0x44>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	f855 3b04 	ldr.w	r3, [r5], #4
 8009514:	4798      	blx	r3
 8009516:	3601      	adds	r6, #1
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	f855 3b04 	ldr.w	r3, [r5], #4
 800951e:	4798      	blx	r3
 8009520:	3601      	adds	r6, #1
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	0800bb98 	.word	0x0800bb98
 8009528:	0800bb98 	.word	0x0800bb98
 800952c:	0800bb98 	.word	0x0800bb98
 8009530:	0800bb9c 	.word	0x0800bb9c

08009534 <__retarget_lock_init_recursive>:
 8009534:	4770      	bx	lr

08009536 <__retarget_lock_acquire_recursive>:
 8009536:	4770      	bx	lr

08009538 <__retarget_lock_release_recursive>:
 8009538:	4770      	bx	lr

0800953a <memchr>:
 800953a:	4603      	mov	r3, r0
 800953c:	b510      	push	{r4, lr}
 800953e:	b2c9      	uxtb	r1, r1
 8009540:	4402      	add	r2, r0
 8009542:	4293      	cmp	r3, r2
 8009544:	4618      	mov	r0, r3
 8009546:	d101      	bne.n	800954c <memchr+0x12>
 8009548:	2000      	movs	r0, #0
 800954a:	e003      	b.n	8009554 <memchr+0x1a>
 800954c:	7804      	ldrb	r4, [r0, #0]
 800954e:	3301      	adds	r3, #1
 8009550:	428c      	cmp	r4, r1
 8009552:	d1f6      	bne.n	8009542 <memchr+0x8>
 8009554:	bd10      	pop	{r4, pc}

08009556 <memcpy>:
 8009556:	440a      	add	r2, r1
 8009558:	4291      	cmp	r1, r2
 800955a:	f100 33ff 	add.w	r3, r0, #4294967295
 800955e:	d100      	bne.n	8009562 <memcpy+0xc>
 8009560:	4770      	bx	lr
 8009562:	b510      	push	{r4, lr}
 8009564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009568:	4291      	cmp	r1, r2
 800956a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800956e:	d1f9      	bne.n	8009564 <memcpy+0xe>
 8009570:	bd10      	pop	{r4, pc}

08009572 <quorem>:
 8009572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009576:	6903      	ldr	r3, [r0, #16]
 8009578:	690c      	ldr	r4, [r1, #16]
 800957a:	4607      	mov	r7, r0
 800957c:	42a3      	cmp	r3, r4
 800957e:	db7e      	blt.n	800967e <quorem+0x10c>
 8009580:	3c01      	subs	r4, #1
 8009582:	00a3      	lsls	r3, r4, #2
 8009584:	f100 0514 	add.w	r5, r0, #20
 8009588:	f101 0814 	add.w	r8, r1, #20
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800959c:	3301      	adds	r3, #1
 800959e:	429a      	cmp	r2, r3
 80095a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80095a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095a8:	d32e      	bcc.n	8009608 <quorem+0x96>
 80095aa:	f04f 0a00 	mov.w	sl, #0
 80095ae:	46c4      	mov	ip, r8
 80095b0:	46ae      	mov	lr, r5
 80095b2:	46d3      	mov	fp, sl
 80095b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095b8:	b298      	uxth	r0, r3
 80095ba:	fb06 a000 	mla	r0, r6, r0, sl
 80095be:	0c1b      	lsrs	r3, r3, #16
 80095c0:	0c02      	lsrs	r2, r0, #16
 80095c2:	fb06 2303 	mla	r3, r6, r3, r2
 80095c6:	f8de 2000 	ldr.w	r2, [lr]
 80095ca:	b280      	uxth	r0, r0
 80095cc:	b292      	uxth	r2, r2
 80095ce:	1a12      	subs	r2, r2, r0
 80095d0:	445a      	add	r2, fp
 80095d2:	f8de 0000 	ldr.w	r0, [lr]
 80095d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095da:	b29b      	uxth	r3, r3
 80095dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095e4:	b292      	uxth	r2, r2
 80095e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095ea:	45e1      	cmp	r9, ip
 80095ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095f0:	f84e 2b04 	str.w	r2, [lr], #4
 80095f4:	d2de      	bcs.n	80095b4 <quorem+0x42>
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	58eb      	ldr	r3, [r5, r3]
 80095fa:	b92b      	cbnz	r3, 8009608 <quorem+0x96>
 80095fc:	9b01      	ldr	r3, [sp, #4]
 80095fe:	3b04      	subs	r3, #4
 8009600:	429d      	cmp	r5, r3
 8009602:	461a      	mov	r2, r3
 8009604:	d32f      	bcc.n	8009666 <quorem+0xf4>
 8009606:	613c      	str	r4, [r7, #16]
 8009608:	4638      	mov	r0, r7
 800960a:	f001 f97b 	bl	800a904 <__mcmp>
 800960e:	2800      	cmp	r0, #0
 8009610:	db25      	blt.n	800965e <quorem+0xec>
 8009612:	4629      	mov	r1, r5
 8009614:	2000      	movs	r0, #0
 8009616:	f858 2b04 	ldr.w	r2, [r8], #4
 800961a:	f8d1 c000 	ldr.w	ip, [r1]
 800961e:	fa1f fe82 	uxth.w	lr, r2
 8009622:	fa1f f38c 	uxth.w	r3, ip
 8009626:	eba3 030e 	sub.w	r3, r3, lr
 800962a:	4403      	add	r3, r0
 800962c:	0c12      	lsrs	r2, r2, #16
 800962e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009632:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009636:	b29b      	uxth	r3, r3
 8009638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800963c:	45c1      	cmp	r9, r8
 800963e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009642:	f841 3b04 	str.w	r3, [r1], #4
 8009646:	d2e6      	bcs.n	8009616 <quorem+0xa4>
 8009648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800964c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009650:	b922      	cbnz	r2, 800965c <quorem+0xea>
 8009652:	3b04      	subs	r3, #4
 8009654:	429d      	cmp	r5, r3
 8009656:	461a      	mov	r2, r3
 8009658:	d30b      	bcc.n	8009672 <quorem+0x100>
 800965a:	613c      	str	r4, [r7, #16]
 800965c:	3601      	adds	r6, #1
 800965e:	4630      	mov	r0, r6
 8009660:	b003      	add	sp, #12
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	6812      	ldr	r2, [r2, #0]
 8009668:	3b04      	subs	r3, #4
 800966a:	2a00      	cmp	r2, #0
 800966c:	d1cb      	bne.n	8009606 <quorem+0x94>
 800966e:	3c01      	subs	r4, #1
 8009670:	e7c6      	b.n	8009600 <quorem+0x8e>
 8009672:	6812      	ldr	r2, [r2, #0]
 8009674:	3b04      	subs	r3, #4
 8009676:	2a00      	cmp	r2, #0
 8009678:	d1ef      	bne.n	800965a <quorem+0xe8>
 800967a:	3c01      	subs	r4, #1
 800967c:	e7ea      	b.n	8009654 <quorem+0xe2>
 800967e:	2000      	movs	r0, #0
 8009680:	e7ee      	b.n	8009660 <quorem+0xee>
 8009682:	0000      	movs	r0, r0
 8009684:	0000      	movs	r0, r0
	...

08009688 <_dtoa_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4614      	mov	r4, r2
 800968e:	461d      	mov	r5, r3
 8009690:	69c7      	ldr	r7, [r0, #28]
 8009692:	b097      	sub	sp, #92	@ 0x5c
 8009694:	4683      	mov	fp, r0
 8009696:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800969a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800969c:	b97f      	cbnz	r7, 80096be <_dtoa_r+0x36>
 800969e:	2010      	movs	r0, #16
 80096a0:	f000 fe02 	bl	800a2a8 <malloc>
 80096a4:	4602      	mov	r2, r0
 80096a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80096aa:	b920      	cbnz	r0, 80096b6 <_dtoa_r+0x2e>
 80096ac:	21ef      	movs	r1, #239	@ 0xef
 80096ae:	4ba8      	ldr	r3, [pc, #672]	@ (8009950 <_dtoa_r+0x2c8>)
 80096b0:	48a8      	ldr	r0, [pc, #672]	@ (8009954 <_dtoa_r+0x2cc>)
 80096b2:	f001 fc59 	bl	800af68 <__assert_func>
 80096b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096ba:	6007      	str	r7, [r0, #0]
 80096bc:	60c7      	str	r7, [r0, #12]
 80096be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	b159      	cbz	r1, 80096de <_dtoa_r+0x56>
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	2301      	movs	r3, #1
 80096ca:	4093      	lsls	r3, r2
 80096cc:	604a      	str	r2, [r1, #4]
 80096ce:	608b      	str	r3, [r1, #8]
 80096d0:	4658      	mov	r0, fp
 80096d2:	f000 fedf 	bl	800a494 <_Bfree>
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	1e2b      	subs	r3, r5, #0
 80096e0:	bfaf      	iteee	ge
 80096e2:	2300      	movge	r3, #0
 80096e4:	2201      	movlt	r2, #1
 80096e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096ea:	9303      	strlt	r3, [sp, #12]
 80096ec:	bfa8      	it	ge
 80096ee:	6033      	strge	r3, [r6, #0]
 80096f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096f4:	4b98      	ldr	r3, [pc, #608]	@ (8009958 <_dtoa_r+0x2d0>)
 80096f6:	bfb8      	it	lt
 80096f8:	6032      	strlt	r2, [r6, #0]
 80096fa:	ea33 0308 	bics.w	r3, r3, r8
 80096fe:	d112      	bne.n	8009726 <_dtoa_r+0x9e>
 8009700:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009704:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800970c:	4323      	orrs	r3, r4
 800970e:	f000 8550 	beq.w	800a1b2 <_dtoa_r+0xb2a>
 8009712:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009714:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800995c <_dtoa_r+0x2d4>
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 8552 	beq.w	800a1c2 <_dtoa_r+0xb3a>
 800971e:	f10a 0303 	add.w	r3, sl, #3
 8009722:	f000 bd4c 	b.w	800a1be <_dtoa_r+0xb36>
 8009726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800972a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800972e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	f7f7 f937 	bl	80009a8 <__aeabi_dcmpeq>
 800973a:	4607      	mov	r7, r0
 800973c:	b158      	cbz	r0, 8009756 <_dtoa_r+0xce>
 800973e:	2301      	movs	r3, #1
 8009740:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009746:	b113      	cbz	r3, 800974e <_dtoa_r+0xc6>
 8009748:	4b85      	ldr	r3, [pc, #532]	@ (8009960 <_dtoa_r+0x2d8>)
 800974a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009964 <_dtoa_r+0x2dc>
 8009752:	f000 bd36 	b.w	800a1c2 <_dtoa_r+0xb3a>
 8009756:	ab14      	add	r3, sp, #80	@ 0x50
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	ab15      	add	r3, sp, #84	@ 0x54
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4658      	mov	r0, fp
 8009760:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009764:	f001 f97e 	bl	800aa64 <__d2b>
 8009768:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800976c:	4681      	mov	r9, r0
 800976e:	2e00      	cmp	r6, #0
 8009770:	d077      	beq.n	8009862 <_dtoa_r+0x1da>
 8009772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009778:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800977c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009780:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009784:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009788:	9712      	str	r7, [sp, #72]	@ 0x48
 800978a:	4619      	mov	r1, r3
 800978c:	2200      	movs	r2, #0
 800978e:	4b76      	ldr	r3, [pc, #472]	@ (8009968 <_dtoa_r+0x2e0>)
 8009790:	f7f6 fcea 	bl	8000168 <__aeabi_dsub>
 8009794:	a368      	add	r3, pc, #416	@ (adr r3, 8009938 <_dtoa_r+0x2b0>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fe9d 	bl	80004d8 <__aeabi_dmul>
 800979e:	a368      	add	r3, pc, #416	@ (adr r3, 8009940 <_dtoa_r+0x2b8>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 fce2 	bl	800016c <__adddf3>
 80097a8:	4604      	mov	r4, r0
 80097aa:	4630      	mov	r0, r6
 80097ac:	460d      	mov	r5, r1
 80097ae:	f7f6 fe29 	bl	8000404 <__aeabi_i2d>
 80097b2:	a365      	add	r3, pc, #404	@ (adr r3, 8009948 <_dtoa_r+0x2c0>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7f6 fcd2 	bl	800016c <__adddf3>
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	f7f7 f934 	bl	8000a38 <__aeabi_d2iz>
 80097d0:	2200      	movs	r2, #0
 80097d2:	4607      	mov	r7, r0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f8ef 	bl	80009bc <__aeabi_dcmplt>
 80097de:	b140      	cbz	r0, 80097f2 <_dtoa_r+0x16a>
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7f6 fe0f 	bl	8000404 <__aeabi_i2d>
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	f7f7 f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80097ee:	b900      	cbnz	r0, 80097f2 <_dtoa_r+0x16a>
 80097f0:	3f01      	subs	r7, #1
 80097f2:	2f16      	cmp	r7, #22
 80097f4:	d853      	bhi.n	800989e <_dtoa_r+0x216>
 80097f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097fa:	4b5c      	ldr	r3, [pc, #368]	@ (800996c <_dtoa_r+0x2e4>)
 80097fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f7 f8da 	bl	80009bc <__aeabi_dcmplt>
 8009808:	2800      	cmp	r0, #0
 800980a:	d04a      	beq.n	80098a2 <_dtoa_r+0x21a>
 800980c:	2300      	movs	r3, #0
 800980e:	3f01      	subs	r7, #1
 8009810:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009812:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009814:	1b9b      	subs	r3, r3, r6
 8009816:	1e5a      	subs	r2, r3, #1
 8009818:	bf46      	itte	mi
 800981a:	f1c3 0801 	rsbmi	r8, r3, #1
 800981e:	2300      	movmi	r3, #0
 8009820:	f04f 0800 	movpl.w	r8, #0
 8009824:	9209      	str	r2, [sp, #36]	@ 0x24
 8009826:	bf48      	it	mi
 8009828:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800982a:	2f00      	cmp	r7, #0
 800982c:	db3b      	blt.n	80098a6 <_dtoa_r+0x21e>
 800982e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009830:	970e      	str	r7, [sp, #56]	@ 0x38
 8009832:	443b      	add	r3, r7
 8009834:	9309      	str	r3, [sp, #36]	@ 0x24
 8009836:	2300      	movs	r3, #0
 8009838:	930a      	str	r3, [sp, #40]	@ 0x28
 800983a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800983c:	2b09      	cmp	r3, #9
 800983e:	d866      	bhi.n	800990e <_dtoa_r+0x286>
 8009840:	2b05      	cmp	r3, #5
 8009842:	bfc4      	itt	gt
 8009844:	3b04      	subgt	r3, #4
 8009846:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009848:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800984a:	bfc8      	it	gt
 800984c:	2400      	movgt	r4, #0
 800984e:	f1a3 0302 	sub.w	r3, r3, #2
 8009852:	bfd8      	it	le
 8009854:	2401      	movle	r4, #1
 8009856:	2b03      	cmp	r3, #3
 8009858:	d864      	bhi.n	8009924 <_dtoa_r+0x29c>
 800985a:	e8df f003 	tbb	[pc, r3]
 800985e:	382b      	.short	0x382b
 8009860:	5636      	.short	0x5636
 8009862:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009866:	441e      	add	r6, r3
 8009868:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800986c:	2b20      	cmp	r3, #32
 800986e:	bfc1      	itttt	gt
 8009870:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009874:	fa08 f803 	lslgt.w	r8, r8, r3
 8009878:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800987c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009880:	bfd6      	itet	le
 8009882:	f1c3 0320 	rsble	r3, r3, #32
 8009886:	ea48 0003 	orrgt.w	r0, r8, r3
 800988a:	fa04 f003 	lslle.w	r0, r4, r3
 800988e:	f7f6 fda9 	bl	80003e4 <__aeabi_ui2d>
 8009892:	2201      	movs	r2, #1
 8009894:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009898:	3e01      	subs	r6, #1
 800989a:	9212      	str	r2, [sp, #72]	@ 0x48
 800989c:	e775      	b.n	800978a <_dtoa_r+0x102>
 800989e:	2301      	movs	r3, #1
 80098a0:	e7b6      	b.n	8009810 <_dtoa_r+0x188>
 80098a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80098a4:	e7b5      	b.n	8009812 <_dtoa_r+0x18a>
 80098a6:	427b      	negs	r3, r7
 80098a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80098aa:	2300      	movs	r3, #0
 80098ac:	eba8 0807 	sub.w	r8, r8, r7
 80098b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80098b2:	e7c2      	b.n	800983a <_dtoa_r+0x1b2>
 80098b4:	2300      	movs	r3, #0
 80098b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dc35      	bgt.n	800992a <_dtoa_r+0x2a2>
 80098be:	2301      	movs	r3, #1
 80098c0:	461a      	mov	r2, r3
 80098c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80098c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80098c8:	e00b      	b.n	80098e2 <_dtoa_r+0x25a>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e7f3      	b.n	80098b6 <_dtoa_r+0x22e>
 80098ce:	2300      	movs	r3, #0
 80098d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098d4:	18fb      	adds	r3, r7, r3
 80098d6:	9308      	str	r3, [sp, #32]
 80098d8:	3301      	adds	r3, #1
 80098da:	2b01      	cmp	r3, #1
 80098dc:	9307      	str	r3, [sp, #28]
 80098de:	bfb8      	it	lt
 80098e0:	2301      	movlt	r3, #1
 80098e2:	2100      	movs	r1, #0
 80098e4:	2204      	movs	r2, #4
 80098e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80098ea:	f102 0514 	add.w	r5, r2, #20
 80098ee:	429d      	cmp	r5, r3
 80098f0:	d91f      	bls.n	8009932 <_dtoa_r+0x2aa>
 80098f2:	6041      	str	r1, [r0, #4]
 80098f4:	4658      	mov	r0, fp
 80098f6:	f000 fd8d 	bl	800a414 <_Balloc>
 80098fa:	4682      	mov	sl, r0
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d139      	bne.n	8009974 <_dtoa_r+0x2ec>
 8009900:	4602      	mov	r2, r0
 8009902:	f240 11af 	movw	r1, #431	@ 0x1af
 8009906:	4b1a      	ldr	r3, [pc, #104]	@ (8009970 <_dtoa_r+0x2e8>)
 8009908:	e6d2      	b.n	80096b0 <_dtoa_r+0x28>
 800990a:	2301      	movs	r3, #1
 800990c:	e7e0      	b.n	80098d0 <_dtoa_r+0x248>
 800990e:	2401      	movs	r4, #1
 8009910:	2300      	movs	r3, #0
 8009912:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009914:	9320      	str	r3, [sp, #128]	@ 0x80
 8009916:	f04f 33ff 	mov.w	r3, #4294967295
 800991a:	2200      	movs	r2, #0
 800991c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009920:	2312      	movs	r3, #18
 8009922:	e7d0      	b.n	80098c6 <_dtoa_r+0x23e>
 8009924:	2301      	movs	r3, #1
 8009926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009928:	e7f5      	b.n	8009916 <_dtoa_r+0x28e>
 800992a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800992c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009930:	e7d7      	b.n	80098e2 <_dtoa_r+0x25a>
 8009932:	3101      	adds	r1, #1
 8009934:	0052      	lsls	r2, r2, #1
 8009936:	e7d8      	b.n	80098ea <_dtoa_r+0x262>
 8009938:	636f4361 	.word	0x636f4361
 800993c:	3fd287a7 	.word	0x3fd287a7
 8009940:	8b60c8b3 	.word	0x8b60c8b3
 8009944:	3fc68a28 	.word	0x3fc68a28
 8009948:	509f79fb 	.word	0x509f79fb
 800994c:	3fd34413 	.word	0x3fd34413
 8009950:	0800b863 	.word	0x0800b863
 8009954:	0800b87a 	.word	0x0800b87a
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	0800b85f 	.word	0x0800b85f
 8009960:	0800b833 	.word	0x0800b833
 8009964:	0800b832 	.word	0x0800b832
 8009968:	3ff80000 	.word	0x3ff80000
 800996c:	0800b970 	.word	0x0800b970
 8009970:	0800b8d2 	.word	0x0800b8d2
 8009974:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009978:	6018      	str	r0, [r3, #0]
 800997a:	9b07      	ldr	r3, [sp, #28]
 800997c:	2b0e      	cmp	r3, #14
 800997e:	f200 80a4 	bhi.w	8009aca <_dtoa_r+0x442>
 8009982:	2c00      	cmp	r4, #0
 8009984:	f000 80a1 	beq.w	8009aca <_dtoa_r+0x442>
 8009988:	2f00      	cmp	r7, #0
 800998a:	dd33      	ble.n	80099f4 <_dtoa_r+0x36c>
 800998c:	4b86      	ldr	r3, [pc, #536]	@ (8009ba8 <_dtoa_r+0x520>)
 800998e:	f007 020f 	and.w	r2, r7, #15
 8009992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009996:	05f8      	lsls	r0, r7, #23
 8009998:	e9d3 3400 	ldrd	r3, r4, [r3]
 800999c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80099a4:	d516      	bpl.n	80099d4 <_dtoa_r+0x34c>
 80099a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099aa:	4b80      	ldr	r3, [pc, #512]	@ (8009bac <_dtoa_r+0x524>)
 80099ac:	2603      	movs	r6, #3
 80099ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099b2:	f7f6 febb 	bl	800072c <__aeabi_ddiv>
 80099b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ba:	f004 040f 	and.w	r4, r4, #15
 80099be:	4d7b      	ldr	r5, [pc, #492]	@ (8009bac <_dtoa_r+0x524>)
 80099c0:	b954      	cbnz	r4, 80099d8 <_dtoa_r+0x350>
 80099c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ca:	f7f6 feaf 	bl	800072c <__aeabi_ddiv>
 80099ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d2:	e028      	b.n	8009a26 <_dtoa_r+0x39e>
 80099d4:	2602      	movs	r6, #2
 80099d6:	e7f2      	b.n	80099be <_dtoa_r+0x336>
 80099d8:	07e1      	lsls	r1, r4, #31
 80099da:	d508      	bpl.n	80099ee <_dtoa_r+0x366>
 80099dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099e4:	f7f6 fd78 	bl	80004d8 <__aeabi_dmul>
 80099e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099ec:	3601      	adds	r6, #1
 80099ee:	1064      	asrs	r4, r4, #1
 80099f0:	3508      	adds	r5, #8
 80099f2:	e7e5      	b.n	80099c0 <_dtoa_r+0x338>
 80099f4:	f000 80d2 	beq.w	8009b9c <_dtoa_r+0x514>
 80099f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099fc:	427c      	negs	r4, r7
 80099fe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ba8 <_dtoa_r+0x520>)
 8009a00:	f004 020f 	and.w	r2, r4, #15
 8009a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	f7f6 fd64 	bl	80004d8 <__aeabi_dmul>
 8009a10:	2602      	movs	r6, #2
 8009a12:	2300      	movs	r3, #0
 8009a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a18:	4d64      	ldr	r5, [pc, #400]	@ (8009bac <_dtoa_r+0x524>)
 8009a1a:	1124      	asrs	r4, r4, #4
 8009a1c:	2c00      	cmp	r4, #0
 8009a1e:	f040 80b2 	bne.w	8009b86 <_dtoa_r+0x4fe>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1d3      	bne.n	80099ce <_dtoa_r+0x346>
 8009a26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 80b7 	beq.w	8009ba0 <_dtoa_r+0x518>
 8009a32:	2200      	movs	r2, #0
 8009a34:	4620      	mov	r0, r4
 8009a36:	4629      	mov	r1, r5
 8009a38:	4b5d      	ldr	r3, [pc, #372]	@ (8009bb0 <_dtoa_r+0x528>)
 8009a3a:	f7f6 ffbf 	bl	80009bc <__aeabi_dcmplt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f000 80ae 	beq.w	8009ba0 <_dtoa_r+0x518>
 8009a44:	9b07      	ldr	r3, [sp, #28]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 80aa 	beq.w	8009ba0 <_dtoa_r+0x518>
 8009a4c:	9b08      	ldr	r3, [sp, #32]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dd37      	ble.n	8009ac2 <_dtoa_r+0x43a>
 8009a52:	1e7b      	subs	r3, r7, #1
 8009a54:	4620      	mov	r0, r4
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	4b55      	ldr	r3, [pc, #340]	@ (8009bb4 <_dtoa_r+0x52c>)
 8009a5e:	f7f6 fd3b 	bl	80004d8 <__aeabi_dmul>
 8009a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a66:	9c08      	ldr	r4, [sp, #32]
 8009a68:	3601      	adds	r6, #1
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7f6 fcca 	bl	8000404 <__aeabi_i2d>
 8009a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a74:	f7f6 fd30 	bl	80004d8 <__aeabi_dmul>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb8 <_dtoa_r+0x530>)
 8009a7c:	f7f6 fb76 	bl	800016c <__adddf3>
 8009a80:	4605      	mov	r5, r0
 8009a82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	f040 809a 	bne.w	8009bc0 <_dtoa_r+0x538>
 8009a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b4a      	ldr	r3, [pc, #296]	@ (8009bbc <_dtoa_r+0x534>)
 8009a94:	f7f6 fb68 	bl	8000168 <__aeabi_dsub>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4633      	mov	r3, r6
 8009aa4:	f7f6 ffa8 	bl	80009f8 <__aeabi_dcmpgt>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f040 828e 	bne.w	8009fca <_dtoa_r+0x942>
 8009aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ab8:	f7f6 ff80 	bl	80009bc <__aeabi_dcmplt>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	f040 8127 	bne.w	8009d10 <_dtoa_r+0x688>
 8009ac2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009ac6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009aca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f2c0 8163 	blt.w	8009d98 <_dtoa_r+0x710>
 8009ad2:	2f0e      	cmp	r7, #14
 8009ad4:	f300 8160 	bgt.w	8009d98 <_dtoa_r+0x710>
 8009ad8:	4b33      	ldr	r3, [pc, #204]	@ (8009ba8 <_dtoa_r+0x520>)
 8009ada:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ae2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ae6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	da03      	bge.n	8009af4 <_dtoa_r+0x46c>
 8009aec:	9b07      	ldr	r3, [sp, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f340 8100 	ble.w	8009cf4 <_dtoa_r+0x66c>
 8009af4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009af8:	4656      	mov	r6, sl
 8009afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fe13 	bl	800072c <__aeabi_ddiv>
 8009b06:	f7f6 ff97 	bl	8000a38 <__aeabi_d2iz>
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	f7f6 fc7a 	bl	8000404 <__aeabi_i2d>
 8009b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b14:	f7f6 fce0 	bl	80004d8 <__aeabi_dmul>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4629      	mov	r1, r5
 8009b20:	f7f6 fb22 	bl	8000168 <__aeabi_dsub>
 8009b24:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b28:	9d07      	ldr	r5, [sp, #28]
 8009b2a:	f806 4b01 	strb.w	r4, [r6], #1
 8009b2e:	eba6 040a 	sub.w	r4, r6, sl
 8009b32:	42a5      	cmp	r5, r4
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	f040 8116 	bne.w	8009d68 <_dtoa_r+0x6e0>
 8009b3c:	f7f6 fb16 	bl	800016c <__adddf3>
 8009b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	f7f6 ff56 	bl	80009f8 <__aeabi_dcmpgt>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f040 80f8 	bne.w	8009d42 <_dtoa_r+0x6ba>
 8009b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b56:	4620      	mov	r0, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7f6 ff25 	bl	80009a8 <__aeabi_dcmpeq>
 8009b5e:	b118      	cbz	r0, 8009b68 <_dtoa_r+0x4e0>
 8009b60:	f018 0f01 	tst.w	r8, #1
 8009b64:	f040 80ed 	bne.w	8009d42 <_dtoa_r+0x6ba>
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4658      	mov	r0, fp
 8009b6c:	f000 fc92 	bl	800a494 <_Bfree>
 8009b70:	2300      	movs	r3, #0
 8009b72:	7033      	strb	r3, [r6, #0]
 8009b74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009b76:	3701      	adds	r7, #1
 8009b78:	601f      	str	r7, [r3, #0]
 8009b7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8320 	beq.w	800a1c2 <_dtoa_r+0xb3a>
 8009b82:	601e      	str	r6, [r3, #0]
 8009b84:	e31d      	b.n	800a1c2 <_dtoa_r+0xb3a>
 8009b86:	07e2      	lsls	r2, r4, #31
 8009b88:	d505      	bpl.n	8009b96 <_dtoa_r+0x50e>
 8009b8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b8e:	f7f6 fca3 	bl	80004d8 <__aeabi_dmul>
 8009b92:	2301      	movs	r3, #1
 8009b94:	3601      	adds	r6, #1
 8009b96:	1064      	asrs	r4, r4, #1
 8009b98:	3508      	adds	r5, #8
 8009b9a:	e73f      	b.n	8009a1c <_dtoa_r+0x394>
 8009b9c:	2602      	movs	r6, #2
 8009b9e:	e742      	b.n	8009a26 <_dtoa_r+0x39e>
 8009ba0:	9c07      	ldr	r4, [sp, #28]
 8009ba2:	9704      	str	r7, [sp, #16]
 8009ba4:	e761      	b.n	8009a6a <_dtoa_r+0x3e2>
 8009ba6:	bf00      	nop
 8009ba8:	0800b970 	.word	0x0800b970
 8009bac:	0800b948 	.word	0x0800b948
 8009bb0:	3ff00000 	.word	0x3ff00000
 8009bb4:	40240000 	.word	0x40240000
 8009bb8:	401c0000 	.word	0x401c0000
 8009bbc:	40140000 	.word	0x40140000
 8009bc0:	4b70      	ldr	r3, [pc, #448]	@ (8009d84 <_dtoa_r+0x6fc>)
 8009bc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009bc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bcc:	4454      	add	r4, sl
 8009bce:	2900      	cmp	r1, #0
 8009bd0:	d045      	beq.n	8009c5e <_dtoa_r+0x5d6>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	496c      	ldr	r1, [pc, #432]	@ (8009d88 <_dtoa_r+0x700>)
 8009bd6:	f7f6 fda9 	bl	800072c <__aeabi_ddiv>
 8009bda:	4633      	mov	r3, r6
 8009bdc:	462a      	mov	r2, r5
 8009bde:	f7f6 fac3 	bl	8000168 <__aeabi_dsub>
 8009be2:	4656      	mov	r6, sl
 8009be4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bec:	f7f6 ff24 	bl	8000a38 <__aeabi_d2iz>
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	f7f6 fc07 	bl	8000404 <__aeabi_i2d>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bfe:	f7f6 fab3 	bl	8000168 <__aeabi_dsub>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	3530      	adds	r5, #48	@ 0x30
 8009c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c10:	f806 5b01 	strb.w	r5, [r6], #1
 8009c14:	f7f6 fed2 	bl	80009bc <__aeabi_dcmplt>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d163      	bne.n	8009ce4 <_dtoa_r+0x65c>
 8009c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c20:	2000      	movs	r0, #0
 8009c22:	495a      	ldr	r1, [pc, #360]	@ (8009d8c <_dtoa_r+0x704>)
 8009c24:	f7f6 faa0 	bl	8000168 <__aeabi_dsub>
 8009c28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c2c:	f7f6 fec6 	bl	80009bc <__aeabi_dcmplt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f040 8087 	bne.w	8009d44 <_dtoa_r+0x6bc>
 8009c36:	42a6      	cmp	r6, r4
 8009c38:	f43f af43 	beq.w	8009ac2 <_dtoa_r+0x43a>
 8009c3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c40:	2200      	movs	r2, #0
 8009c42:	4b53      	ldr	r3, [pc, #332]	@ (8009d90 <_dtoa_r+0x708>)
 8009c44:	f7f6 fc48 	bl	80004d8 <__aeabi_dmul>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c52:	4b4f      	ldr	r3, [pc, #316]	@ (8009d90 <_dtoa_r+0x708>)
 8009c54:	f7f6 fc40 	bl	80004d8 <__aeabi_dmul>
 8009c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c5c:	e7c4      	b.n	8009be8 <_dtoa_r+0x560>
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4628      	mov	r0, r5
 8009c62:	f7f6 fc39 	bl	80004d8 <__aeabi_dmul>
 8009c66:	4656      	mov	r6, sl
 8009c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c6c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c72:	f7f6 fee1 	bl	8000a38 <__aeabi_d2iz>
 8009c76:	4605      	mov	r5, r0
 8009c78:	f7f6 fbc4 	bl	8000404 <__aeabi_i2d>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c84:	f7f6 fa70 	bl	8000168 <__aeabi_dsub>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	3530      	adds	r5, #48	@ 0x30
 8009c8e:	f806 5b01 	strb.w	r5, [r6], #1
 8009c92:	42a6      	cmp	r6, r4
 8009c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c98:	f04f 0200 	mov.w	r2, #0
 8009c9c:	d124      	bne.n	8009ce8 <_dtoa_r+0x660>
 8009c9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ca2:	4b39      	ldr	r3, [pc, #228]	@ (8009d88 <_dtoa_r+0x700>)
 8009ca4:	f7f6 fa62 	bl	800016c <__adddf3>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb0:	f7f6 fea2 	bl	80009f8 <__aeabi_dcmpgt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d145      	bne.n	8009d44 <_dtoa_r+0x6bc>
 8009cb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	4932      	ldr	r1, [pc, #200]	@ (8009d88 <_dtoa_r+0x700>)
 8009cc0:	f7f6 fa52 	bl	8000168 <__aeabi_dsub>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ccc:	f7f6 fe76 	bl	80009bc <__aeabi_dcmplt>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f43f aef6 	beq.w	8009ac2 <_dtoa_r+0x43a>
 8009cd6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009cd8:	1e73      	subs	r3, r6, #1
 8009cda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ce0:	2b30      	cmp	r3, #48	@ 0x30
 8009ce2:	d0f8      	beq.n	8009cd6 <_dtoa_r+0x64e>
 8009ce4:	9f04      	ldr	r7, [sp, #16]
 8009ce6:	e73f      	b.n	8009b68 <_dtoa_r+0x4e0>
 8009ce8:	4b29      	ldr	r3, [pc, #164]	@ (8009d90 <_dtoa_r+0x708>)
 8009cea:	f7f6 fbf5 	bl	80004d8 <__aeabi_dmul>
 8009cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf2:	e7bc      	b.n	8009c6e <_dtoa_r+0x5e6>
 8009cf4:	d10c      	bne.n	8009d10 <_dtoa_r+0x688>
 8009cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b25      	ldr	r3, [pc, #148]	@ (8009d94 <_dtoa_r+0x70c>)
 8009cfe:	f7f6 fbeb 	bl	80004d8 <__aeabi_dmul>
 8009d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d06:	f7f6 fe6d 	bl	80009e4 <__aeabi_dcmpge>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	f000 815b 	beq.w	8009fc6 <_dtoa_r+0x93e>
 8009d10:	2400      	movs	r4, #0
 8009d12:	4625      	mov	r5, r4
 8009d14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d16:	4656      	mov	r6, sl
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	2700      	movs	r7, #0
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4658      	mov	r0, fp
 8009d22:	f000 fbb7 	bl	800a494 <_Bfree>
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	d0dc      	beq.n	8009ce4 <_dtoa_r+0x65c>
 8009d2a:	b12f      	cbz	r7, 8009d38 <_dtoa_r+0x6b0>
 8009d2c:	42af      	cmp	r7, r5
 8009d2e:	d003      	beq.n	8009d38 <_dtoa_r+0x6b0>
 8009d30:	4639      	mov	r1, r7
 8009d32:	4658      	mov	r0, fp
 8009d34:	f000 fbae 	bl	800a494 <_Bfree>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 fbaa 	bl	800a494 <_Bfree>
 8009d40:	e7d0      	b.n	8009ce4 <_dtoa_r+0x65c>
 8009d42:	9704      	str	r7, [sp, #16]
 8009d44:	4633      	mov	r3, r6
 8009d46:	461e      	mov	r6, r3
 8009d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d4c:	2a39      	cmp	r2, #57	@ 0x39
 8009d4e:	d107      	bne.n	8009d60 <_dtoa_r+0x6d8>
 8009d50:	459a      	cmp	sl, r3
 8009d52:	d1f8      	bne.n	8009d46 <_dtoa_r+0x6be>
 8009d54:	9a04      	ldr	r2, [sp, #16]
 8009d56:	3201      	adds	r2, #1
 8009d58:	9204      	str	r2, [sp, #16]
 8009d5a:	2230      	movs	r2, #48	@ 0x30
 8009d5c:	f88a 2000 	strb.w	r2, [sl]
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	3201      	adds	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e7bd      	b.n	8009ce4 <_dtoa_r+0x65c>
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <_dtoa_r+0x708>)
 8009d6c:	f7f6 fbb4 	bl	80004d8 <__aeabi_dmul>
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	f7f6 fe16 	bl	80009a8 <__aeabi_dcmpeq>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f43f aebc 	beq.w	8009afa <_dtoa_r+0x472>
 8009d82:	e6f1      	b.n	8009b68 <_dtoa_r+0x4e0>
 8009d84:	0800b970 	.word	0x0800b970
 8009d88:	3fe00000 	.word	0x3fe00000
 8009d8c:	3ff00000 	.word	0x3ff00000
 8009d90:	40240000 	.word	0x40240000
 8009d94:	40140000 	.word	0x40140000
 8009d98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	f000 80db 	beq.w	8009f56 <_dtoa_r+0x8ce>
 8009da0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009da2:	2a01      	cmp	r2, #1
 8009da4:	f300 80bf 	bgt.w	8009f26 <_dtoa_r+0x89e>
 8009da8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009daa:	2a00      	cmp	r2, #0
 8009dac:	f000 80b7 	beq.w	8009f1e <_dtoa_r+0x896>
 8009db0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009db4:	4646      	mov	r6, r8
 8009db6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dba:	2101      	movs	r1, #1
 8009dbc:	441a      	add	r2, r3
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	4498      	add	r8, r3
 8009dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dc4:	f000 fc1a 	bl	800a5fc <__i2b>
 8009dc8:	4605      	mov	r5, r0
 8009dca:	b15e      	cbz	r6, 8009de4 <_dtoa_r+0x75c>
 8009dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dd08      	ble.n	8009de4 <_dtoa_r+0x75c>
 8009dd2:	42b3      	cmp	r3, r6
 8009dd4:	bfa8      	it	ge
 8009dd6:	4633      	movge	r3, r6
 8009dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dda:	eba8 0803 	sub.w	r8, r8, r3
 8009dde:	1af6      	subs	r6, r6, r3
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de6:	b1f3      	cbz	r3, 8009e26 <_dtoa_r+0x79e>
 8009de8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 80b7 	beq.w	8009f5e <_dtoa_r+0x8d6>
 8009df0:	b18c      	cbz	r4, 8009e16 <_dtoa_r+0x78e>
 8009df2:	4629      	mov	r1, r5
 8009df4:	4622      	mov	r2, r4
 8009df6:	4658      	mov	r0, fp
 8009df8:	f000 fcbe 	bl	800a778 <__pow5mult>
 8009dfc:	464a      	mov	r2, r9
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4605      	mov	r5, r0
 8009e02:	4658      	mov	r0, fp
 8009e04:	f000 fc10 	bl	800a628 <__multiply>
 8009e08:	4649      	mov	r1, r9
 8009e0a:	9004      	str	r0, [sp, #16]
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	f000 fb41 	bl	800a494 <_Bfree>
 8009e12:	9b04      	ldr	r3, [sp, #16]
 8009e14:	4699      	mov	r9, r3
 8009e16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e18:	1b1a      	subs	r2, r3, r4
 8009e1a:	d004      	beq.n	8009e26 <_dtoa_r+0x79e>
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4658      	mov	r0, fp
 8009e20:	f000 fcaa 	bl	800a778 <__pow5mult>
 8009e24:	4681      	mov	r9, r0
 8009e26:	2101      	movs	r1, #1
 8009e28:	4658      	mov	r0, fp
 8009e2a:	f000 fbe7 	bl	800a5fc <__i2b>
 8009e2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e30:	4604      	mov	r4, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 81c9 	beq.w	800a1ca <_dtoa_r+0xb42>
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4658      	mov	r0, fp
 8009e3e:	f000 fc9b 	bl	800a778 <__pow5mult>
 8009e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e44:	4604      	mov	r4, r0
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	f300 808f 	bgt.w	8009f6a <_dtoa_r+0x8e2>
 8009e4c:	9b02      	ldr	r3, [sp, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 8087 	bne.w	8009f62 <_dtoa_r+0x8da>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f040 8083 	bne.w	8009f66 <_dtoa_r+0x8de>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	051b      	lsls	r3, r3, #20
 8009e6a:	b12b      	cbz	r3, 8009e78 <_dtoa_r+0x7f0>
 8009e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6e:	f108 0801 	add.w	r8, r8, #1
 8009e72:	3301      	adds	r3, #1
 8009e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e76:	2301      	movs	r3, #1
 8009e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 81aa 	beq.w	800a1d6 <_dtoa_r+0xb4e>
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e88:	6918      	ldr	r0, [r3, #16]
 8009e8a:	f000 fb6b 	bl	800a564 <__hi0bits>
 8009e8e:	f1c0 0020 	rsb	r0, r0, #32
 8009e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e94:	4418      	add	r0, r3
 8009e96:	f010 001f 	ands.w	r0, r0, #31
 8009e9a:	d071      	beq.n	8009f80 <_dtoa_r+0x8f8>
 8009e9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	dd65      	ble.n	8009f70 <_dtoa_r+0x8e8>
 8009ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea6:	f1c0 001c 	rsb	r0, r0, #28
 8009eaa:	4403      	add	r3, r0
 8009eac:	4480      	add	r8, r0
 8009eae:	4406      	add	r6, r0
 8009eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eb2:	f1b8 0f00 	cmp.w	r8, #0
 8009eb6:	dd05      	ble.n	8009ec4 <_dtoa_r+0x83c>
 8009eb8:	4649      	mov	r1, r9
 8009eba:	4642      	mov	r2, r8
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	f000 fcb5 	bl	800a82c <__lshift>
 8009ec2:	4681      	mov	r9, r0
 8009ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dd05      	ble.n	8009ed6 <_dtoa_r+0x84e>
 8009eca:	4621      	mov	r1, r4
 8009ecc:	461a      	mov	r2, r3
 8009ece:	4658      	mov	r0, fp
 8009ed0:	f000 fcac 	bl	800a82c <__lshift>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d053      	beq.n	8009f84 <_dtoa_r+0x8fc>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f000 fd10 	bl	800a904 <__mcmp>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	da4d      	bge.n	8009f84 <_dtoa_r+0x8fc>
 8009ee8:	1e7b      	subs	r3, r7, #1
 8009eea:	4649      	mov	r1, r9
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	220a      	movs	r2, #10
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4658      	mov	r0, fp
 8009ef4:	f000 faf0 	bl	800a4d8 <__multadd>
 8009ef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009efa:	4681      	mov	r9, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 816c 	beq.w	800a1da <_dtoa_r+0xb52>
 8009f02:	2300      	movs	r3, #0
 8009f04:	4629      	mov	r1, r5
 8009f06:	220a      	movs	r2, #10
 8009f08:	4658      	mov	r0, fp
 8009f0a:	f000 fae5 	bl	800a4d8 <__multadd>
 8009f0e:	9b08      	ldr	r3, [sp, #32]
 8009f10:	4605      	mov	r5, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dc61      	bgt.n	8009fda <_dtoa_r+0x952>
 8009f16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	dc3b      	bgt.n	8009f94 <_dtoa_r+0x90c>
 8009f1c:	e05d      	b.n	8009fda <_dtoa_r+0x952>
 8009f1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f24:	e746      	b.n	8009db4 <_dtoa_r+0x72c>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	1e5c      	subs	r4, r3, #1
 8009f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	bfbf      	itttt	lt
 8009f30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009f34:	1ae3      	sublt	r3, r4, r3
 8009f36:	18d2      	addlt	r2, r2, r3
 8009f38:	bfa8      	it	ge
 8009f3a:	1b1c      	subge	r4, r3, r4
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	bfbe      	ittt	lt
 8009f40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009f44:	2400      	movlt	r4, #0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfb5      	itete	lt
 8009f4a:	eba8 0603 	sublt.w	r6, r8, r3
 8009f4e:	4646      	movge	r6, r8
 8009f50:	2300      	movlt	r3, #0
 8009f52:	9b07      	ldrge	r3, [sp, #28]
 8009f54:	e730      	b.n	8009db8 <_dtoa_r+0x730>
 8009f56:	4646      	mov	r6, r8
 8009f58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f5c:	e735      	b.n	8009dca <_dtoa_r+0x742>
 8009f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f60:	e75c      	b.n	8009e1c <_dtoa_r+0x794>
 8009f62:	2300      	movs	r3, #0
 8009f64:	e788      	b.n	8009e78 <_dtoa_r+0x7f0>
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	e786      	b.n	8009e78 <_dtoa_r+0x7f0>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f6e:	e788      	b.n	8009e82 <_dtoa_r+0x7fa>
 8009f70:	d09f      	beq.n	8009eb2 <_dtoa_r+0x82a>
 8009f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f74:	331c      	adds	r3, #28
 8009f76:	441a      	add	r2, r3
 8009f78:	4498      	add	r8, r3
 8009f7a:	441e      	add	r6, r3
 8009f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f7e:	e798      	b.n	8009eb2 <_dtoa_r+0x82a>
 8009f80:	4603      	mov	r3, r0
 8009f82:	e7f6      	b.n	8009f72 <_dtoa_r+0x8ea>
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	9704      	str	r7, [sp, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dc20      	bgt.n	8009fce <_dtoa_r+0x946>
 8009f8c:	9308      	str	r3, [sp, #32]
 8009f8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	dd1e      	ble.n	8009fd2 <_dtoa_r+0x94a>
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f47f aebc 	bne.w	8009d14 <_dtoa_r+0x68c>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	2205      	movs	r2, #5
 8009fa0:	4658      	mov	r0, fp
 8009fa2:	f000 fa99 	bl	800a4d8 <__multadd>
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4648      	mov	r0, r9
 8009fac:	f000 fcaa 	bl	800a904 <__mcmp>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f77f aeaf 	ble.w	8009d14 <_dtoa_r+0x68c>
 8009fb6:	2331      	movs	r3, #49	@ 0x31
 8009fb8:	4656      	mov	r6, sl
 8009fba:	f806 3b01 	strb.w	r3, [r6], #1
 8009fbe:	9b04      	ldr	r3, [sp, #16]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	e6aa      	b.n	8009d1c <_dtoa_r+0x694>
 8009fc6:	9c07      	ldr	r4, [sp, #28]
 8009fc8:	9704      	str	r7, [sp, #16]
 8009fca:	4625      	mov	r5, r4
 8009fcc:	e7f3      	b.n	8009fb6 <_dtoa_r+0x92e>
 8009fce:	9b07      	ldr	r3, [sp, #28]
 8009fd0:	9308      	str	r3, [sp, #32]
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 8104 	beq.w	800a1e2 <_dtoa_r+0xb5a>
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	dd05      	ble.n	8009fea <_dtoa_r+0x962>
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	4658      	mov	r0, fp
 8009fe4:	f000 fc22 	bl	800a82c <__lshift>
 8009fe8:	4605      	mov	r5, r0
 8009fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d05a      	beq.n	800a0a6 <_dtoa_r+0xa1e>
 8009ff0:	4658      	mov	r0, fp
 8009ff2:	6869      	ldr	r1, [r5, #4]
 8009ff4:	f000 fa0e 	bl	800a414 <_Balloc>
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	b928      	cbnz	r0, 800a008 <_dtoa_r+0x980>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a002:	4b83      	ldr	r3, [pc, #524]	@ (800a210 <_dtoa_r+0xb88>)
 800a004:	f7ff bb54 	b.w	80096b0 <_dtoa_r+0x28>
 800a008:	692a      	ldr	r2, [r5, #16]
 800a00a:	f105 010c 	add.w	r1, r5, #12
 800a00e:	3202      	adds	r2, #2
 800a010:	0092      	lsls	r2, r2, #2
 800a012:	300c      	adds	r0, #12
 800a014:	f7ff fa9f 	bl	8009556 <memcpy>
 800a018:	2201      	movs	r2, #1
 800a01a:	4631      	mov	r1, r6
 800a01c:	4658      	mov	r0, fp
 800a01e:	f000 fc05 	bl	800a82c <__lshift>
 800a022:	462f      	mov	r7, r5
 800a024:	4605      	mov	r5, r0
 800a026:	f10a 0301 	add.w	r3, sl, #1
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	9b08      	ldr	r3, [sp, #32]
 800a02e:	4453      	add	r3, sl
 800a030:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a032:	9b02      	ldr	r3, [sp, #8]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	930a      	str	r3, [sp, #40]	@ 0x28
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	4621      	mov	r1, r4
 800a03e:	3b01      	subs	r3, #1
 800a040:	4648      	mov	r0, r9
 800a042:	9302      	str	r3, [sp, #8]
 800a044:	f7ff fa95 	bl	8009572 <quorem>
 800a048:	4639      	mov	r1, r7
 800a04a:	9008      	str	r0, [sp, #32]
 800a04c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a050:	4648      	mov	r0, r9
 800a052:	f000 fc57 	bl	800a904 <__mcmp>
 800a056:	462a      	mov	r2, r5
 800a058:	9009      	str	r0, [sp, #36]	@ 0x24
 800a05a:	4621      	mov	r1, r4
 800a05c:	4658      	mov	r0, fp
 800a05e:	f000 fc6d 	bl	800a93c <__mdiff>
 800a062:	68c2      	ldr	r2, [r0, #12]
 800a064:	4606      	mov	r6, r0
 800a066:	bb02      	cbnz	r2, 800a0aa <_dtoa_r+0xa22>
 800a068:	4601      	mov	r1, r0
 800a06a:	4648      	mov	r0, r9
 800a06c:	f000 fc4a 	bl	800a904 <__mcmp>
 800a070:	4602      	mov	r2, r0
 800a072:	4631      	mov	r1, r6
 800a074:	4658      	mov	r0, fp
 800a076:	920c      	str	r2, [sp, #48]	@ 0x30
 800a078:	f000 fa0c 	bl	800a494 <_Bfree>
 800a07c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a07e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a080:	9e07      	ldr	r6, [sp, #28]
 800a082:	ea43 0102 	orr.w	r1, r3, r2
 800a086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a088:	4319      	orrs	r1, r3
 800a08a:	d110      	bne.n	800a0ae <_dtoa_r+0xa26>
 800a08c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a090:	d029      	beq.n	800a0e6 <_dtoa_r+0xa5e>
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	dd02      	ble.n	800a09e <_dtoa_r+0xa16>
 800a098:	9b08      	ldr	r3, [sp, #32]
 800a09a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a09e:	9b02      	ldr	r3, [sp, #8]
 800a0a0:	f883 8000 	strb.w	r8, [r3]
 800a0a4:	e63b      	b.n	8009d1e <_dtoa_r+0x696>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	e7bb      	b.n	800a022 <_dtoa_r+0x99a>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	e7e1      	b.n	800a072 <_dtoa_r+0x9ea>
 800a0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	db04      	blt.n	800a0be <_dtoa_r+0xa36>
 800a0b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	d120      	bne.n	800a100 <_dtoa_r+0xa78>
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	dded      	ble.n	800a09e <_dtoa_r+0xa16>
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 fbb0 	bl	800a82c <__lshift>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4681      	mov	r9, r0
 800a0d0:	f000 fc18 	bl	800a904 <__mcmp>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	dc03      	bgt.n	800a0e0 <_dtoa_r+0xa58>
 800a0d8:	d1e1      	bne.n	800a09e <_dtoa_r+0xa16>
 800a0da:	f018 0f01 	tst.w	r8, #1
 800a0de:	d0de      	beq.n	800a09e <_dtoa_r+0xa16>
 800a0e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0e4:	d1d8      	bne.n	800a098 <_dtoa_r+0xa10>
 800a0e6:	2339      	movs	r3, #57	@ 0x39
 800a0e8:	9a02      	ldr	r2, [sp, #8]
 800a0ea:	7013      	strb	r3, [r2, #0]
 800a0ec:	4633      	mov	r3, r6
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	2a39      	cmp	r2, #57	@ 0x39
 800a0f8:	d052      	beq.n	800a1a0 <_dtoa_r+0xb18>
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e60e      	b.n	8009d1e <_dtoa_r+0x696>
 800a100:	2a00      	cmp	r2, #0
 800a102:	dd07      	ble.n	800a114 <_dtoa_r+0xa8c>
 800a104:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a108:	d0ed      	beq.n	800a0e6 <_dtoa_r+0xa5e>
 800a10a:	9a02      	ldr	r2, [sp, #8]
 800a10c:	f108 0301 	add.w	r3, r8, #1
 800a110:	7013      	strb	r3, [r2, #0]
 800a112:	e604      	b.n	8009d1e <_dtoa_r+0x696>
 800a114:	9b07      	ldr	r3, [sp, #28]
 800a116:	9a07      	ldr	r2, [sp, #28]
 800a118:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a11c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a11e:	4293      	cmp	r3, r2
 800a120:	d028      	beq.n	800a174 <_dtoa_r+0xaec>
 800a122:	4649      	mov	r1, r9
 800a124:	2300      	movs	r3, #0
 800a126:	220a      	movs	r2, #10
 800a128:	4658      	mov	r0, fp
 800a12a:	f000 f9d5 	bl	800a4d8 <__multadd>
 800a12e:	42af      	cmp	r7, r5
 800a130:	4681      	mov	r9, r0
 800a132:	f04f 0300 	mov.w	r3, #0
 800a136:	f04f 020a 	mov.w	r2, #10
 800a13a:	4639      	mov	r1, r7
 800a13c:	4658      	mov	r0, fp
 800a13e:	d107      	bne.n	800a150 <_dtoa_r+0xac8>
 800a140:	f000 f9ca 	bl	800a4d8 <__multadd>
 800a144:	4607      	mov	r7, r0
 800a146:	4605      	mov	r5, r0
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	3301      	adds	r3, #1
 800a14c:	9307      	str	r3, [sp, #28]
 800a14e:	e774      	b.n	800a03a <_dtoa_r+0x9b2>
 800a150:	f000 f9c2 	bl	800a4d8 <__multadd>
 800a154:	4629      	mov	r1, r5
 800a156:	4607      	mov	r7, r0
 800a158:	2300      	movs	r3, #0
 800a15a:	220a      	movs	r2, #10
 800a15c:	4658      	mov	r0, fp
 800a15e:	f000 f9bb 	bl	800a4d8 <__multadd>
 800a162:	4605      	mov	r5, r0
 800a164:	e7f0      	b.n	800a148 <_dtoa_r+0xac0>
 800a166:	9b08      	ldr	r3, [sp, #32]
 800a168:	2700      	movs	r7, #0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	bfcc      	ite	gt
 800a16e:	461e      	movgt	r6, r3
 800a170:	2601      	movle	r6, #1
 800a172:	4456      	add	r6, sl
 800a174:	4649      	mov	r1, r9
 800a176:	2201      	movs	r2, #1
 800a178:	4658      	mov	r0, fp
 800a17a:	f000 fb57 	bl	800a82c <__lshift>
 800a17e:	4621      	mov	r1, r4
 800a180:	4681      	mov	r9, r0
 800a182:	f000 fbbf 	bl	800a904 <__mcmp>
 800a186:	2800      	cmp	r0, #0
 800a188:	dcb0      	bgt.n	800a0ec <_dtoa_r+0xa64>
 800a18a:	d102      	bne.n	800a192 <_dtoa_r+0xb0a>
 800a18c:	f018 0f01 	tst.w	r8, #1
 800a190:	d1ac      	bne.n	800a0ec <_dtoa_r+0xa64>
 800a192:	4633      	mov	r3, r6
 800a194:	461e      	mov	r6, r3
 800a196:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a19a:	2a30      	cmp	r2, #48	@ 0x30
 800a19c:	d0fa      	beq.n	800a194 <_dtoa_r+0xb0c>
 800a19e:	e5be      	b.n	8009d1e <_dtoa_r+0x696>
 800a1a0:	459a      	cmp	sl, r3
 800a1a2:	d1a4      	bne.n	800a0ee <_dtoa_r+0xa66>
 800a1a4:	9b04      	ldr	r3, [sp, #16]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	2331      	movs	r3, #49	@ 0x31
 800a1ac:	f88a 3000 	strb.w	r3, [sl]
 800a1b0:	e5b5      	b.n	8009d1e <_dtoa_r+0x696>
 800a1b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a1b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a214 <_dtoa_r+0xb8c>
 800a1b8:	b11b      	cbz	r3, 800a1c2 <_dtoa_r+0xb3a>
 800a1ba:	f10a 0308 	add.w	r3, sl, #8
 800a1be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	4650      	mov	r0, sl
 800a1c4:	b017      	add	sp, #92	@ 0x5c
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	f77f ae3d 	ble.w	8009e4c <_dtoa_r+0x7c4>
 800a1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	e65b      	b.n	8009e92 <_dtoa_r+0x80a>
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f77f aed6 	ble.w	8009f8e <_dtoa_r+0x906>
 800a1e2:	4656      	mov	r6, sl
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4648      	mov	r0, r9
 800a1e8:	f7ff f9c3 	bl	8009572 <quorem>
 800a1ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1f0:	9b08      	ldr	r3, [sp, #32]
 800a1f2:	f806 8b01 	strb.w	r8, [r6], #1
 800a1f6:	eba6 020a 	sub.w	r2, r6, sl
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	ddb3      	ble.n	800a166 <_dtoa_r+0xade>
 800a1fe:	4649      	mov	r1, r9
 800a200:	2300      	movs	r3, #0
 800a202:	220a      	movs	r2, #10
 800a204:	4658      	mov	r0, fp
 800a206:	f000 f967 	bl	800a4d8 <__multadd>
 800a20a:	4681      	mov	r9, r0
 800a20c:	e7ea      	b.n	800a1e4 <_dtoa_r+0xb5c>
 800a20e:	bf00      	nop
 800a210:	0800b8d2 	.word	0x0800b8d2
 800a214:	0800b856 	.word	0x0800b856

0800a218 <_free_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4605      	mov	r5, r0
 800a21c:	2900      	cmp	r1, #0
 800a21e:	d040      	beq.n	800a2a2 <_free_r+0x8a>
 800a220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a224:	1f0c      	subs	r4, r1, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfb8      	it	lt
 800a22a:	18e4      	addlt	r4, r4, r3
 800a22c:	f000 f8e6 	bl	800a3fc <__malloc_lock>
 800a230:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a4 <_free_r+0x8c>)
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	b933      	cbnz	r3, 800a244 <_free_r+0x2c>
 800a236:	6063      	str	r3, [r4, #4]
 800a238:	6014      	str	r4, [r2, #0]
 800a23a:	4628      	mov	r0, r5
 800a23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a240:	f000 b8e2 	b.w	800a408 <__malloc_unlock>
 800a244:	42a3      	cmp	r3, r4
 800a246:	d908      	bls.n	800a25a <_free_r+0x42>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	1821      	adds	r1, r4, r0
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf01      	itttt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	1809      	addeq	r1, r1, r0
 800a256:	6021      	streq	r1, [r4, #0]
 800a258:	e7ed      	b.n	800a236 <_free_r+0x1e>
 800a25a:	461a      	mov	r2, r3
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	b10b      	cbz	r3, 800a264 <_free_r+0x4c>
 800a260:	42a3      	cmp	r3, r4
 800a262:	d9fa      	bls.n	800a25a <_free_r+0x42>
 800a264:	6811      	ldr	r1, [r2, #0]
 800a266:	1850      	adds	r0, r2, r1
 800a268:	42a0      	cmp	r0, r4
 800a26a:	d10b      	bne.n	800a284 <_free_r+0x6c>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	4401      	add	r1, r0
 800a270:	1850      	adds	r0, r2, r1
 800a272:	4283      	cmp	r3, r0
 800a274:	6011      	str	r1, [r2, #0]
 800a276:	d1e0      	bne.n	800a23a <_free_r+0x22>
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	4408      	add	r0, r1
 800a27e:	6010      	str	r0, [r2, #0]
 800a280:	6053      	str	r3, [r2, #4]
 800a282:	e7da      	b.n	800a23a <_free_r+0x22>
 800a284:	d902      	bls.n	800a28c <_free_r+0x74>
 800a286:	230c      	movs	r3, #12
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	e7d6      	b.n	800a23a <_free_r+0x22>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	1821      	adds	r1, r4, r0
 800a290:	428b      	cmp	r3, r1
 800a292:	bf01      	itttt	eq
 800a294:	6819      	ldreq	r1, [r3, #0]
 800a296:	685b      	ldreq	r3, [r3, #4]
 800a298:	1809      	addeq	r1, r1, r0
 800a29a:	6021      	streq	r1, [r4, #0]
 800a29c:	6063      	str	r3, [r4, #4]
 800a29e:	6054      	str	r4, [r2, #4]
 800a2a0:	e7cb      	b.n	800a23a <_free_r+0x22>
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20003244 	.word	0x20003244

0800a2a8 <malloc>:
 800a2a8:	4b02      	ldr	r3, [pc, #8]	@ (800a2b4 <malloc+0xc>)
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	f000 b825 	b.w	800a2fc <_malloc_r>
 800a2b2:	bf00      	nop
 800a2b4:	20000020 	.word	0x20000020

0800a2b8 <sbrk_aligned>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a2f8 <sbrk_aligned+0x40>)
 800a2bc:	460c      	mov	r4, r1
 800a2be:	6831      	ldr	r1, [r6, #0]
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	b911      	cbnz	r1, 800a2ca <sbrk_aligned+0x12>
 800a2c4:	f000 fe40 	bl	800af48 <_sbrk_r>
 800a2c8:	6030      	str	r0, [r6, #0]
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f000 fe3b 	bl	800af48 <_sbrk_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d103      	bne.n	800a2de <sbrk_aligned+0x26>
 800a2d6:	f04f 34ff 	mov.w	r4, #4294967295
 800a2da:	4620      	mov	r0, r4
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	1cc4      	adds	r4, r0, #3
 800a2e0:	f024 0403 	bic.w	r4, r4, #3
 800a2e4:	42a0      	cmp	r0, r4
 800a2e6:	d0f8      	beq.n	800a2da <sbrk_aligned+0x22>
 800a2e8:	1a21      	subs	r1, r4, r0
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 fe2c 	bl	800af48 <_sbrk_r>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d1f2      	bne.n	800a2da <sbrk_aligned+0x22>
 800a2f4:	e7ef      	b.n	800a2d6 <sbrk_aligned+0x1e>
 800a2f6:	bf00      	nop
 800a2f8:	20003240 	.word	0x20003240

0800a2fc <_malloc_r>:
 800a2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a300:	1ccd      	adds	r5, r1, #3
 800a302:	f025 0503 	bic.w	r5, r5, #3
 800a306:	3508      	adds	r5, #8
 800a308:	2d0c      	cmp	r5, #12
 800a30a:	bf38      	it	cc
 800a30c:	250c      	movcc	r5, #12
 800a30e:	2d00      	cmp	r5, #0
 800a310:	4606      	mov	r6, r0
 800a312:	db01      	blt.n	800a318 <_malloc_r+0x1c>
 800a314:	42a9      	cmp	r1, r5
 800a316:	d904      	bls.n	800a322 <_malloc_r+0x26>
 800a318:	230c      	movs	r3, #12
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	2000      	movs	r0, #0
 800a31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3f8 <_malloc_r+0xfc>
 800a326:	f000 f869 	bl	800a3fc <__malloc_lock>
 800a32a:	f8d8 3000 	ldr.w	r3, [r8]
 800a32e:	461c      	mov	r4, r3
 800a330:	bb44      	cbnz	r4, 800a384 <_malloc_r+0x88>
 800a332:	4629      	mov	r1, r5
 800a334:	4630      	mov	r0, r6
 800a336:	f7ff ffbf 	bl	800a2b8 <sbrk_aligned>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	4604      	mov	r4, r0
 800a33e:	d158      	bne.n	800a3f2 <_malloc_r+0xf6>
 800a340:	f8d8 4000 	ldr.w	r4, [r8]
 800a344:	4627      	mov	r7, r4
 800a346:	2f00      	cmp	r7, #0
 800a348:	d143      	bne.n	800a3d2 <_malloc_r+0xd6>
 800a34a:	2c00      	cmp	r4, #0
 800a34c:	d04b      	beq.n	800a3e6 <_malloc_r+0xea>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	4639      	mov	r1, r7
 800a352:	4630      	mov	r0, r6
 800a354:	eb04 0903 	add.w	r9, r4, r3
 800a358:	f000 fdf6 	bl	800af48 <_sbrk_r>
 800a35c:	4581      	cmp	r9, r0
 800a35e:	d142      	bne.n	800a3e6 <_malloc_r+0xea>
 800a360:	6821      	ldr	r1, [r4, #0]
 800a362:	4630      	mov	r0, r6
 800a364:	1a6d      	subs	r5, r5, r1
 800a366:	4629      	mov	r1, r5
 800a368:	f7ff ffa6 	bl	800a2b8 <sbrk_aligned>
 800a36c:	3001      	adds	r0, #1
 800a36e:	d03a      	beq.n	800a3e6 <_malloc_r+0xea>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	442b      	add	r3, r5
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	f8d8 3000 	ldr.w	r3, [r8]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	bb62      	cbnz	r2, 800a3d8 <_malloc_r+0xdc>
 800a37e:	f8c8 7000 	str.w	r7, [r8]
 800a382:	e00f      	b.n	800a3a4 <_malloc_r+0xa8>
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	1b52      	subs	r2, r2, r5
 800a388:	d420      	bmi.n	800a3cc <_malloc_r+0xd0>
 800a38a:	2a0b      	cmp	r2, #11
 800a38c:	d917      	bls.n	800a3be <_malloc_r+0xc2>
 800a38e:	1961      	adds	r1, r4, r5
 800a390:	42a3      	cmp	r3, r4
 800a392:	6025      	str	r5, [r4, #0]
 800a394:	bf18      	it	ne
 800a396:	6059      	strne	r1, [r3, #4]
 800a398:	6863      	ldr	r3, [r4, #4]
 800a39a:	bf08      	it	eq
 800a39c:	f8c8 1000 	streq.w	r1, [r8]
 800a3a0:	5162      	str	r2, [r4, r5]
 800a3a2:	604b      	str	r3, [r1, #4]
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f82f 	bl	800a408 <__malloc_unlock>
 800a3aa:	f104 000b 	add.w	r0, r4, #11
 800a3ae:	1d23      	adds	r3, r4, #4
 800a3b0:	f020 0007 	bic.w	r0, r0, #7
 800a3b4:	1ac2      	subs	r2, r0, r3
 800a3b6:	bf1c      	itt	ne
 800a3b8:	1a1b      	subne	r3, r3, r0
 800a3ba:	50a3      	strne	r3, [r4, r2]
 800a3bc:	e7af      	b.n	800a31e <_malloc_r+0x22>
 800a3be:	6862      	ldr	r2, [r4, #4]
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	bf0c      	ite	eq
 800a3c4:	f8c8 2000 	streq.w	r2, [r8]
 800a3c8:	605a      	strne	r2, [r3, #4]
 800a3ca:	e7eb      	b.n	800a3a4 <_malloc_r+0xa8>
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	6864      	ldr	r4, [r4, #4]
 800a3d0:	e7ae      	b.n	800a330 <_malloc_r+0x34>
 800a3d2:	463c      	mov	r4, r7
 800a3d4:	687f      	ldr	r7, [r7, #4]
 800a3d6:	e7b6      	b.n	800a346 <_malloc_r+0x4a>
 800a3d8:	461a      	mov	r2, r3
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	d1fb      	bne.n	800a3d8 <_malloc_r+0xdc>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6053      	str	r3, [r2, #4]
 800a3e4:	e7de      	b.n	800a3a4 <_malloc_r+0xa8>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	6033      	str	r3, [r6, #0]
 800a3ec:	f000 f80c 	bl	800a408 <__malloc_unlock>
 800a3f0:	e794      	b.n	800a31c <_malloc_r+0x20>
 800a3f2:	6005      	str	r5, [r0, #0]
 800a3f4:	e7d6      	b.n	800a3a4 <_malloc_r+0xa8>
 800a3f6:	bf00      	nop
 800a3f8:	20003244 	.word	0x20003244

0800a3fc <__malloc_lock>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	@ (800a404 <__malloc_lock+0x8>)
 800a3fe:	f7ff b89a 	b.w	8009536 <__retarget_lock_acquire_recursive>
 800a402:	bf00      	nop
 800a404:	2000323c 	.word	0x2000323c

0800a408 <__malloc_unlock>:
 800a408:	4801      	ldr	r0, [pc, #4]	@ (800a410 <__malloc_unlock+0x8>)
 800a40a:	f7ff b895 	b.w	8009538 <__retarget_lock_release_recursive>
 800a40e:	bf00      	nop
 800a410:	2000323c 	.word	0x2000323c

0800a414 <_Balloc>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	69c6      	ldr	r6, [r0, #28]
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	b976      	cbnz	r6, 800a43c <_Balloc+0x28>
 800a41e:	2010      	movs	r0, #16
 800a420:	f7ff ff42 	bl	800a2a8 <malloc>
 800a424:	4602      	mov	r2, r0
 800a426:	61e0      	str	r0, [r4, #28]
 800a428:	b920      	cbnz	r0, 800a434 <_Balloc+0x20>
 800a42a:	216b      	movs	r1, #107	@ 0x6b
 800a42c:	4b17      	ldr	r3, [pc, #92]	@ (800a48c <_Balloc+0x78>)
 800a42e:	4818      	ldr	r0, [pc, #96]	@ (800a490 <_Balloc+0x7c>)
 800a430:	f000 fd9a 	bl	800af68 <__assert_func>
 800a434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a438:	6006      	str	r6, [r0, #0]
 800a43a:	60c6      	str	r6, [r0, #12]
 800a43c:	69e6      	ldr	r6, [r4, #28]
 800a43e:	68f3      	ldr	r3, [r6, #12]
 800a440:	b183      	cbz	r3, 800a464 <_Balloc+0x50>
 800a442:	69e3      	ldr	r3, [r4, #28]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a44a:	b9b8      	cbnz	r0, 800a47c <_Balloc+0x68>
 800a44c:	2101      	movs	r1, #1
 800a44e:	fa01 f605 	lsl.w	r6, r1, r5
 800a452:	1d72      	adds	r2, r6, #5
 800a454:	4620      	mov	r0, r4
 800a456:	0092      	lsls	r2, r2, #2
 800a458:	f000 fda4 	bl	800afa4 <_calloc_r>
 800a45c:	b160      	cbz	r0, 800a478 <_Balloc+0x64>
 800a45e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a462:	e00e      	b.n	800a482 <_Balloc+0x6e>
 800a464:	2221      	movs	r2, #33	@ 0x21
 800a466:	2104      	movs	r1, #4
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fd9b 	bl	800afa4 <_calloc_r>
 800a46e:	69e3      	ldr	r3, [r4, #28]
 800a470:	60f0      	str	r0, [r6, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e4      	bne.n	800a442 <_Balloc+0x2e>
 800a478:	2000      	movs	r0, #0
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	6802      	ldr	r2, [r0, #0]
 800a47e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a482:	2300      	movs	r3, #0
 800a484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a488:	e7f7      	b.n	800a47a <_Balloc+0x66>
 800a48a:	bf00      	nop
 800a48c:	0800b863 	.word	0x0800b863
 800a490:	0800b8e3 	.word	0x0800b8e3

0800a494 <_Bfree>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	69c6      	ldr	r6, [r0, #28]
 800a498:	4605      	mov	r5, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b976      	cbnz	r6, 800a4bc <_Bfree+0x28>
 800a49e:	2010      	movs	r0, #16
 800a4a0:	f7ff ff02 	bl	800a2a8 <malloc>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	61e8      	str	r0, [r5, #28]
 800a4a8:	b920      	cbnz	r0, 800a4b4 <_Bfree+0x20>
 800a4aa:	218f      	movs	r1, #143	@ 0x8f
 800a4ac:	4b08      	ldr	r3, [pc, #32]	@ (800a4d0 <_Bfree+0x3c>)
 800a4ae:	4809      	ldr	r0, [pc, #36]	@ (800a4d4 <_Bfree+0x40>)
 800a4b0:	f000 fd5a 	bl	800af68 <__assert_func>
 800a4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b8:	6006      	str	r6, [r0, #0]
 800a4ba:	60c6      	str	r6, [r0, #12]
 800a4bc:	b13c      	cbz	r4, 800a4ce <_Bfree+0x3a>
 800a4be:	69eb      	ldr	r3, [r5, #28]
 800a4c0:	6862      	ldr	r2, [r4, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c8:	6021      	str	r1, [r4, #0]
 800a4ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	0800b863 	.word	0x0800b863
 800a4d4:	0800b8e3 	.word	0x0800b8e3

0800a4d8 <__multadd>:
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4dc:	4607      	mov	r7, r0
 800a4de:	460c      	mov	r4, r1
 800a4e0:	461e      	mov	r6, r3
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	690d      	ldr	r5, [r1, #16]
 800a4e6:	f101 0c14 	add.w	ip, r1, #20
 800a4ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	b299      	uxth	r1, r3
 800a4f2:	fb02 6101 	mla	r1, r2, r1, r6
 800a4f6:	0c1e      	lsrs	r6, r3, #16
 800a4f8:	0c0b      	lsrs	r3, r1, #16
 800a4fa:	fb02 3306 	mla	r3, r2, r6, r3
 800a4fe:	b289      	uxth	r1, r1
 800a500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a504:	4285      	cmp	r5, r0
 800a506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a50a:	f84c 1b04 	str.w	r1, [ip], #4
 800a50e:	dcec      	bgt.n	800a4ea <__multadd+0x12>
 800a510:	b30e      	cbz	r6, 800a556 <__multadd+0x7e>
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	42ab      	cmp	r3, r5
 800a516:	dc19      	bgt.n	800a54c <__multadd+0x74>
 800a518:	6861      	ldr	r1, [r4, #4]
 800a51a:	4638      	mov	r0, r7
 800a51c:	3101      	adds	r1, #1
 800a51e:	f7ff ff79 	bl	800a414 <_Balloc>
 800a522:	4680      	mov	r8, r0
 800a524:	b928      	cbnz	r0, 800a532 <__multadd+0x5a>
 800a526:	4602      	mov	r2, r0
 800a528:	21ba      	movs	r1, #186	@ 0xba
 800a52a:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <__multadd+0x84>)
 800a52c:	480c      	ldr	r0, [pc, #48]	@ (800a560 <__multadd+0x88>)
 800a52e:	f000 fd1b 	bl	800af68 <__assert_func>
 800a532:	6922      	ldr	r2, [r4, #16]
 800a534:	f104 010c 	add.w	r1, r4, #12
 800a538:	3202      	adds	r2, #2
 800a53a:	0092      	lsls	r2, r2, #2
 800a53c:	300c      	adds	r0, #12
 800a53e:	f7ff f80a 	bl	8009556 <memcpy>
 800a542:	4621      	mov	r1, r4
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff ffa5 	bl	800a494 <_Bfree>
 800a54a:	4644      	mov	r4, r8
 800a54c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a550:	3501      	adds	r5, #1
 800a552:	615e      	str	r6, [r3, #20]
 800a554:	6125      	str	r5, [r4, #16]
 800a556:	4620      	mov	r0, r4
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	0800b8d2 	.word	0x0800b8d2
 800a560:	0800b8e3 	.word	0x0800b8e3

0800a564 <__hi0bits>:
 800a564:	4603      	mov	r3, r0
 800a566:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a56a:	bf3a      	itte	cc
 800a56c:	0403      	lslcc	r3, r0, #16
 800a56e:	2010      	movcc	r0, #16
 800a570:	2000      	movcs	r0, #0
 800a572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a576:	bf3c      	itt	cc
 800a578:	021b      	lslcc	r3, r3, #8
 800a57a:	3008      	addcc	r0, #8
 800a57c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a580:	bf3c      	itt	cc
 800a582:	011b      	lslcc	r3, r3, #4
 800a584:	3004      	addcc	r0, #4
 800a586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a58a:	bf3c      	itt	cc
 800a58c:	009b      	lslcc	r3, r3, #2
 800a58e:	3002      	addcc	r0, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	db05      	blt.n	800a5a0 <__hi0bits+0x3c>
 800a594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a598:	f100 0001 	add.w	r0, r0, #1
 800a59c:	bf08      	it	eq
 800a59e:	2020      	moveq	r0, #32
 800a5a0:	4770      	bx	lr

0800a5a2 <__lo0bits>:
 800a5a2:	6803      	ldr	r3, [r0, #0]
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	f013 0007 	ands.w	r0, r3, #7
 800a5aa:	d00b      	beq.n	800a5c4 <__lo0bits+0x22>
 800a5ac:	07d9      	lsls	r1, r3, #31
 800a5ae:	d421      	bmi.n	800a5f4 <__lo0bits+0x52>
 800a5b0:	0798      	lsls	r0, r3, #30
 800a5b2:	bf49      	itett	mi
 800a5b4:	085b      	lsrmi	r3, r3, #1
 800a5b6:	089b      	lsrpl	r3, r3, #2
 800a5b8:	2001      	movmi	r0, #1
 800a5ba:	6013      	strmi	r3, [r2, #0]
 800a5bc:	bf5c      	itt	pl
 800a5be:	2002      	movpl	r0, #2
 800a5c0:	6013      	strpl	r3, [r2, #0]
 800a5c2:	4770      	bx	lr
 800a5c4:	b299      	uxth	r1, r3
 800a5c6:	b909      	cbnz	r1, 800a5cc <__lo0bits+0x2a>
 800a5c8:	2010      	movs	r0, #16
 800a5ca:	0c1b      	lsrs	r3, r3, #16
 800a5cc:	b2d9      	uxtb	r1, r3
 800a5ce:	b909      	cbnz	r1, 800a5d4 <__lo0bits+0x32>
 800a5d0:	3008      	adds	r0, #8
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	0719      	lsls	r1, r3, #28
 800a5d6:	bf04      	itt	eq
 800a5d8:	091b      	lsreq	r3, r3, #4
 800a5da:	3004      	addeq	r0, #4
 800a5dc:	0799      	lsls	r1, r3, #30
 800a5de:	bf04      	itt	eq
 800a5e0:	089b      	lsreq	r3, r3, #2
 800a5e2:	3002      	addeq	r0, #2
 800a5e4:	07d9      	lsls	r1, r3, #31
 800a5e6:	d403      	bmi.n	800a5f0 <__lo0bits+0x4e>
 800a5e8:	085b      	lsrs	r3, r3, #1
 800a5ea:	f100 0001 	add.w	r0, r0, #1
 800a5ee:	d003      	beq.n	800a5f8 <__lo0bits+0x56>
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	4770      	bx	lr
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	4770      	bx	lr
 800a5f8:	2020      	movs	r0, #32
 800a5fa:	4770      	bx	lr

0800a5fc <__i2b>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	460c      	mov	r4, r1
 800a600:	2101      	movs	r1, #1
 800a602:	f7ff ff07 	bl	800a414 <_Balloc>
 800a606:	4602      	mov	r2, r0
 800a608:	b928      	cbnz	r0, 800a616 <__i2b+0x1a>
 800a60a:	f240 1145 	movw	r1, #325	@ 0x145
 800a60e:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <__i2b+0x24>)
 800a610:	4804      	ldr	r0, [pc, #16]	@ (800a624 <__i2b+0x28>)
 800a612:	f000 fca9 	bl	800af68 <__assert_func>
 800a616:	2301      	movs	r3, #1
 800a618:	6144      	str	r4, [r0, #20]
 800a61a:	6103      	str	r3, [r0, #16]
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	0800b8d2 	.word	0x0800b8d2
 800a624:	0800b8e3 	.word	0x0800b8e3

0800a628 <__multiply>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	4614      	mov	r4, r2
 800a62e:	690a      	ldr	r2, [r1, #16]
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	460f      	mov	r7, r1
 800a634:	429a      	cmp	r2, r3
 800a636:	bfa2      	ittt	ge
 800a638:	4623      	movge	r3, r4
 800a63a:	460c      	movge	r4, r1
 800a63c:	461f      	movge	r7, r3
 800a63e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a642:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	6861      	ldr	r1, [r4, #4]
 800a64a:	eb0a 0609 	add.w	r6, sl, r9
 800a64e:	42b3      	cmp	r3, r6
 800a650:	b085      	sub	sp, #20
 800a652:	bfb8      	it	lt
 800a654:	3101      	addlt	r1, #1
 800a656:	f7ff fedd 	bl	800a414 <_Balloc>
 800a65a:	b930      	cbnz	r0, 800a66a <__multiply+0x42>
 800a65c:	4602      	mov	r2, r0
 800a65e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a662:	4b43      	ldr	r3, [pc, #268]	@ (800a770 <__multiply+0x148>)
 800a664:	4843      	ldr	r0, [pc, #268]	@ (800a774 <__multiply+0x14c>)
 800a666:	f000 fc7f 	bl	800af68 <__assert_func>
 800a66a:	f100 0514 	add.w	r5, r0, #20
 800a66e:	462b      	mov	r3, r5
 800a670:	2200      	movs	r2, #0
 800a672:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a676:	4543      	cmp	r3, r8
 800a678:	d321      	bcc.n	800a6be <__multiply+0x96>
 800a67a:	f107 0114 	add.w	r1, r7, #20
 800a67e:	f104 0214 	add.w	r2, r4, #20
 800a682:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a686:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a68a:	9302      	str	r3, [sp, #8]
 800a68c:	1b13      	subs	r3, r2, r4
 800a68e:	3b15      	subs	r3, #21
 800a690:	f023 0303 	bic.w	r3, r3, #3
 800a694:	3304      	adds	r3, #4
 800a696:	f104 0715 	add.w	r7, r4, #21
 800a69a:	42ba      	cmp	r2, r7
 800a69c:	bf38      	it	cc
 800a69e:	2304      	movcc	r3, #4
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	9b02      	ldr	r3, [sp, #8]
 800a6a4:	9103      	str	r1, [sp, #12]
 800a6a6:	428b      	cmp	r3, r1
 800a6a8:	d80c      	bhi.n	800a6c4 <__multiply+0x9c>
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	dd03      	ble.n	800a6b6 <__multiply+0x8e>
 800a6ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d05a      	beq.n	800a76c <__multiply+0x144>
 800a6b6:	6106      	str	r6, [r0, #16]
 800a6b8:	b005      	add	sp, #20
 800a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6be:	f843 2b04 	str.w	r2, [r3], #4
 800a6c2:	e7d8      	b.n	800a676 <__multiply+0x4e>
 800a6c4:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6c8:	f1ba 0f00 	cmp.w	sl, #0
 800a6cc:	d023      	beq.n	800a716 <__multiply+0xee>
 800a6ce:	46a9      	mov	r9, r5
 800a6d0:	f04f 0c00 	mov.w	ip, #0
 800a6d4:	f104 0e14 	add.w	lr, r4, #20
 800a6d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6dc:	f8d9 3000 	ldr.w	r3, [r9]
 800a6e0:	fa1f fb87 	uxth.w	fp, r7
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6ea:	4463      	add	r3, ip
 800a6ec:	f8d9 c000 	ldr.w	ip, [r9]
 800a6f0:	0c3f      	lsrs	r7, r7, #16
 800a6f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a6f6:	fb0a c707 	mla	r7, sl, r7, ip
 800a6fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a704:	4572      	cmp	r2, lr
 800a706:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a70a:	f849 3b04 	str.w	r3, [r9], #4
 800a70e:	d8e3      	bhi.n	800a6d8 <__multiply+0xb0>
 800a710:	9b01      	ldr	r3, [sp, #4]
 800a712:	f845 c003 	str.w	ip, [r5, r3]
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	3104      	adds	r1, #4
 800a71a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a71e:	f1b9 0f00 	cmp.w	r9, #0
 800a722:	d021      	beq.n	800a768 <__multiply+0x140>
 800a724:	46ae      	mov	lr, r5
 800a726:	f04f 0a00 	mov.w	sl, #0
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	f104 0c14 	add.w	ip, r4, #20
 800a730:	f8bc b000 	ldrh.w	fp, [ip]
 800a734:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	fb09 770b 	mla	r7, r9, fp, r7
 800a73e:	4457      	add	r7, sl
 800a740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a744:	f84e 3b04 	str.w	r3, [lr], #4
 800a748:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a74c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a750:	f8be 3000 	ldrh.w	r3, [lr]
 800a754:	4562      	cmp	r2, ip
 800a756:	fb09 330a 	mla	r3, r9, sl, r3
 800a75a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a75e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a762:	d8e5      	bhi.n	800a730 <__multiply+0x108>
 800a764:	9f01      	ldr	r7, [sp, #4]
 800a766:	51eb      	str	r3, [r5, r7]
 800a768:	3504      	adds	r5, #4
 800a76a:	e79a      	b.n	800a6a2 <__multiply+0x7a>
 800a76c:	3e01      	subs	r6, #1
 800a76e:	e79c      	b.n	800a6aa <__multiply+0x82>
 800a770:	0800b8d2 	.word	0x0800b8d2
 800a774:	0800b8e3 	.word	0x0800b8e3

0800a778 <__pow5mult>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	4615      	mov	r5, r2
 800a77e:	f012 0203 	ands.w	r2, r2, #3
 800a782:	4607      	mov	r7, r0
 800a784:	460e      	mov	r6, r1
 800a786:	d007      	beq.n	800a798 <__pow5mult+0x20>
 800a788:	4c25      	ldr	r4, [pc, #148]	@ (800a820 <__pow5mult+0xa8>)
 800a78a:	3a01      	subs	r2, #1
 800a78c:	2300      	movs	r3, #0
 800a78e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a792:	f7ff fea1 	bl	800a4d8 <__multadd>
 800a796:	4606      	mov	r6, r0
 800a798:	10ad      	asrs	r5, r5, #2
 800a79a:	d03d      	beq.n	800a818 <__pow5mult+0xa0>
 800a79c:	69fc      	ldr	r4, [r7, #28]
 800a79e:	b97c      	cbnz	r4, 800a7c0 <__pow5mult+0x48>
 800a7a0:	2010      	movs	r0, #16
 800a7a2:	f7ff fd81 	bl	800a2a8 <malloc>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	61f8      	str	r0, [r7, #28]
 800a7aa:	b928      	cbnz	r0, 800a7b8 <__pow5mult+0x40>
 800a7ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a824 <__pow5mult+0xac>)
 800a7b2:	481d      	ldr	r0, [pc, #116]	@ (800a828 <__pow5mult+0xb0>)
 800a7b4:	f000 fbd8 	bl	800af68 <__assert_func>
 800a7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7bc:	6004      	str	r4, [r0, #0]
 800a7be:	60c4      	str	r4, [r0, #12]
 800a7c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7c8:	b94c      	cbnz	r4, 800a7de <__pow5mult+0x66>
 800a7ca:	f240 2171 	movw	r1, #625	@ 0x271
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f7ff ff14 	bl	800a5fc <__i2b>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	f04f 0900 	mov.w	r9, #0
 800a7e2:	07eb      	lsls	r3, r5, #31
 800a7e4:	d50a      	bpl.n	800a7fc <__pow5mult+0x84>
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	f7ff ff1c 	bl	800a628 <__multiply>
 800a7f0:	4680      	mov	r8, r0
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	f7ff fe4d 	bl	800a494 <_Bfree>
 800a7fa:	4646      	mov	r6, r8
 800a7fc:	106d      	asrs	r5, r5, #1
 800a7fe:	d00b      	beq.n	800a818 <__pow5mult+0xa0>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	b938      	cbnz	r0, 800a814 <__pow5mult+0x9c>
 800a804:	4622      	mov	r2, r4
 800a806:	4621      	mov	r1, r4
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff ff0d 	bl	800a628 <__multiply>
 800a80e:	6020      	str	r0, [r4, #0]
 800a810:	f8c0 9000 	str.w	r9, [r0]
 800a814:	4604      	mov	r4, r0
 800a816:	e7e4      	b.n	800a7e2 <__pow5mult+0x6a>
 800a818:	4630      	mov	r0, r6
 800a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81e:	bf00      	nop
 800a820:	0800b93c 	.word	0x0800b93c
 800a824:	0800b863 	.word	0x0800b863
 800a828:	0800b8e3 	.word	0x0800b8e3

0800a82c <__lshift>:
 800a82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	460c      	mov	r4, r1
 800a832:	4607      	mov	r7, r0
 800a834:	4691      	mov	r9, r2
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	6849      	ldr	r1, [r1, #4]
 800a83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a844:	f108 0601 	add.w	r6, r8, #1
 800a848:	42b3      	cmp	r3, r6
 800a84a:	db0b      	blt.n	800a864 <__lshift+0x38>
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff fde1 	bl	800a414 <_Balloc>
 800a852:	4605      	mov	r5, r0
 800a854:	b948      	cbnz	r0, 800a86a <__lshift+0x3e>
 800a856:	4602      	mov	r2, r0
 800a858:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a85c:	4b27      	ldr	r3, [pc, #156]	@ (800a8fc <__lshift+0xd0>)
 800a85e:	4828      	ldr	r0, [pc, #160]	@ (800a900 <__lshift+0xd4>)
 800a860:	f000 fb82 	bl	800af68 <__assert_func>
 800a864:	3101      	adds	r1, #1
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	e7ee      	b.n	800a848 <__lshift+0x1c>
 800a86a:	2300      	movs	r3, #0
 800a86c:	f100 0114 	add.w	r1, r0, #20
 800a870:	f100 0210 	add.w	r2, r0, #16
 800a874:	4618      	mov	r0, r3
 800a876:	4553      	cmp	r3, sl
 800a878:	db33      	blt.n	800a8e2 <__lshift+0xb6>
 800a87a:	6920      	ldr	r0, [r4, #16]
 800a87c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a880:	f104 0314 	add.w	r3, r4, #20
 800a884:	f019 091f 	ands.w	r9, r9, #31
 800a888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a88c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a890:	d02b      	beq.n	800a8ea <__lshift+0xbe>
 800a892:	468a      	mov	sl, r1
 800a894:	2200      	movs	r2, #0
 800a896:	f1c9 0e20 	rsb	lr, r9, #32
 800a89a:	6818      	ldr	r0, [r3, #0]
 800a89c:	fa00 f009 	lsl.w	r0, r0, r9
 800a8a0:	4310      	orrs	r0, r2
 800a8a2:	f84a 0b04 	str.w	r0, [sl], #4
 800a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8aa:	459c      	cmp	ip, r3
 800a8ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8b0:	d8f3      	bhi.n	800a89a <__lshift+0x6e>
 800a8b2:	ebac 0304 	sub.w	r3, ip, r4
 800a8b6:	3b15      	subs	r3, #21
 800a8b8:	f023 0303 	bic.w	r3, r3, #3
 800a8bc:	3304      	adds	r3, #4
 800a8be:	f104 0015 	add.w	r0, r4, #21
 800a8c2:	4584      	cmp	ip, r0
 800a8c4:	bf38      	it	cc
 800a8c6:	2304      	movcc	r3, #4
 800a8c8:	50ca      	str	r2, [r1, r3]
 800a8ca:	b10a      	cbz	r2, 800a8d0 <__lshift+0xa4>
 800a8cc:	f108 0602 	add.w	r6, r8, #2
 800a8d0:	3e01      	subs	r6, #1
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	612e      	str	r6, [r5, #16]
 800a8d8:	f7ff fddc 	bl	800a494 <_Bfree>
 800a8dc:	4628      	mov	r0, r5
 800a8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	e7c5      	b.n	800a876 <__lshift+0x4a>
 800a8ea:	3904      	subs	r1, #4
 800a8ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f0:	459c      	cmp	ip, r3
 800a8f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8f6:	d8f9      	bhi.n	800a8ec <__lshift+0xc0>
 800a8f8:	e7ea      	b.n	800a8d0 <__lshift+0xa4>
 800a8fa:	bf00      	nop
 800a8fc:	0800b8d2 	.word	0x0800b8d2
 800a900:	0800b8e3 	.word	0x0800b8e3

0800a904 <__mcmp>:
 800a904:	4603      	mov	r3, r0
 800a906:	690a      	ldr	r2, [r1, #16]
 800a908:	6900      	ldr	r0, [r0, #16]
 800a90a:	b530      	push	{r4, r5, lr}
 800a90c:	1a80      	subs	r0, r0, r2
 800a90e:	d10e      	bne.n	800a92e <__mcmp+0x2a>
 800a910:	3314      	adds	r3, #20
 800a912:	3114      	adds	r1, #20
 800a914:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a918:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a91c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a924:	4295      	cmp	r5, r2
 800a926:	d003      	beq.n	800a930 <__mcmp+0x2c>
 800a928:	d205      	bcs.n	800a936 <__mcmp+0x32>
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	bd30      	pop	{r4, r5, pc}
 800a930:	42a3      	cmp	r3, r4
 800a932:	d3f3      	bcc.n	800a91c <__mcmp+0x18>
 800a934:	e7fb      	b.n	800a92e <__mcmp+0x2a>
 800a936:	2001      	movs	r0, #1
 800a938:	e7f9      	b.n	800a92e <__mcmp+0x2a>
	...

0800a93c <__mdiff>:
 800a93c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a940:	4689      	mov	r9, r1
 800a942:	4606      	mov	r6, r0
 800a944:	4611      	mov	r1, r2
 800a946:	4648      	mov	r0, r9
 800a948:	4614      	mov	r4, r2
 800a94a:	f7ff ffdb 	bl	800a904 <__mcmp>
 800a94e:	1e05      	subs	r5, r0, #0
 800a950:	d112      	bne.n	800a978 <__mdiff+0x3c>
 800a952:	4629      	mov	r1, r5
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff fd5d 	bl	800a414 <_Balloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	b928      	cbnz	r0, 800a96a <__mdiff+0x2e>
 800a95e:	f240 2137 	movw	r1, #567	@ 0x237
 800a962:	4b3e      	ldr	r3, [pc, #248]	@ (800aa5c <__mdiff+0x120>)
 800a964:	483e      	ldr	r0, [pc, #248]	@ (800aa60 <__mdiff+0x124>)
 800a966:	f000 faff 	bl	800af68 <__assert_func>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a970:	4610      	mov	r0, r2
 800a972:	b003      	add	sp, #12
 800a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	bfbc      	itt	lt
 800a97a:	464b      	movlt	r3, r9
 800a97c:	46a1      	movlt	r9, r4
 800a97e:	4630      	mov	r0, r6
 800a980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a984:	bfba      	itte	lt
 800a986:	461c      	movlt	r4, r3
 800a988:	2501      	movlt	r5, #1
 800a98a:	2500      	movge	r5, #0
 800a98c:	f7ff fd42 	bl	800a414 <_Balloc>
 800a990:	4602      	mov	r2, r0
 800a992:	b918      	cbnz	r0, 800a99c <__mdiff+0x60>
 800a994:	f240 2145 	movw	r1, #581	@ 0x245
 800a998:	4b30      	ldr	r3, [pc, #192]	@ (800aa5c <__mdiff+0x120>)
 800a99a:	e7e3      	b.n	800a964 <__mdiff+0x28>
 800a99c:	f100 0b14 	add.w	fp, r0, #20
 800a9a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9a4:	f109 0310 	add.w	r3, r9, #16
 800a9a8:	60c5      	str	r5, [r0, #12]
 800a9aa:	f04f 0c00 	mov.w	ip, #0
 800a9ae:	f109 0514 	add.w	r5, r9, #20
 800a9b2:	46d9      	mov	r9, fp
 800a9b4:	6926      	ldr	r6, [r4, #16]
 800a9b6:	f104 0e14 	add.w	lr, r4, #20
 800a9ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	9b01      	ldr	r3, [sp, #4]
 800a9c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9ce:	b281      	uxth	r1, r0
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	fa1f f38a 	uxth.w	r3, sl
 800a9d6:	1a5b      	subs	r3, r3, r1
 800a9d8:	0c00      	lsrs	r0, r0, #16
 800a9da:	4463      	add	r3, ip
 800a9dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9ea:	4576      	cmp	r6, lr
 800a9ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9f0:	f849 3b04 	str.w	r3, [r9], #4
 800a9f4:	d8e6      	bhi.n	800a9c4 <__mdiff+0x88>
 800a9f6:	1b33      	subs	r3, r6, r4
 800a9f8:	3b15      	subs	r3, #21
 800a9fa:	f023 0303 	bic.w	r3, r3, #3
 800a9fe:	3415      	adds	r4, #21
 800aa00:	3304      	adds	r3, #4
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	bf38      	it	cc
 800aa06:	2304      	movcc	r3, #4
 800aa08:	441d      	add	r5, r3
 800aa0a:	445b      	add	r3, fp
 800aa0c:	461e      	mov	r6, r3
 800aa0e:	462c      	mov	r4, r5
 800aa10:	4544      	cmp	r4, r8
 800aa12:	d30e      	bcc.n	800aa32 <__mdiff+0xf6>
 800aa14:	f108 0103 	add.w	r1, r8, #3
 800aa18:	1b49      	subs	r1, r1, r5
 800aa1a:	f021 0103 	bic.w	r1, r1, #3
 800aa1e:	3d03      	subs	r5, #3
 800aa20:	45a8      	cmp	r8, r5
 800aa22:	bf38      	it	cc
 800aa24:	2100      	movcc	r1, #0
 800aa26:	440b      	add	r3, r1
 800aa28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa2c:	b199      	cbz	r1, 800aa56 <__mdiff+0x11a>
 800aa2e:	6117      	str	r7, [r2, #16]
 800aa30:	e79e      	b.n	800a970 <__mdiff+0x34>
 800aa32:	46e6      	mov	lr, ip
 800aa34:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa38:	fa1f fc81 	uxth.w	ip, r1
 800aa3c:	44f4      	add	ip, lr
 800aa3e:	0c08      	lsrs	r0, r1, #16
 800aa40:	4471      	add	r1, lr
 800aa42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa46:	b289      	uxth	r1, r1
 800aa48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa50:	f846 1b04 	str.w	r1, [r6], #4
 800aa54:	e7dc      	b.n	800aa10 <__mdiff+0xd4>
 800aa56:	3f01      	subs	r7, #1
 800aa58:	e7e6      	b.n	800aa28 <__mdiff+0xec>
 800aa5a:	bf00      	nop
 800aa5c:	0800b8d2 	.word	0x0800b8d2
 800aa60:	0800b8e3 	.word	0x0800b8e3

0800aa64 <__d2b>:
 800aa64:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800aa68:	2101      	movs	r1, #1
 800aa6a:	4690      	mov	r8, r2
 800aa6c:	4699      	mov	r9, r3
 800aa6e:	9e08      	ldr	r6, [sp, #32]
 800aa70:	f7ff fcd0 	bl	800a414 <_Balloc>
 800aa74:	4604      	mov	r4, r0
 800aa76:	b930      	cbnz	r0, 800aa86 <__d2b+0x22>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa7e:	4b23      	ldr	r3, [pc, #140]	@ (800ab0c <__d2b+0xa8>)
 800aa80:	4823      	ldr	r0, [pc, #140]	@ (800ab10 <__d2b+0xac>)
 800aa82:	f000 fa71 	bl	800af68 <__assert_func>
 800aa86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa8e:	b10d      	cbz	r5, 800aa94 <__d2b+0x30>
 800aa90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	f1b8 0300 	subs.w	r3, r8, #0
 800aa9a:	d024      	beq.n	800aae6 <__d2b+0x82>
 800aa9c:	4668      	mov	r0, sp
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	f7ff fd7f 	bl	800a5a2 <__lo0bits>
 800aaa4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaa8:	b1d8      	cbz	r0, 800aae2 <__d2b+0x7e>
 800aaaa:	f1c0 0320 	rsb	r3, r0, #32
 800aaae:	fa02 f303 	lsl.w	r3, r2, r3
 800aab2:	430b      	orrs	r3, r1
 800aab4:	40c2      	lsrs	r2, r0
 800aab6:	6163      	str	r3, [r4, #20]
 800aab8:	9201      	str	r2, [sp, #4]
 800aaba:	9b01      	ldr	r3, [sp, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bf0c      	ite	eq
 800aac0:	2201      	moveq	r2, #1
 800aac2:	2202      	movne	r2, #2
 800aac4:	61a3      	str	r3, [r4, #24]
 800aac6:	6122      	str	r2, [r4, #16]
 800aac8:	b1ad      	cbz	r5, 800aaf6 <__d2b+0x92>
 800aaca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aace:	4405      	add	r5, r0
 800aad0:	6035      	str	r5, [r6, #0]
 800aad2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad8:	6018      	str	r0, [r3, #0]
 800aada:	4620      	mov	r0, r4
 800aadc:	b002      	add	sp, #8
 800aade:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aae2:	6161      	str	r1, [r4, #20]
 800aae4:	e7e9      	b.n	800aaba <__d2b+0x56>
 800aae6:	a801      	add	r0, sp, #4
 800aae8:	f7ff fd5b 	bl	800a5a2 <__lo0bits>
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	6163      	str	r3, [r4, #20]
 800aaf2:	3020      	adds	r0, #32
 800aaf4:	e7e7      	b.n	800aac6 <__d2b+0x62>
 800aaf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aafa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aafe:	6030      	str	r0, [r6, #0]
 800ab00:	6918      	ldr	r0, [r3, #16]
 800ab02:	f7ff fd2f 	bl	800a564 <__hi0bits>
 800ab06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab0a:	e7e4      	b.n	800aad6 <__d2b+0x72>
 800ab0c:	0800b8d2 	.word	0x0800b8d2
 800ab10:	0800b8e3 	.word	0x0800b8e3

0800ab14 <__ssputs_r>:
 800ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	461f      	mov	r7, r3
 800ab1a:	688e      	ldr	r6, [r1, #8]
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	42be      	cmp	r6, r7
 800ab20:	460c      	mov	r4, r1
 800ab22:	4690      	mov	r8, r2
 800ab24:	680b      	ldr	r3, [r1, #0]
 800ab26:	d82d      	bhi.n	800ab84 <__ssputs_r+0x70>
 800ab28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab30:	d026      	beq.n	800ab80 <__ssputs_r+0x6c>
 800ab32:	6965      	ldr	r5, [r4, #20]
 800ab34:	6909      	ldr	r1, [r1, #16]
 800ab36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab3a:	eba3 0901 	sub.w	r9, r3, r1
 800ab3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab42:	1c7b      	adds	r3, r7, #1
 800ab44:	444b      	add	r3, r9
 800ab46:	106d      	asrs	r5, r5, #1
 800ab48:	429d      	cmp	r5, r3
 800ab4a:	bf38      	it	cc
 800ab4c:	461d      	movcc	r5, r3
 800ab4e:	0553      	lsls	r3, r2, #21
 800ab50:	d527      	bpl.n	800aba2 <__ssputs_r+0x8e>
 800ab52:	4629      	mov	r1, r5
 800ab54:	f7ff fbd2 	bl	800a2fc <_malloc_r>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	b360      	cbz	r0, 800abb6 <__ssputs_r+0xa2>
 800ab5c:	464a      	mov	r2, r9
 800ab5e:	6921      	ldr	r1, [r4, #16]
 800ab60:	f7fe fcf9 	bl	8009556 <memcpy>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	6126      	str	r6, [r4, #16]
 800ab72:	444e      	add	r6, r9
 800ab74:	6026      	str	r6, [r4, #0]
 800ab76:	463e      	mov	r6, r7
 800ab78:	6165      	str	r5, [r4, #20]
 800ab7a:	eba5 0509 	sub.w	r5, r5, r9
 800ab7e:	60a5      	str	r5, [r4, #8]
 800ab80:	42be      	cmp	r6, r7
 800ab82:	d900      	bls.n	800ab86 <__ssputs_r+0x72>
 800ab84:	463e      	mov	r6, r7
 800ab86:	4632      	mov	r2, r6
 800ab88:	4641      	mov	r1, r8
 800ab8a:	6820      	ldr	r0, [r4, #0]
 800ab8c:	f000 f9c2 	bl	800af14 <memmove>
 800ab90:	2000      	movs	r0, #0
 800ab92:	68a3      	ldr	r3, [r4, #8]
 800ab94:	1b9b      	subs	r3, r3, r6
 800ab96:	60a3      	str	r3, [r4, #8]
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	4433      	add	r3, r6
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba2:	462a      	mov	r2, r5
 800aba4:	f000 fa24 	bl	800aff0 <_realloc_r>
 800aba8:	4606      	mov	r6, r0
 800abaa:	2800      	cmp	r0, #0
 800abac:	d1e0      	bne.n	800ab70 <__ssputs_r+0x5c>
 800abae:	4650      	mov	r0, sl
 800abb0:	6921      	ldr	r1, [r4, #16]
 800abb2:	f7ff fb31 	bl	800a218 <_free_r>
 800abb6:	230c      	movs	r3, #12
 800abb8:	f8ca 3000 	str.w	r3, [sl]
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	f04f 30ff 	mov.w	r0, #4294967295
 800abc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	e7e9      	b.n	800ab9e <__ssputs_r+0x8a>
	...

0800abcc <_svfiprintf_r>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	4698      	mov	r8, r3
 800abd2:	898b      	ldrh	r3, [r1, #12]
 800abd4:	4607      	mov	r7, r0
 800abd6:	061b      	lsls	r3, r3, #24
 800abd8:	460d      	mov	r5, r1
 800abda:	4614      	mov	r4, r2
 800abdc:	b09d      	sub	sp, #116	@ 0x74
 800abde:	d510      	bpl.n	800ac02 <_svfiprintf_r+0x36>
 800abe0:	690b      	ldr	r3, [r1, #16]
 800abe2:	b973      	cbnz	r3, 800ac02 <_svfiprintf_r+0x36>
 800abe4:	2140      	movs	r1, #64	@ 0x40
 800abe6:	f7ff fb89 	bl	800a2fc <_malloc_r>
 800abea:	6028      	str	r0, [r5, #0]
 800abec:	6128      	str	r0, [r5, #16]
 800abee:	b930      	cbnz	r0, 800abfe <_svfiprintf_r+0x32>
 800abf0:	230c      	movs	r3, #12
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	b01d      	add	sp, #116	@ 0x74
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	2340      	movs	r3, #64	@ 0x40
 800ac00:	616b      	str	r3, [r5, #20]
 800ac02:	2300      	movs	r3, #0
 800ac04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac06:	2320      	movs	r3, #32
 800ac08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac0c:	2330      	movs	r3, #48	@ 0x30
 800ac0e:	f04f 0901 	mov.w	r9, #1
 800ac12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800adb0 <_svfiprintf_r+0x1e4>
 800ac1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac1e:	4623      	mov	r3, r4
 800ac20:	469a      	mov	sl, r3
 800ac22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac26:	b10a      	cbz	r2, 800ac2c <_svfiprintf_r+0x60>
 800ac28:	2a25      	cmp	r2, #37	@ 0x25
 800ac2a:	d1f9      	bne.n	800ac20 <_svfiprintf_r+0x54>
 800ac2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac30:	d00b      	beq.n	800ac4a <_svfiprintf_r+0x7e>
 800ac32:	465b      	mov	r3, fp
 800ac34:	4622      	mov	r2, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f7ff ff6b 	bl	800ab14 <__ssputs_r>
 800ac3e:	3001      	adds	r0, #1
 800ac40:	f000 80a7 	beq.w	800ad92 <_svfiprintf_r+0x1c6>
 800ac44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac46:	445a      	add	r2, fp
 800ac48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 809f 	beq.w	800ad92 <_svfiprintf_r+0x1c6>
 800ac54:	2300      	movs	r3, #0
 800ac56:	f04f 32ff 	mov.w	r2, #4294967295
 800ac5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac5e:	f10a 0a01 	add.w	sl, sl, #1
 800ac62:	9304      	str	r3, [sp, #16]
 800ac64:	9307      	str	r3, [sp, #28]
 800ac66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac6c:	4654      	mov	r4, sl
 800ac6e:	2205      	movs	r2, #5
 800ac70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac74:	484e      	ldr	r0, [pc, #312]	@ (800adb0 <_svfiprintf_r+0x1e4>)
 800ac76:	f7fe fc60 	bl	800953a <memchr>
 800ac7a:	9a04      	ldr	r2, [sp, #16]
 800ac7c:	b9d8      	cbnz	r0, 800acb6 <_svfiprintf_r+0xea>
 800ac7e:	06d0      	lsls	r0, r2, #27
 800ac80:	bf44      	itt	mi
 800ac82:	2320      	movmi	r3, #32
 800ac84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac88:	0711      	lsls	r1, r2, #28
 800ac8a:	bf44      	itt	mi
 800ac8c:	232b      	movmi	r3, #43	@ 0x2b
 800ac8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac92:	f89a 3000 	ldrb.w	r3, [sl]
 800ac96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac98:	d015      	beq.n	800acc6 <_svfiprintf_r+0xfa>
 800ac9a:	4654      	mov	r4, sl
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	f04f 0c0a 	mov.w	ip, #10
 800aca2:	9a07      	ldr	r2, [sp, #28]
 800aca4:	4621      	mov	r1, r4
 800aca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acaa:	3b30      	subs	r3, #48	@ 0x30
 800acac:	2b09      	cmp	r3, #9
 800acae:	d94b      	bls.n	800ad48 <_svfiprintf_r+0x17c>
 800acb0:	b1b0      	cbz	r0, 800ace0 <_svfiprintf_r+0x114>
 800acb2:	9207      	str	r2, [sp, #28]
 800acb4:	e014      	b.n	800ace0 <_svfiprintf_r+0x114>
 800acb6:	eba0 0308 	sub.w	r3, r0, r8
 800acba:	fa09 f303 	lsl.w	r3, r9, r3
 800acbe:	4313      	orrs	r3, r2
 800acc0:	46a2      	mov	sl, r4
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	e7d2      	b.n	800ac6c <_svfiprintf_r+0xa0>
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	1d19      	adds	r1, r3, #4
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	9103      	str	r1, [sp, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfbb      	ittet	lt
 800acd2:	425b      	neglt	r3, r3
 800acd4:	f042 0202 	orrlt.w	r2, r2, #2
 800acd8:	9307      	strge	r3, [sp, #28]
 800acda:	9307      	strlt	r3, [sp, #28]
 800acdc:	bfb8      	it	lt
 800acde:	9204      	strlt	r2, [sp, #16]
 800ace0:	7823      	ldrb	r3, [r4, #0]
 800ace2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ace4:	d10a      	bne.n	800acfc <_svfiprintf_r+0x130>
 800ace6:	7863      	ldrb	r3, [r4, #1]
 800ace8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acea:	d132      	bne.n	800ad52 <_svfiprintf_r+0x186>
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	3402      	adds	r4, #2
 800acf0:	1d1a      	adds	r2, r3, #4
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	9203      	str	r2, [sp, #12]
 800acf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800adb4 <_svfiprintf_r+0x1e8>
 800ad00:	2203      	movs	r2, #3
 800ad02:	4650      	mov	r0, sl
 800ad04:	7821      	ldrb	r1, [r4, #0]
 800ad06:	f7fe fc18 	bl	800953a <memchr>
 800ad0a:	b138      	cbz	r0, 800ad1c <_svfiprintf_r+0x150>
 800ad0c:	2240      	movs	r2, #64	@ 0x40
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	eba0 000a 	sub.w	r0, r0, sl
 800ad14:	4082      	lsls	r2, r0
 800ad16:	4313      	orrs	r3, r2
 800ad18:	3401      	adds	r4, #1
 800ad1a:	9304      	str	r3, [sp, #16]
 800ad1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad20:	2206      	movs	r2, #6
 800ad22:	4825      	ldr	r0, [pc, #148]	@ (800adb8 <_svfiprintf_r+0x1ec>)
 800ad24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad28:	f7fe fc07 	bl	800953a <memchr>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d036      	beq.n	800ad9e <_svfiprintf_r+0x1d2>
 800ad30:	4b22      	ldr	r3, [pc, #136]	@ (800adbc <_svfiprintf_r+0x1f0>)
 800ad32:	bb1b      	cbnz	r3, 800ad7c <_svfiprintf_r+0x1b0>
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	3307      	adds	r3, #7
 800ad38:	f023 0307 	bic.w	r3, r3, #7
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad42:	4433      	add	r3, r6
 800ad44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad46:	e76a      	b.n	800ac1e <_svfiprintf_r+0x52>
 800ad48:	460c      	mov	r4, r1
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad50:	e7a8      	b.n	800aca4 <_svfiprintf_r+0xd8>
 800ad52:	2300      	movs	r3, #0
 800ad54:	f04f 0c0a 	mov.w	ip, #10
 800ad58:	4619      	mov	r1, r3
 800ad5a:	3401      	adds	r4, #1
 800ad5c:	9305      	str	r3, [sp, #20]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad64:	3a30      	subs	r2, #48	@ 0x30
 800ad66:	2a09      	cmp	r2, #9
 800ad68:	d903      	bls.n	800ad72 <_svfiprintf_r+0x1a6>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0c6      	beq.n	800acfc <_svfiprintf_r+0x130>
 800ad6e:	9105      	str	r1, [sp, #20]
 800ad70:	e7c4      	b.n	800acfc <_svfiprintf_r+0x130>
 800ad72:	4604      	mov	r4, r0
 800ad74:	2301      	movs	r3, #1
 800ad76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad7a:	e7f0      	b.n	800ad5e <_svfiprintf_r+0x192>
 800ad7c:	ab03      	add	r3, sp, #12
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	462a      	mov	r2, r5
 800ad82:	4638      	mov	r0, r7
 800ad84:	4b0e      	ldr	r3, [pc, #56]	@ (800adc0 <_svfiprintf_r+0x1f4>)
 800ad86:	a904      	add	r1, sp, #16
 800ad88:	f7fd fe1e 	bl	80089c8 <_printf_float>
 800ad8c:	1c42      	adds	r2, r0, #1
 800ad8e:	4606      	mov	r6, r0
 800ad90:	d1d6      	bne.n	800ad40 <_svfiprintf_r+0x174>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	065b      	lsls	r3, r3, #25
 800ad96:	f53f af2d 	bmi.w	800abf4 <_svfiprintf_r+0x28>
 800ad9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad9c:	e72c      	b.n	800abf8 <_svfiprintf_r+0x2c>
 800ad9e:	ab03      	add	r3, sp, #12
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	462a      	mov	r2, r5
 800ada4:	4638      	mov	r0, r7
 800ada6:	4b06      	ldr	r3, [pc, #24]	@ (800adc0 <_svfiprintf_r+0x1f4>)
 800ada8:	a904      	add	r1, sp, #16
 800adaa:	f7fe f8ab 	bl	8008f04 <_printf_i>
 800adae:	e7ed      	b.n	800ad8c <_svfiprintf_r+0x1c0>
 800adb0:	0800ba38 	.word	0x0800ba38
 800adb4:	0800ba3e 	.word	0x0800ba3e
 800adb8:	0800ba42 	.word	0x0800ba42
 800adbc:	080089c9 	.word	0x080089c9
 800adc0:	0800ab15 	.word	0x0800ab15

0800adc4 <__sflush_r>:
 800adc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	0716      	lsls	r6, r2, #28
 800adcc:	4605      	mov	r5, r0
 800adce:	460c      	mov	r4, r1
 800add0:	d454      	bmi.n	800ae7c <__sflush_r+0xb8>
 800add2:	684b      	ldr	r3, [r1, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	dc02      	bgt.n	800adde <__sflush_r+0x1a>
 800add8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adda:	2b00      	cmp	r3, #0
 800addc:	dd48      	ble.n	800ae70 <__sflush_r+0xac>
 800adde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	d045      	beq.n	800ae70 <__sflush_r+0xac>
 800ade4:	2300      	movs	r3, #0
 800ade6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adea:	682f      	ldr	r7, [r5, #0]
 800adec:	6a21      	ldr	r1, [r4, #32]
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	d030      	beq.n	800ae54 <__sflush_r+0x90>
 800adf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	0759      	lsls	r1, r3, #29
 800adf8:	d505      	bpl.n	800ae06 <__sflush_r+0x42>
 800adfa:	6863      	ldr	r3, [r4, #4]
 800adfc:	1ad2      	subs	r2, r2, r3
 800adfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae00:	b10b      	cbz	r3, 800ae06 <__sflush_r+0x42>
 800ae02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae04:	1ad2      	subs	r2, r2, r3
 800ae06:	2300      	movs	r3, #0
 800ae08:	4628      	mov	r0, r5
 800ae0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae0c:	6a21      	ldr	r1, [r4, #32]
 800ae0e:	47b0      	blx	r6
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	d106      	bne.n	800ae24 <__sflush_r+0x60>
 800ae16:	6829      	ldr	r1, [r5, #0]
 800ae18:	291d      	cmp	r1, #29
 800ae1a:	d82b      	bhi.n	800ae74 <__sflush_r+0xb0>
 800ae1c:	4a28      	ldr	r2, [pc, #160]	@ (800aec0 <__sflush_r+0xfc>)
 800ae1e:	410a      	asrs	r2, r1
 800ae20:	07d6      	lsls	r6, r2, #31
 800ae22:	d427      	bmi.n	800ae74 <__sflush_r+0xb0>
 800ae24:	2200      	movs	r2, #0
 800ae26:	6062      	str	r2, [r4, #4]
 800ae28:	6922      	ldr	r2, [r4, #16]
 800ae2a:	04d9      	lsls	r1, r3, #19
 800ae2c:	6022      	str	r2, [r4, #0]
 800ae2e:	d504      	bpl.n	800ae3a <__sflush_r+0x76>
 800ae30:	1c42      	adds	r2, r0, #1
 800ae32:	d101      	bne.n	800ae38 <__sflush_r+0x74>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b903      	cbnz	r3, 800ae3a <__sflush_r+0x76>
 800ae38:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae3c:	602f      	str	r7, [r5, #0]
 800ae3e:	b1b9      	cbz	r1, 800ae70 <__sflush_r+0xac>
 800ae40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae44:	4299      	cmp	r1, r3
 800ae46:	d002      	beq.n	800ae4e <__sflush_r+0x8a>
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7ff f9e5 	bl	800a218 <_free_r>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae52:	e00d      	b.n	800ae70 <__sflush_r+0xac>
 800ae54:	2301      	movs	r3, #1
 800ae56:	4628      	mov	r0, r5
 800ae58:	47b0      	blx	r6
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	1c50      	adds	r0, r2, #1
 800ae5e:	d1c9      	bne.n	800adf4 <__sflush_r+0x30>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0c6      	beq.n	800adf4 <__sflush_r+0x30>
 800ae66:	2b1d      	cmp	r3, #29
 800ae68:	d001      	beq.n	800ae6e <__sflush_r+0xaa>
 800ae6a:	2b16      	cmp	r3, #22
 800ae6c:	d11d      	bne.n	800aeaa <__sflush_r+0xe6>
 800ae6e:	602f      	str	r7, [r5, #0]
 800ae70:	2000      	movs	r0, #0
 800ae72:	e021      	b.n	800aeb8 <__sflush_r+0xf4>
 800ae74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	e01a      	b.n	800aeb2 <__sflush_r+0xee>
 800ae7c:	690f      	ldr	r7, [r1, #16]
 800ae7e:	2f00      	cmp	r7, #0
 800ae80:	d0f6      	beq.n	800ae70 <__sflush_r+0xac>
 800ae82:	0793      	lsls	r3, r2, #30
 800ae84:	bf18      	it	ne
 800ae86:	2300      	movne	r3, #0
 800ae88:	680e      	ldr	r6, [r1, #0]
 800ae8a:	bf08      	it	eq
 800ae8c:	694b      	ldreq	r3, [r1, #20]
 800ae8e:	1bf6      	subs	r6, r6, r7
 800ae90:	600f      	str	r7, [r1, #0]
 800ae92:	608b      	str	r3, [r1, #8]
 800ae94:	2e00      	cmp	r6, #0
 800ae96:	ddeb      	ble.n	800ae70 <__sflush_r+0xac>
 800ae98:	4633      	mov	r3, r6
 800ae9a:	463a      	mov	r2, r7
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	6a21      	ldr	r1, [r4, #32]
 800aea0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aea4:	47e0      	blx	ip
 800aea6:	2800      	cmp	r0, #0
 800aea8:	dc07      	bgt.n	800aeba <__sflush_r+0xf6>
 800aeaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb2:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeba:	4407      	add	r7, r0
 800aebc:	1a36      	subs	r6, r6, r0
 800aebe:	e7e9      	b.n	800ae94 <__sflush_r+0xd0>
 800aec0:	dfbffffe 	.word	0xdfbffffe

0800aec4 <_fflush_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	690b      	ldr	r3, [r1, #16]
 800aec8:	4605      	mov	r5, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	b913      	cbnz	r3, 800aed4 <_fflush_r+0x10>
 800aece:	2500      	movs	r5, #0
 800aed0:	4628      	mov	r0, r5
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	b118      	cbz	r0, 800aede <_fflush_r+0x1a>
 800aed6:	6a03      	ldr	r3, [r0, #32]
 800aed8:	b90b      	cbnz	r3, 800aede <_fflush_r+0x1a>
 800aeda:	f7fe f9bf 	bl	800925c <__sinit>
 800aede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f3      	beq.n	800aece <_fflush_r+0xa>
 800aee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aee8:	07d0      	lsls	r0, r2, #31
 800aeea:	d404      	bmi.n	800aef6 <_fflush_r+0x32>
 800aeec:	0599      	lsls	r1, r3, #22
 800aeee:	d402      	bmi.n	800aef6 <_fflush_r+0x32>
 800aef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aef2:	f7fe fb20 	bl	8009536 <__retarget_lock_acquire_recursive>
 800aef6:	4628      	mov	r0, r5
 800aef8:	4621      	mov	r1, r4
 800aefa:	f7ff ff63 	bl	800adc4 <__sflush_r>
 800aefe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af00:	4605      	mov	r5, r0
 800af02:	07da      	lsls	r2, r3, #31
 800af04:	d4e4      	bmi.n	800aed0 <_fflush_r+0xc>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	059b      	lsls	r3, r3, #22
 800af0a:	d4e1      	bmi.n	800aed0 <_fflush_r+0xc>
 800af0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af0e:	f7fe fb13 	bl	8009538 <__retarget_lock_release_recursive>
 800af12:	e7dd      	b.n	800aed0 <_fflush_r+0xc>

0800af14 <memmove>:
 800af14:	4288      	cmp	r0, r1
 800af16:	b510      	push	{r4, lr}
 800af18:	eb01 0402 	add.w	r4, r1, r2
 800af1c:	d902      	bls.n	800af24 <memmove+0x10>
 800af1e:	4284      	cmp	r4, r0
 800af20:	4623      	mov	r3, r4
 800af22:	d807      	bhi.n	800af34 <memmove+0x20>
 800af24:	1e43      	subs	r3, r0, #1
 800af26:	42a1      	cmp	r1, r4
 800af28:	d008      	beq.n	800af3c <memmove+0x28>
 800af2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af32:	e7f8      	b.n	800af26 <memmove+0x12>
 800af34:	4601      	mov	r1, r0
 800af36:	4402      	add	r2, r0
 800af38:	428a      	cmp	r2, r1
 800af3a:	d100      	bne.n	800af3e <memmove+0x2a>
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af46:	e7f7      	b.n	800af38 <memmove+0x24>

0800af48 <_sbrk_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	2300      	movs	r3, #0
 800af4c:	4d05      	ldr	r5, [pc, #20]	@ (800af64 <_sbrk_r+0x1c>)
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f7 f8da 	bl	800210c <_sbrk>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_sbrk_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_sbrk_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20003238 	.word	0x20003238

0800af68 <__assert_func>:
 800af68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af6a:	4614      	mov	r4, r2
 800af6c:	461a      	mov	r2, r3
 800af6e:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <__assert_func+0x2c>)
 800af70:	4605      	mov	r5, r0
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68d8      	ldr	r0, [r3, #12]
 800af76:	b954      	cbnz	r4, 800af8e <__assert_func+0x26>
 800af78:	4b07      	ldr	r3, [pc, #28]	@ (800af98 <__assert_func+0x30>)
 800af7a:	461c      	mov	r4, r3
 800af7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af80:	9100      	str	r1, [sp, #0]
 800af82:	462b      	mov	r3, r5
 800af84:	4905      	ldr	r1, [pc, #20]	@ (800af9c <__assert_func+0x34>)
 800af86:	f000 f86f 	bl	800b068 <fiprintf>
 800af8a:	f000 f87f 	bl	800b08c <abort>
 800af8e:	4b04      	ldr	r3, [pc, #16]	@ (800afa0 <__assert_func+0x38>)
 800af90:	e7f4      	b.n	800af7c <__assert_func+0x14>
 800af92:	bf00      	nop
 800af94:	20000020 	.word	0x20000020
 800af98:	0800ba8e 	.word	0x0800ba8e
 800af9c:	0800ba60 	.word	0x0800ba60
 800afa0:	0800ba53 	.word	0x0800ba53

0800afa4 <_calloc_r>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	fba1 5402 	umull	r5, r4, r1, r2
 800afaa:	b93c      	cbnz	r4, 800afbc <_calloc_r+0x18>
 800afac:	4629      	mov	r1, r5
 800afae:	f7ff f9a5 	bl	800a2fc <_malloc_r>
 800afb2:	4606      	mov	r6, r0
 800afb4:	b928      	cbnz	r0, 800afc2 <_calloc_r+0x1e>
 800afb6:	2600      	movs	r6, #0
 800afb8:	4630      	mov	r0, r6
 800afba:	bd70      	pop	{r4, r5, r6, pc}
 800afbc:	220c      	movs	r2, #12
 800afbe:	6002      	str	r2, [r0, #0]
 800afc0:	e7f9      	b.n	800afb6 <_calloc_r+0x12>
 800afc2:	462a      	mov	r2, r5
 800afc4:	4621      	mov	r1, r4
 800afc6:	f7fe f9e2 	bl	800938e <memset>
 800afca:	e7f5      	b.n	800afb8 <_calloc_r+0x14>

0800afcc <__ascii_mbtowc>:
 800afcc:	b082      	sub	sp, #8
 800afce:	b901      	cbnz	r1, 800afd2 <__ascii_mbtowc+0x6>
 800afd0:	a901      	add	r1, sp, #4
 800afd2:	b142      	cbz	r2, 800afe6 <__ascii_mbtowc+0x1a>
 800afd4:	b14b      	cbz	r3, 800afea <__ascii_mbtowc+0x1e>
 800afd6:	7813      	ldrb	r3, [r2, #0]
 800afd8:	600b      	str	r3, [r1, #0]
 800afda:	7812      	ldrb	r2, [r2, #0]
 800afdc:	1e10      	subs	r0, r2, #0
 800afde:	bf18      	it	ne
 800afe0:	2001      	movne	r0, #1
 800afe2:	b002      	add	sp, #8
 800afe4:	4770      	bx	lr
 800afe6:	4610      	mov	r0, r2
 800afe8:	e7fb      	b.n	800afe2 <__ascii_mbtowc+0x16>
 800afea:	f06f 0001 	mvn.w	r0, #1
 800afee:	e7f8      	b.n	800afe2 <__ascii_mbtowc+0x16>

0800aff0 <_realloc_r>:
 800aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff4:	4680      	mov	r8, r0
 800aff6:	4615      	mov	r5, r2
 800aff8:	460c      	mov	r4, r1
 800affa:	b921      	cbnz	r1, 800b006 <_realloc_r+0x16>
 800affc:	4611      	mov	r1, r2
 800affe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b002:	f7ff b97b 	b.w	800a2fc <_malloc_r>
 800b006:	b92a      	cbnz	r2, 800b014 <_realloc_r+0x24>
 800b008:	f7ff f906 	bl	800a218 <_free_r>
 800b00c:	2400      	movs	r4, #0
 800b00e:	4620      	mov	r0, r4
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	f000 f841 	bl	800b09a <_malloc_usable_size_r>
 800b018:	4285      	cmp	r5, r0
 800b01a:	4606      	mov	r6, r0
 800b01c:	d802      	bhi.n	800b024 <_realloc_r+0x34>
 800b01e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b022:	d8f4      	bhi.n	800b00e <_realloc_r+0x1e>
 800b024:	4629      	mov	r1, r5
 800b026:	4640      	mov	r0, r8
 800b028:	f7ff f968 	bl	800a2fc <_malloc_r>
 800b02c:	4607      	mov	r7, r0
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0ec      	beq.n	800b00c <_realloc_r+0x1c>
 800b032:	42b5      	cmp	r5, r6
 800b034:	462a      	mov	r2, r5
 800b036:	4621      	mov	r1, r4
 800b038:	bf28      	it	cs
 800b03a:	4632      	movcs	r2, r6
 800b03c:	f7fe fa8b 	bl	8009556 <memcpy>
 800b040:	4621      	mov	r1, r4
 800b042:	4640      	mov	r0, r8
 800b044:	f7ff f8e8 	bl	800a218 <_free_r>
 800b048:	463c      	mov	r4, r7
 800b04a:	e7e0      	b.n	800b00e <_realloc_r+0x1e>

0800b04c <__ascii_wctomb>:
 800b04c:	4603      	mov	r3, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	b141      	cbz	r1, 800b064 <__ascii_wctomb+0x18>
 800b052:	2aff      	cmp	r2, #255	@ 0xff
 800b054:	d904      	bls.n	800b060 <__ascii_wctomb+0x14>
 800b056:	228a      	movs	r2, #138	@ 0x8a
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	4770      	bx	lr
 800b060:	2001      	movs	r0, #1
 800b062:	700a      	strb	r2, [r1, #0]
 800b064:	4770      	bx	lr
	...

0800b068 <fiprintf>:
 800b068:	b40e      	push	{r1, r2, r3}
 800b06a:	b503      	push	{r0, r1, lr}
 800b06c:	4601      	mov	r1, r0
 800b06e:	ab03      	add	r3, sp, #12
 800b070:	4805      	ldr	r0, [pc, #20]	@ (800b088 <fiprintf+0x20>)
 800b072:	f853 2b04 	ldr.w	r2, [r3], #4
 800b076:	6800      	ldr	r0, [r0, #0]
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	f000 f83d 	bl	800b0f8 <_vfiprintf_r>
 800b07e:	b002      	add	sp, #8
 800b080:	f85d eb04 	ldr.w	lr, [sp], #4
 800b084:	b003      	add	sp, #12
 800b086:	4770      	bx	lr
 800b088:	20000020 	.word	0x20000020

0800b08c <abort>:
 800b08c:	2006      	movs	r0, #6
 800b08e:	b508      	push	{r3, lr}
 800b090:	f000 fa06 	bl	800b4a0 <raise>
 800b094:	2001      	movs	r0, #1
 800b096:	f7f6 ffc4 	bl	8002022 <_exit>

0800b09a <_malloc_usable_size_r>:
 800b09a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09e:	1f18      	subs	r0, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	bfbc      	itt	lt
 800b0a4:	580b      	ldrlt	r3, [r1, r0]
 800b0a6:	18c0      	addlt	r0, r0, r3
 800b0a8:	4770      	bx	lr

0800b0aa <__sfputc_r>:
 800b0aa:	6893      	ldr	r3, [r2, #8]
 800b0ac:	b410      	push	{r4}
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	6093      	str	r3, [r2, #8]
 800b0b4:	da07      	bge.n	800b0c6 <__sfputc_r+0x1c>
 800b0b6:	6994      	ldr	r4, [r2, #24]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	db01      	blt.n	800b0c0 <__sfputc_r+0x16>
 800b0bc:	290a      	cmp	r1, #10
 800b0be:	d102      	bne.n	800b0c6 <__sfputc_r+0x1c>
 800b0c0:	bc10      	pop	{r4}
 800b0c2:	f000 b931 	b.w	800b328 <__swbuf_r>
 800b0c6:	6813      	ldr	r3, [r2, #0]
 800b0c8:	1c58      	adds	r0, r3, #1
 800b0ca:	6010      	str	r0, [r2, #0]
 800b0cc:	7019      	strb	r1, [r3, #0]
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	bc10      	pop	{r4}
 800b0d2:	4770      	bx	lr

0800b0d4 <__sfputs_r>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	460f      	mov	r7, r1
 800b0da:	4614      	mov	r4, r2
 800b0dc:	18d5      	adds	r5, r2, r3
 800b0de:	42ac      	cmp	r4, r5
 800b0e0:	d101      	bne.n	800b0e6 <__sfputs_r+0x12>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e007      	b.n	800b0f6 <__sfputs_r+0x22>
 800b0e6:	463a      	mov	r2, r7
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ee:	f7ff ffdc 	bl	800b0aa <__sfputc_r>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d1f3      	bne.n	800b0de <__sfputs_r+0xa>
 800b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0f8 <_vfiprintf_r>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	460d      	mov	r5, r1
 800b0fe:	4614      	mov	r4, r2
 800b100:	4698      	mov	r8, r3
 800b102:	4606      	mov	r6, r0
 800b104:	b09d      	sub	sp, #116	@ 0x74
 800b106:	b118      	cbz	r0, 800b110 <_vfiprintf_r+0x18>
 800b108:	6a03      	ldr	r3, [r0, #32]
 800b10a:	b90b      	cbnz	r3, 800b110 <_vfiprintf_r+0x18>
 800b10c:	f7fe f8a6 	bl	800925c <__sinit>
 800b110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d405      	bmi.n	800b122 <_vfiprintf_r+0x2a>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d402      	bmi.n	800b122 <_vfiprintf_r+0x2a>
 800b11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b11e:	f7fe fa0a 	bl	8009536 <__retarget_lock_acquire_recursive>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	071b      	lsls	r3, r3, #28
 800b126:	d501      	bpl.n	800b12c <_vfiprintf_r+0x34>
 800b128:	692b      	ldr	r3, [r5, #16]
 800b12a:	b99b      	cbnz	r3, 800b154 <_vfiprintf_r+0x5c>
 800b12c:	4629      	mov	r1, r5
 800b12e:	4630      	mov	r0, r6
 800b130:	f000 f938 	bl	800b3a4 <__swsetup_r>
 800b134:	b170      	cbz	r0, 800b154 <_vfiprintf_r+0x5c>
 800b136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b138:	07dc      	lsls	r4, r3, #31
 800b13a:	d504      	bpl.n	800b146 <_vfiprintf_r+0x4e>
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	b01d      	add	sp, #116	@ 0x74
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	89ab      	ldrh	r3, [r5, #12]
 800b148:	0598      	lsls	r0, r3, #22
 800b14a:	d4f7      	bmi.n	800b13c <_vfiprintf_r+0x44>
 800b14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b14e:	f7fe f9f3 	bl	8009538 <__retarget_lock_release_recursive>
 800b152:	e7f3      	b.n	800b13c <_vfiprintf_r+0x44>
 800b154:	2300      	movs	r3, #0
 800b156:	9309      	str	r3, [sp, #36]	@ 0x24
 800b158:	2320      	movs	r3, #32
 800b15a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b15e:	2330      	movs	r3, #48	@ 0x30
 800b160:	f04f 0901 	mov.w	r9, #1
 800b164:	f8cd 800c 	str.w	r8, [sp, #12]
 800b168:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b314 <_vfiprintf_r+0x21c>
 800b16c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b170:	4623      	mov	r3, r4
 800b172:	469a      	mov	sl, r3
 800b174:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b178:	b10a      	cbz	r2, 800b17e <_vfiprintf_r+0x86>
 800b17a:	2a25      	cmp	r2, #37	@ 0x25
 800b17c:	d1f9      	bne.n	800b172 <_vfiprintf_r+0x7a>
 800b17e:	ebba 0b04 	subs.w	fp, sl, r4
 800b182:	d00b      	beq.n	800b19c <_vfiprintf_r+0xa4>
 800b184:	465b      	mov	r3, fp
 800b186:	4622      	mov	r2, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff ffa2 	bl	800b0d4 <__sfputs_r>
 800b190:	3001      	adds	r0, #1
 800b192:	f000 80a7 	beq.w	800b2e4 <_vfiprintf_r+0x1ec>
 800b196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b198:	445a      	add	r2, fp
 800b19a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b19c:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 809f 	beq.w	800b2e4 <_vfiprintf_r+0x1ec>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1b0:	f10a 0a01 	add.w	sl, sl, #1
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	9307      	str	r3, [sp, #28]
 800b1b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1be:	4654      	mov	r4, sl
 800b1c0:	2205      	movs	r2, #5
 800b1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c6:	4853      	ldr	r0, [pc, #332]	@ (800b314 <_vfiprintf_r+0x21c>)
 800b1c8:	f7fe f9b7 	bl	800953a <memchr>
 800b1cc:	9a04      	ldr	r2, [sp, #16]
 800b1ce:	b9d8      	cbnz	r0, 800b208 <_vfiprintf_r+0x110>
 800b1d0:	06d1      	lsls	r1, r2, #27
 800b1d2:	bf44      	itt	mi
 800b1d4:	2320      	movmi	r3, #32
 800b1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1da:	0713      	lsls	r3, r2, #28
 800b1dc:	bf44      	itt	mi
 800b1de:	232b      	movmi	r3, #43	@ 0x2b
 800b1e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ea:	d015      	beq.n	800b218 <_vfiprintf_r+0x120>
 800b1ec:	4654      	mov	r4, sl
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	f04f 0c0a 	mov.w	ip, #10
 800b1f4:	9a07      	ldr	r2, [sp, #28]
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1fc:	3b30      	subs	r3, #48	@ 0x30
 800b1fe:	2b09      	cmp	r3, #9
 800b200:	d94b      	bls.n	800b29a <_vfiprintf_r+0x1a2>
 800b202:	b1b0      	cbz	r0, 800b232 <_vfiprintf_r+0x13a>
 800b204:	9207      	str	r2, [sp, #28]
 800b206:	e014      	b.n	800b232 <_vfiprintf_r+0x13a>
 800b208:	eba0 0308 	sub.w	r3, r0, r8
 800b20c:	fa09 f303 	lsl.w	r3, r9, r3
 800b210:	4313      	orrs	r3, r2
 800b212:	46a2      	mov	sl, r4
 800b214:	9304      	str	r3, [sp, #16]
 800b216:	e7d2      	b.n	800b1be <_vfiprintf_r+0xc6>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	1d19      	adds	r1, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	9103      	str	r1, [sp, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfbb      	ittet	lt
 800b224:	425b      	neglt	r3, r3
 800b226:	f042 0202 	orrlt.w	r2, r2, #2
 800b22a:	9307      	strge	r3, [sp, #28]
 800b22c:	9307      	strlt	r3, [sp, #28]
 800b22e:	bfb8      	it	lt
 800b230:	9204      	strlt	r2, [sp, #16]
 800b232:	7823      	ldrb	r3, [r4, #0]
 800b234:	2b2e      	cmp	r3, #46	@ 0x2e
 800b236:	d10a      	bne.n	800b24e <_vfiprintf_r+0x156>
 800b238:	7863      	ldrb	r3, [r4, #1]
 800b23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b23c:	d132      	bne.n	800b2a4 <_vfiprintf_r+0x1ac>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	3402      	adds	r4, #2
 800b242:	1d1a      	adds	r2, r3, #4
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	9203      	str	r2, [sp, #12]
 800b248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b24c:	9305      	str	r3, [sp, #20]
 800b24e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b318 <_vfiprintf_r+0x220>
 800b252:	2203      	movs	r2, #3
 800b254:	4650      	mov	r0, sl
 800b256:	7821      	ldrb	r1, [r4, #0]
 800b258:	f7fe f96f 	bl	800953a <memchr>
 800b25c:	b138      	cbz	r0, 800b26e <_vfiprintf_r+0x176>
 800b25e:	2240      	movs	r2, #64	@ 0x40
 800b260:	9b04      	ldr	r3, [sp, #16]
 800b262:	eba0 000a 	sub.w	r0, r0, sl
 800b266:	4082      	lsls	r2, r0
 800b268:	4313      	orrs	r3, r2
 800b26a:	3401      	adds	r4, #1
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b272:	2206      	movs	r2, #6
 800b274:	4829      	ldr	r0, [pc, #164]	@ (800b31c <_vfiprintf_r+0x224>)
 800b276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b27a:	f7fe f95e 	bl	800953a <memchr>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d03f      	beq.n	800b302 <_vfiprintf_r+0x20a>
 800b282:	4b27      	ldr	r3, [pc, #156]	@ (800b320 <_vfiprintf_r+0x228>)
 800b284:	bb1b      	cbnz	r3, 800b2ce <_vfiprintf_r+0x1d6>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	3307      	adds	r3, #7
 800b28a:	f023 0307 	bic.w	r3, r3, #7
 800b28e:	3308      	adds	r3, #8
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b294:	443b      	add	r3, r7
 800b296:	9309      	str	r3, [sp, #36]	@ 0x24
 800b298:	e76a      	b.n	800b170 <_vfiprintf_r+0x78>
 800b29a:	460c      	mov	r4, r1
 800b29c:	2001      	movs	r0, #1
 800b29e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2a2:	e7a8      	b.n	800b1f6 <_vfiprintf_r+0xfe>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f04f 0c0a 	mov.w	ip, #10
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	3401      	adds	r4, #1
 800b2ae:	9305      	str	r3, [sp, #20]
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b6:	3a30      	subs	r2, #48	@ 0x30
 800b2b8:	2a09      	cmp	r2, #9
 800b2ba:	d903      	bls.n	800b2c4 <_vfiprintf_r+0x1cc>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0c6      	beq.n	800b24e <_vfiprintf_r+0x156>
 800b2c0:	9105      	str	r1, [sp, #20]
 800b2c2:	e7c4      	b.n	800b24e <_vfiprintf_r+0x156>
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2cc:	e7f0      	b.n	800b2b0 <_vfiprintf_r+0x1b8>
 800b2ce:	ab03      	add	r3, sp, #12
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	4b13      	ldr	r3, [pc, #76]	@ (800b324 <_vfiprintf_r+0x22c>)
 800b2d8:	a904      	add	r1, sp, #16
 800b2da:	f7fd fb75 	bl	80089c8 <_printf_float>
 800b2de:	4607      	mov	r7, r0
 800b2e0:	1c78      	adds	r0, r7, #1
 800b2e2:	d1d6      	bne.n	800b292 <_vfiprintf_r+0x19a>
 800b2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d405      	bmi.n	800b2f6 <_vfiprintf_r+0x1fe>
 800b2ea:	89ab      	ldrh	r3, [r5, #12]
 800b2ec:	059a      	lsls	r2, r3, #22
 800b2ee:	d402      	bmi.n	800b2f6 <_vfiprintf_r+0x1fe>
 800b2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2f2:	f7fe f921 	bl	8009538 <__retarget_lock_release_recursive>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	065b      	lsls	r3, r3, #25
 800b2fa:	f53f af1f 	bmi.w	800b13c <_vfiprintf_r+0x44>
 800b2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b300:	e71e      	b.n	800b140 <_vfiprintf_r+0x48>
 800b302:	ab03      	add	r3, sp, #12
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	462a      	mov	r2, r5
 800b308:	4630      	mov	r0, r6
 800b30a:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <_vfiprintf_r+0x22c>)
 800b30c:	a904      	add	r1, sp, #16
 800b30e:	f7fd fdf9 	bl	8008f04 <_printf_i>
 800b312:	e7e4      	b.n	800b2de <_vfiprintf_r+0x1e6>
 800b314:	0800ba38 	.word	0x0800ba38
 800b318:	0800ba3e 	.word	0x0800ba3e
 800b31c:	0800ba42 	.word	0x0800ba42
 800b320:	080089c9 	.word	0x080089c9
 800b324:	0800b0d5 	.word	0x0800b0d5

0800b328 <__swbuf_r>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	460e      	mov	r6, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	4605      	mov	r5, r0
 800b330:	b118      	cbz	r0, 800b33a <__swbuf_r+0x12>
 800b332:	6a03      	ldr	r3, [r0, #32]
 800b334:	b90b      	cbnz	r3, 800b33a <__swbuf_r+0x12>
 800b336:	f7fd ff91 	bl	800925c <__sinit>
 800b33a:	69a3      	ldr	r3, [r4, #24]
 800b33c:	60a3      	str	r3, [r4, #8]
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	071a      	lsls	r2, r3, #28
 800b342:	d501      	bpl.n	800b348 <__swbuf_r+0x20>
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	b943      	cbnz	r3, 800b35a <__swbuf_r+0x32>
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 f82a 	bl	800b3a4 <__swsetup_r>
 800b350:	b118      	cbz	r0, 800b35a <__swbuf_r+0x32>
 800b352:	f04f 37ff 	mov.w	r7, #4294967295
 800b356:	4638      	mov	r0, r7
 800b358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	6922      	ldr	r2, [r4, #16]
 800b35e:	b2f6      	uxtb	r6, r6
 800b360:	1a98      	subs	r0, r3, r2
 800b362:	6963      	ldr	r3, [r4, #20]
 800b364:	4637      	mov	r7, r6
 800b366:	4283      	cmp	r3, r0
 800b368:	dc05      	bgt.n	800b376 <__swbuf_r+0x4e>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f7ff fda9 	bl	800aec4 <_fflush_r>
 800b372:	2800      	cmp	r0, #0
 800b374:	d1ed      	bne.n	800b352 <__swbuf_r+0x2a>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	3b01      	subs	r3, #1
 800b37a:	60a3      	str	r3, [r4, #8]
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	6022      	str	r2, [r4, #0]
 800b382:	701e      	strb	r6, [r3, #0]
 800b384:	6962      	ldr	r2, [r4, #20]
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	429a      	cmp	r2, r3
 800b38a:	d004      	beq.n	800b396 <__swbuf_r+0x6e>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	07db      	lsls	r3, r3, #31
 800b390:	d5e1      	bpl.n	800b356 <__swbuf_r+0x2e>
 800b392:	2e0a      	cmp	r6, #10
 800b394:	d1df      	bne.n	800b356 <__swbuf_r+0x2e>
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f7ff fd93 	bl	800aec4 <_fflush_r>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0d9      	beq.n	800b356 <__swbuf_r+0x2e>
 800b3a2:	e7d6      	b.n	800b352 <__swbuf_r+0x2a>

0800b3a4 <__swsetup_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4b29      	ldr	r3, [pc, #164]	@ (800b44c <__swsetup_r+0xa8>)
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	b118      	cbz	r0, 800b3b8 <__swsetup_r+0x14>
 800b3b0:	6a03      	ldr	r3, [r0, #32]
 800b3b2:	b90b      	cbnz	r3, 800b3b8 <__swsetup_r+0x14>
 800b3b4:	f7fd ff52 	bl	800925c <__sinit>
 800b3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3bc:	0719      	lsls	r1, r3, #28
 800b3be:	d422      	bmi.n	800b406 <__swsetup_r+0x62>
 800b3c0:	06da      	lsls	r2, r3, #27
 800b3c2:	d407      	bmi.n	800b3d4 <__swsetup_r+0x30>
 800b3c4:	2209      	movs	r2, #9
 800b3c6:	602a      	str	r2, [r5, #0]
 800b3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	e033      	b.n	800b43c <__swsetup_r+0x98>
 800b3d4:	0758      	lsls	r0, r3, #29
 800b3d6:	d512      	bpl.n	800b3fe <__swsetup_r+0x5a>
 800b3d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3da:	b141      	cbz	r1, 800b3ee <__swsetup_r+0x4a>
 800b3dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	d002      	beq.n	800b3ea <__swsetup_r+0x46>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7fe ff17 	bl	800a218 <_free_r>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	6063      	str	r3, [r4, #4]
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	f043 0308 	orr.w	r3, r3, #8
 800b404:	81a3      	strh	r3, [r4, #12]
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	b94b      	cbnz	r3, 800b41e <__swsetup_r+0x7a>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b414:	d003      	beq.n	800b41e <__swsetup_r+0x7a>
 800b416:	4621      	mov	r1, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	f000 f882 	bl	800b522 <__smakebuf_r>
 800b41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b422:	f013 0201 	ands.w	r2, r3, #1
 800b426:	d00a      	beq.n	800b43e <__swsetup_r+0x9a>
 800b428:	2200      	movs	r2, #0
 800b42a:	60a2      	str	r2, [r4, #8]
 800b42c:	6962      	ldr	r2, [r4, #20]
 800b42e:	4252      	negs	r2, r2
 800b430:	61a2      	str	r2, [r4, #24]
 800b432:	6922      	ldr	r2, [r4, #16]
 800b434:	b942      	cbnz	r2, 800b448 <__swsetup_r+0xa4>
 800b436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b43a:	d1c5      	bne.n	800b3c8 <__swsetup_r+0x24>
 800b43c:	bd38      	pop	{r3, r4, r5, pc}
 800b43e:	0799      	lsls	r1, r3, #30
 800b440:	bf58      	it	pl
 800b442:	6962      	ldrpl	r2, [r4, #20]
 800b444:	60a2      	str	r2, [r4, #8]
 800b446:	e7f4      	b.n	800b432 <__swsetup_r+0x8e>
 800b448:	2000      	movs	r0, #0
 800b44a:	e7f7      	b.n	800b43c <__swsetup_r+0x98>
 800b44c:	20000020 	.word	0x20000020

0800b450 <_raise_r>:
 800b450:	291f      	cmp	r1, #31
 800b452:	b538      	push	{r3, r4, r5, lr}
 800b454:	4605      	mov	r5, r0
 800b456:	460c      	mov	r4, r1
 800b458:	d904      	bls.n	800b464 <_raise_r+0x14>
 800b45a:	2316      	movs	r3, #22
 800b45c:	6003      	str	r3, [r0, #0]
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b466:	b112      	cbz	r2, 800b46e <_raise_r+0x1e>
 800b468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b46c:	b94b      	cbnz	r3, 800b482 <_raise_r+0x32>
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f830 	bl	800b4d4 <_getpid_r>
 800b474:	4622      	mov	r2, r4
 800b476:	4601      	mov	r1, r0
 800b478:	4628      	mov	r0, r5
 800b47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47e:	f000 b817 	b.w	800b4b0 <_kill_r>
 800b482:	2b01      	cmp	r3, #1
 800b484:	d00a      	beq.n	800b49c <_raise_r+0x4c>
 800b486:	1c59      	adds	r1, r3, #1
 800b488:	d103      	bne.n	800b492 <_raise_r+0x42>
 800b48a:	2316      	movs	r3, #22
 800b48c:	6003      	str	r3, [r0, #0]
 800b48e:	2001      	movs	r0, #1
 800b490:	e7e7      	b.n	800b462 <_raise_r+0x12>
 800b492:	2100      	movs	r1, #0
 800b494:	4620      	mov	r0, r4
 800b496:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b49a:	4798      	blx	r3
 800b49c:	2000      	movs	r0, #0
 800b49e:	e7e0      	b.n	800b462 <_raise_r+0x12>

0800b4a0 <raise>:
 800b4a0:	4b02      	ldr	r3, [pc, #8]	@ (800b4ac <raise+0xc>)
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	6818      	ldr	r0, [r3, #0]
 800b4a6:	f7ff bfd3 	b.w	800b450 <_raise_r>
 800b4aa:	bf00      	nop
 800b4ac:	20000020 	.word	0x20000020

0800b4b0 <_kill_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4d06      	ldr	r5, [pc, #24]	@ (800b4d0 <_kill_r+0x20>)
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	f7f6 fda0 	bl	8002002 <_kill>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	d102      	bne.n	800b4cc <_kill_r+0x1c>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	b103      	cbz	r3, 800b4cc <_kill_r+0x1c>
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20003238 	.word	0x20003238

0800b4d4 <_getpid_r>:
 800b4d4:	f7f6 bd8e 	b.w	8001ff4 <_getpid>

0800b4d8 <__swhatbuf_r>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	460c      	mov	r4, r1
 800b4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e0:	4615      	mov	r5, r2
 800b4e2:	2900      	cmp	r1, #0
 800b4e4:	461e      	mov	r6, r3
 800b4e6:	b096      	sub	sp, #88	@ 0x58
 800b4e8:	da0c      	bge.n	800b504 <__swhatbuf_r+0x2c>
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4f2:	bf14      	ite	ne
 800b4f4:	2340      	movne	r3, #64	@ 0x40
 800b4f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	6031      	str	r1, [r6, #0]
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	b016      	add	sp, #88	@ 0x58
 800b502:	bd70      	pop	{r4, r5, r6, pc}
 800b504:	466a      	mov	r2, sp
 800b506:	f000 f849 	bl	800b59c <_fstat_r>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	dbed      	blt.n	800b4ea <__swhatbuf_r+0x12>
 800b50e:	9901      	ldr	r1, [sp, #4]
 800b510:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b514:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b518:	4259      	negs	r1, r3
 800b51a:	4159      	adcs	r1, r3
 800b51c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b520:	e7eb      	b.n	800b4fa <__swhatbuf_r+0x22>

0800b522 <__smakebuf_r>:
 800b522:	898b      	ldrh	r3, [r1, #12]
 800b524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b526:	079d      	lsls	r5, r3, #30
 800b528:	4606      	mov	r6, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	d507      	bpl.n	800b53e <__smakebuf_r+0x1c>
 800b52e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	2301      	movs	r3, #1
 800b538:	6163      	str	r3, [r4, #20]
 800b53a:	b003      	add	sp, #12
 800b53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b53e:	466a      	mov	r2, sp
 800b540:	ab01      	add	r3, sp, #4
 800b542:	f7ff ffc9 	bl	800b4d8 <__swhatbuf_r>
 800b546:	9f00      	ldr	r7, [sp, #0]
 800b548:	4605      	mov	r5, r0
 800b54a:	4639      	mov	r1, r7
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7fe fed5 	bl	800a2fc <_malloc_r>
 800b552:	b948      	cbnz	r0, 800b568 <__smakebuf_r+0x46>
 800b554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b558:	059a      	lsls	r2, r3, #22
 800b55a:	d4ee      	bmi.n	800b53a <__smakebuf_r+0x18>
 800b55c:	f023 0303 	bic.w	r3, r3, #3
 800b560:	f043 0302 	orr.w	r3, r3, #2
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	e7e2      	b.n	800b52e <__smakebuf_r+0xc>
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b572:	81a3      	strh	r3, [r4, #12]
 800b574:	9b01      	ldr	r3, [sp, #4]
 800b576:	6020      	str	r0, [r4, #0]
 800b578:	b15b      	cbz	r3, 800b592 <__smakebuf_r+0x70>
 800b57a:	4630      	mov	r0, r6
 800b57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b580:	f000 f81e 	bl	800b5c0 <_isatty_r>
 800b584:	b128      	cbz	r0, 800b592 <__smakebuf_r+0x70>
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f023 0303 	bic.w	r3, r3, #3
 800b58c:	f043 0301 	orr.w	r3, r3, #1
 800b590:	81a3      	strh	r3, [r4, #12]
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	431d      	orrs	r5, r3
 800b596:	81a5      	strh	r5, [r4, #12]
 800b598:	e7cf      	b.n	800b53a <__smakebuf_r+0x18>
	...

0800b59c <_fstat_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	2300      	movs	r3, #0
 800b5a0:	4d06      	ldr	r5, [pc, #24]	@ (800b5bc <_fstat_r+0x20>)
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	f7f6 fd89 	bl	80020c0 <_fstat>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	d102      	bne.n	800b5b8 <_fstat_r+0x1c>
 800b5b2:	682b      	ldr	r3, [r5, #0]
 800b5b4:	b103      	cbz	r3, 800b5b8 <_fstat_r+0x1c>
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20003238 	.word	0x20003238

0800b5c0 <_isatty_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4d05      	ldr	r5, [pc, #20]	@ (800b5dc <_isatty_r+0x1c>)
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	f7f6 fd87 	bl	80020de <_isatty>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_isatty_r+0x1a>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_isatty_r+0x1a>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20003238 	.word	0x20003238

0800b5e0 <_init>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr

0800b5ec <_fini>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr
